!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";var i=[],n=t.document,r=Object.getPrototypeOf,s=i.slice,o=i.concat,a=i.push,l=i.indexOf,u={},c=u.toString,d=u.hasOwnProperty,h=d.toString,p=h.call(Object),f={},m=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},g=function(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function y(t,e,i){var r,s=(e=e||n).createElement("script");if(s.text=t,i)for(r in v)i[r]&&(s[r]=i[r]);e.head.appendChild(s).parentNode.removeChild(s)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?u[c.call(t)]||"object":typeof t}var b="3.3.1",x=function(t,e){return new x.fn.init(t,e)},_=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function E(t){var e=!!t&&"length"in t&&t.length,i=w(t);return!m(t)&&!g(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}x.fn=x.prototype={jquery:b,constructor:x,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=x.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return x.each(this,t)},map:function(t){return this.pushStack(x.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:i.sort,splice:i.splice},x.extend=x.fn.extend=function(){var t,e,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||m(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=o[e],o!==(n=t[e])&&(u&&n&&(x.isPlainObject(n)||(r=Array.isArray(n)))?(r?(r=!1,s=i&&Array.isArray(i)?i:[]):s=i&&x.isPlainObject(i)?i:{},o[e]=x.extend(u,s,n)):void 0!==n&&(o[e]=n));return o},x.extend({expando:"jQuery"+(b+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==c.call(t))&&(!(e=r(t))||"function"==typeof(i=d.call(e,"constructor")&&e.constructor)&&h.call(i)===p)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){y(t)},each:function(t,e){var i,n=0;if(E(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},trim:function(t){return null==t?"":(t+"").replace(_,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(E(Object(t))?x.merge(i,"string"==typeof t?[t]:t):a.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:l.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n=[],r=0,s=t.length,o=!i;r<s;r++)!e(t[r],r)!==o&&n.push(t[r]);return n},map:function(t,e,i){var n,r,s=0,a=[];if(E(t))for(n=t.length;s<n;s++)null!=(r=e(t[s],s,i))&&a.push(r);else for(s in t)null!=(r=e(t[s],s,i))&&a.push(r);return o.apply([],a)},guid:1,support:f}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=i[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){u["[object "+e+"]"]=e.toLowerCase()});var T=function(t){var e,i,n,r,s,o,a,l,u,c,d,h,p,f,m,g,v,y,w,b="sizzle"+1*new Date,x=t.document,_=0,E=0,T=ot(),C=ot(),S=ot(),I=function(t,e){return t===e&&(d=!0),0},D={}.hasOwnProperty,k=[],A=k.pop,L=k.push,O=k.push,M=k.slice,P=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",$="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",j="\\["+N+"*("+$+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+$+"))|)"+N+"*\\]",H=":("+$+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|.*)\\)|)",R=new RegExp(N+"+","g"),W=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),q=new RegExp("^"+N+"*,"+N+"*"),B=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),F=new RegExp("="+N+"*([^\\]'\"]*?)"+N+"*\\]","g"),V=new RegExp(H),Y=new RegExp("^"+$+"$"),G={ID:new RegExp("^#("+$+")"),CLASS:new RegExp("^\\.("+$+")"),TAG:new RegExp("^("+$+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+z+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},U=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+N+"?|("+N+")|.)","ig"),tt=function(t,e,i){var n="0x"+e-65536;return n!=n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},nt=function(){h()},rt=yt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{O.apply(k=M.call(x.childNodes),x.childNodes),k[x.childNodes.length].nodeType}catch(t){O={apply:k.length?function(t,e){L.apply(t,M.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function st(t,e,n,r){var s,a,u,c,d,f,v,y=e&&e.ownerDocument,_=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==_&&9!==_&&11!==_)return n;if(!r&&((e?e.ownerDocument||e:x)!==p&&h(e),e=e||p,m)){if(11!==_&&(d=K.exec(t)))if(s=d[1]){if(9===_){if(!(u=e.getElementById(s)))return n;if(u.id===s)return n.push(u),n}else if(y&&(u=y.getElementById(s))&&w(e,u)&&u.id===s)return n.push(u),n}else{if(d[2])return O.apply(n,e.getElementsByTagName(t)),n;if((s=d[3])&&i.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(s)),n}if(i.qsa&&!S[t+" "]&&(!g||!g.test(t))){if(1!==_)y=e,v=t;else if("object"!==e.nodeName.toLowerCase()){for((c=e.getAttribute("id"))?c=c.replace(et,it):e.setAttribute("id",c=b),a=(f=o(t)).length;a--;)f[a]="#"+c+" "+vt(f[a]);v=f.join(","),y=Z.test(t)&&mt(e.parentNode)||e}if(v)try{return O.apply(n,y.querySelectorAll(v)),n}catch(t){}finally{c===b&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,n,r)}function ot(){var t=[];return function e(i,r){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=r}}function at(t){return t[b]=!0,t}function lt(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var i=t.split("|"),r=i.length;r--;)n.attrHandle[i[r]]=e}function ct(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function dt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ht(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function pt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ft(t){return at(function(e){return e=+e,at(function(i,n){for(var r,s=t([],i.length,e),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=st.support={},s=st.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},h=st.setDocument=function(t){var e,r,o=t?t.ownerDocument||t:x;return o!==p&&9===o.nodeType&&o.documentElement?(f=(p=o).documentElement,m=!s(p),x!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",nt,!1):r.attachEvent&&r.attachEvent("onunload",nt)),i.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),i.getElementsByTagName=lt(function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length}),i.getElementsByClassName=Q.test(p.getElementsByClassName),i.getById=lt(function(t){return f.appendChild(t).id=b,!p.getElementsByName||!p.getElementsByName(b).length}),i.getById?(n.filter.ID=function(t){var e=t.replace(J,tt);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(J,tt);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var i,n,r,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&m)return e.getElementsByClassName(t)},v=[],g=[],(i.qsa=Q.test(p.querySelectorAll))&&(lt(function(t){f.appendChild(t).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+N+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+N+"*(?:value|"+z+")"),t.querySelectorAll("[id~="+b+"-]").length||g.push("~="),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+b+"+*").length||g.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+N+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(i.matchesSelector=Q.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&lt(function(t){i.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",H)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),e=Q.test(f.compareDocumentPosition),w=e||Q.test(f.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},I=e?function(t,e){if(t===e)return d=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t===p||t.ownerDocument===x&&w(x,t)?-1:e===p||e.ownerDocument===x&&w(x,e)?1:c?P(c,t)-P(c,e):0:4&n?-1:1)}:function(t,e){if(t===e)return d=!0,0;var i,n=0,r=t.parentNode,s=e.parentNode,o=[t],a=[e];if(!r||!s)return t===p?-1:e===p?1:r?-1:s?1:c?P(c,t)-P(c,e):0;if(r===s)return ct(t,e);for(i=t;i=i.parentNode;)o.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;o[n]===a[n];)n++;return n?ct(o[n],a[n]):o[n]===x?-1:a[n]===x?1:0},p):p},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),e=e.replace(F,"='$1']"),i.matchesSelector&&m&&!S[e+" "]&&(!v||!v.test(e))&&(!g||!g.test(e)))try{var n=y.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return st(e,p,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),w(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var r=n.attrHandle[e.toLowerCase()],s=r&&D.call(n.attrHandle,e.toLowerCase())?r(t,e,!m):void 0;return void 0!==s?s:i.attributes||!m?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null},st.escape=function(t){return(t+"").replace(et,it)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,n=[],r=0,s=0;if(d=!i.detectDuplicates,c=!i.sortStable&&t.slice(0),t.sort(I),d){for(;e=t[s++];)e===t[s]&&(r=n.push(s));for(;r--;)t.splice(n[r],1)}return c=null,t},r=st.getText=function(t){var e,i="",n=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=r(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[n++];)i+=r(e);return i},(n=st.selectors={cacheLength:50,createPseudo:at,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(J,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(J,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return G.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&V.test(i)&&(e=o(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(J,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=T[t+" "];return e||(e=new RegExp("(^|"+N+")"+t+"("+N+"|$)"))&&T(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,i){return function(n){var r=st.attr(n,t);return null==r?"!="===e:!e||(r+="","="===e?r===i:"!="===e?r!==i:"^="===e?i&&0===r.indexOf(i):"*="===e?i&&r.indexOf(i)>-1:"$="===e?i&&r.slice(-i.length)===i:"~="===e?(" "+r.replace(R," ")+" ").indexOf(i)>-1:"|="===e&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var u,c,d,h,p,f,m=s!==o?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(g){if(s){for(;m;){for(h=e;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&y){for(w=(p=(u=(c=(d=(h=g)[b]||(h[b]={}))[h.uniqueID]||(d[h.uniqueID]={}))[t]||[])[0]===_&&u[1])&&u[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(w=p=0)||f.pop();)if(1===h.nodeType&&++w&&h===e){c[t]=[_,p,w];break}}else if(y&&(w=p=(u=(c=(d=(h=e)[b]||(h[b]={}))[h.uniqueID]||(d[h.uniqueID]={}))[t]||[])[0]===_&&u[1]),!1===w)for(;(h=++p&&h&&h[m]||(w=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++w||(y&&((c=(d=h[b]||(h[b]={}))[h.uniqueID]||(d[h.uniqueID]={}))[t]=[_,w]),h!==e)););return(w-=r)===n||w%n==0&&w/n>=0}}},PSEUDO:function(t,e){var i,r=n.pseudos[t]||n.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return r[b]?r(e):r.length>1?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,i){for(var n,s=r(t,e),o=s.length;o--;)t[n=P(t,s[o])]=!(i[n]=s[o])}):function(t){return r(t,0,i)}):r}},pseudos:{not:at(function(t){var e=[],i=[],n=a(t.replace(W,"$1"));return n[b]?at(function(t,e,i,r){for(var s,o=n(t,null,r,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))}):function(t,r,s){return e[0]=t,n(e,null,s,i),e[0]=null,!i.pop()}}),has:at(function(t){return function(e){return st(t,e).length>0}}),contains:at(function(t){return t=t.replace(J,tt),function(e){return(e.textContent||e.innerText||r(e)).indexOf(t)>-1}}),lang:at(function(t){return Y.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(J,tt).toLowerCase(),function(e){var i;do{if(i=m?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:pt(!1),disabled:pt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return U.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:ft(function(){return[0]}),last:ft(function(t,e){return[e-1]}),eq:ft(function(t,e,i){return[i<0?i+e:i]}),even:ft(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:ft(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:ft(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:ft(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=dt(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ht(e);function gt(){}function vt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function yt(t,e,i){var n=e.dir,r=e.next,s=r||n,o=i&&"parentNode"===s,a=E++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,r);return!1}:function(e,i,l){var u,c,d,h=[_,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(c=(d=e[b]||(e[b]={}))[e.uniqueID]||(d[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[n]||e;else{if((u=c[s])&&u[0]===_&&u[1]===a)return h[2]=u[2];if(c[s]=h,h[2]=t(e,i,l))return!0}return!1}}function wt(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function bt(t,e,i,n,r){for(var s,o=[],a=0,l=t.length,u=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,r)||(o.push(s),u&&e.push(a)));return o}function xt(t,e,i,n,r,s){return n&&!n[b]&&(n=xt(n)),r&&!r[b]&&(r=xt(r,s)),at(function(s,o,a,l){var u,c,d,h=[],p=[],f=o.length,m=s||function(t,e,i){for(var n=0,r=e.length;n<r;n++)st(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),g=!t||!s&&e?m:bt(m,h,t,a,l),v=i?r||(s?t:f||n)?[]:o:g;if(i&&i(g,v,a,l),n)for(u=bt(v,p),n(u,[],a,l),c=u.length;c--;)(d=u[c])&&(v[p[c]]=!(g[p[c]]=d));if(s){if(r||t){if(r){for(u=[],c=v.length;c--;)(d=v[c])&&u.push(g[c]=d);r(null,v=[],u,l)}for(c=v.length;c--;)(d=v[c])&&(u=r?P(s,d):h[c])>-1&&(s[u]=!(o[u]=d))}}else v=bt(v===o?v.splice(f,v.length):v),r?r(null,o,v,l):O.apply(o,v)})}function _t(t){for(var e,i,r,s=t.length,o=n.relative[t[0].type],a=o||n.relative[" "],l=o?1:0,c=yt(function(t){return t===e},a,!0),d=yt(function(t){return P(e,t)>-1},a,!0),h=[function(t,i,n){var r=!o&&(n||i!==u)||((e=i).nodeType?c(t,i,n):d(t,i,n));return e=null,r}];l<s;l++)if(i=n.relative[t[l].type])h=[yt(wt(h),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[b]){for(r=++l;r<s&&!n.relative[t[r].type];r++);return xt(l>1&&wt(h),l>1&&vt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),i,l<r&&_t(t.slice(l,r)),r<s&&_t(t=t.slice(r)),r<s&&vt(t))}h.push(i)}return wt(h)}return gt.prototype=n.filters=n.pseudos,n.setFilters=new gt,o=st.tokenize=function(t,e){var i,r,s,o,a,l,u,c=C[t+" "];if(c)return e?0:c.slice(0);for(a=t,l=[],u=n.preFilter;a;){for(o in i&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),i=!1,(r=B.exec(a))&&(i=r.shift(),s.push({value:i,type:r[0].replace(W," ")}),a=a.slice(i.length)),n.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(i=r.shift(),s.push({value:i,type:o,matches:r}),a=a.slice(i.length));if(!i)break}return e?a.length:a?st.error(t):C(t,l).slice(0)},a=st.compile=function(t,e){var i,r,s,a,l,c,d=[],f=[],g=S[t+" "];if(!g){for(e||(e=o(t)),i=e.length;i--;)(g=_t(e[i]))[b]?d.push(g):f.push(g);(g=S(t,(r=f,a=(s=d).length>0,l=r.length>0,c=function(t,e,i,o,c){var d,f,g,v=0,y="0",w=t&&[],b=[],x=u,E=t||l&&n.find.TAG("*",c),T=_+=null==x?1:Math.random()||.1,C=E.length;for(c&&(u=e===p||e||c);y!==C&&null!=(d=E[y]);y++){if(l&&d){for(f=0,e||d.ownerDocument===p||(h(d),i=!m);g=r[f++];)if(g(d,e||p,i)){o.push(d);break}c&&(_=T)}a&&((d=!g&&d)&&v--,t&&w.push(d))}if(v+=y,a&&y!==v){for(f=0;g=s[f++];)g(w,b,e,i);if(t){if(v>0)for(;y--;)w[y]||b[y]||(b[y]=A.call(o));b=bt(b)}O.apply(o,b),c&&!t&&b.length>0&&v+s.length>1&&st.uniqueSort(o)}return c&&(_=T,u=x),w},a?at(c):c))).selector=t}return g},l=st.select=function(t,e,i,r){var s,l,u,c,d,h="function"==typeof t&&t,p=!r&&o(t=h.selector||t);if(i=i||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===e.nodeType&&m&&n.relative[l[1].type]){if(!(e=(n.find.ID(u.matches[0].replace(J,tt),e)||[])[0]))return i;h&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(s=G.needsContext.test(t)?0:l.length;s--&&(u=l[s],!n.relative[c=u.type]);)if((d=n.find[c])&&(r=d(u.matches[0].replace(J,tt),Z.test(l[0].type)&&mt(e.parentNode)||e))){if(l.splice(s,1),!(t=r.length&&vt(l)))return O.apply(i,r),i;break}}return(h||a(t,p))(r,e,!m,i,!e||Z.test(t)&&mt(e.parentNode)||e),i},i.sortStable=b.split("").sort(I).join("")===b,i.detectDuplicates=!!d,h(),i.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),i.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ut(z,function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),st}(t);x.find=T,x.expr=T.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=T.uniqueSort,x.text=T.getText,x.isXMLDoc=T.isXML,x.contains=T.contains,x.escapeSelector=T.escape;var C=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&x(t).is(i))break;n.push(t)}return n},S=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},I=x.expr.match.needsContext;function D(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var k=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(t,e,i){return m(e)?x.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?x.grep(t,function(t){return t===e!==i}):"string"!=typeof e?x.grep(t,function(t){return l.call(e,t)>-1!==i}):x.filter(e,t,i)}x.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?x.find.matchesSelector(n,t)?[n]:[]:x.find.matches(t,x.grep(e,function(t){return 1===t.nodeType}))},x.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(x(t).filter(function(){for(e=0;e<n;e++)if(x.contains(r[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)x.find(t,r[e],i);return n>1?x.uniqueSort(i):i},filter:function(t){return this.pushStack(A(this,t||[],!1))},not:function(t){return this.pushStack(A(this,t||[],!0))},is:function(t){return!!A(this,"string"==typeof t&&I.test(t)?x(t):t||[],!1).length}});var L,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(t,e,i){var r,s;if(!t)return this;if(i=i||L,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:O.exec(t))||!r[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof x?e[0]:e,x.merge(this,x.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:n,!0)),k.test(r[1])&&x.isPlainObject(e))for(r in e)m(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(s=n.getElementById(r[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):m(t)?void 0!==i.ready?i.ready(t):t(x):x.makeArray(t,this)}).prototype=x.fn,L=x(n);var M=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function z(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}x.fn.extend({has:function(t){var e=x(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(x.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,r=this.length,s=[],o="string"!=typeof t&&x(t);if(!I.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&x.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?x.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?l.call(x(t),this[0]):l.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),x.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return C(t,"parentNode")},parentsUntil:function(t,e,i){return C(t,"parentNode",i)},next:function(t){return z(t,"nextSibling")},prev:function(t){return z(t,"previousSibling")},nextAll:function(t){return C(t,"nextSibling")},prevAll:function(t){return C(t,"previousSibling")},nextUntil:function(t,e,i){return C(t,"nextSibling",i)},prevUntil:function(t,e,i){return C(t,"previousSibling",i)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return D(t,"iframe")?t.contentDocument:(D(t,"template")&&(t=t.content||t),x.merge([],t.childNodes))}},function(t,e){x.fn[t]=function(i,n){var r=x.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=x.filter(n,r)),this.length>1&&(P[t]||x.uniqueSort(r),M.test(t)&&r.reverse()),this.pushStack(r)}});var N=/[^\x20\t\r\n\f]+/g;function $(t){return t}function j(t){throw t}function H(t,e,i,n){var r;try{t&&m(r=t.promise)?r.call(t).done(e).fail(i):t&&m(r=t.then)?r.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}x.Callbacks=function(t){var e,i;t="string"==typeof t?(e=t,i={},x.each(e.match(N)||[],function(t,e){i[e]=!0}),i):x.extend({},t);var n,r,s,o,a=[],l=[],u=-1,c=function(){for(o=o||t.once,s=n=!0;l.length;u=-1)for(r=l.shift();++u<a.length;)!1===a[u].apply(r[0],r[1])&&t.stopOnFalse&&(u=a.length,r=!1);t.memory||(r=!1),n=!1,o&&(a=r?[]:"")},d={add:function(){return a&&(r&&!n&&(u=a.length-1,l.push(r)),function e(i){x.each(i,function(i,n){m(n)?t.unique&&d.has(n)||a.push(n):n&&n.length&&"string"!==w(n)&&e(n)})}(arguments),r&&!n&&c()),this},remove:function(){return x.each(arguments,function(t,e){for(var i;(i=x.inArray(e,a,i))>-1;)a.splice(i,1),i<=u&&u--}),this},has:function(t){return t?x.inArray(t,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return o=l=[],a=r="",this},disabled:function(){return!a},lock:function(){return o=l=[],r||n||(a=r=""),this},locked:function(){return!!o},fireWith:function(t,e){return o||(e=[t,(e=e||[]).slice?e.slice():e],l.push(e),n||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},x.extend({Deferred:function(e){var i=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return x.Deferred(function(e){x.each(i,function(i,n){var r=m(t[n[4]])&&t[n[4]];s[n[1]](function(){var t=r&&r.apply(this,arguments);t&&m(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,n,r){var s=0;function o(e,i,n,r){return function(){var a=this,l=arguments,u=function(){var t,u;if(!(e<s)){if((t=n.apply(a,l))===i.promise())throw new TypeError("Thenable self-resolution");u=t&&("object"==typeof t||"function"==typeof t)&&t.then,m(u)?r?u.call(t,o(s,i,$,r),o(s,i,j,r)):(s++,u.call(t,o(s,i,$,r),o(s,i,j,r),o(s,i,$,i.notifyWith))):(n!==$&&(a=void 0,l=[t]),(r||i.resolveWith)(a,l))}},c=r?u:function(){try{u()}catch(t){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(t,c.stackTrace),e+1>=s&&(n!==j&&(a=void 0,l=[t]),i.rejectWith(a,l))}};e?c():(x.Deferred.getStackHook&&(c.stackTrace=x.Deferred.getStackHook()),t.setTimeout(c))}}return x.Deferred(function(t){i[0][3].add(o(0,t,m(r)?r:$,t.notifyWith)),i[1][3].add(o(0,t,m(e)?e:$)),i[2][3].add(o(0,t,m(n)?n:j))}).promise()},promise:function(t){return null!=t?x.extend(t,r):r}},s={};return x.each(i,function(t,e){var o=e[2],a=e[5];r[e[1]]=o.add,a&&o.add(function(){n=a},i[3-t][2].disable,i[3-t][3].disable,i[0][2].lock,i[0][3].lock),o.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=s.call(arguments),o=x.Deferred(),a=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?s.call(arguments):i,--e||o.resolveWith(n,r)}};if(e<=1&&(H(t,o.done(a(i)).resolve,o.reject,!e),"pending"===o.state()||m(r[i]&&r[i].then)))return o.then();for(;i--;)H(r[i],a(i),o.reject);return o.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&R.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},x.readyException=function(e){t.setTimeout(function(){throw e})};var W=x.Deferred();function q(){n.removeEventListener("DOMContentLoaded",q),t.removeEventListener("load",q),x.ready()}x.fn.ready=function(t){return W.then(t).catch(function(t){x.readyException(t)}),this},x.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==t&&--x.readyWait>0||W.resolveWith(n,[x]))}}),x.ready.then=W.then,"complete"===n.readyState||"loading"!==n.readyState&&!n.documentElement.doScroll?t.setTimeout(x.ready):(n.addEventListener("DOMContentLoaded",q),t.addEventListener("load",q));var B=function(t,e,i,n,r,s,o){var a=0,l=t.length,u=null==i;if("object"===w(i))for(a in r=!0,i)B(t,e,a,i[a],!0,s,o);else if(void 0!==n&&(r=!0,m(n)||(o=!0),u&&(o?(e.call(t,n),e=null):(u=e,e=function(t,e,i){return u.call(x(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return r?t:u?e.call(t):l?e(t[0],i):s},F=/^-ms-/,V=/-([a-z])/g;function Y(t,e){return e.toUpperCase()}function G(t){return t.replace(F,"ms-").replace(V,Y)}var U=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function X(){this.expando=x.expando+X.uid++}X.uid=1,X.prototype={cache:function(t){var e=t[this.expando];return e||(e={},U(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[G(e)]=i;else for(n in e)r[G(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][G(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(G):(e=G(e))in n?[e]:e.match(N)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||x.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!x.isEmptyObject(e)}};var Q=new X,K=new X,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function tt(t,e,i){var n,r;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i="true"===(r=i)||"false"!==r&&("null"===r?null:r===+r+""?+r:Z.test(r)?JSON.parse(r):r)}catch(t){}K.set(t,e,i)}else i=void 0;return i}x.extend({hasData:function(t){return K.hasData(t)||Q.hasData(t)},data:function(t,e,i){return K.access(t,e,i)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,i){return Q.access(t,e,i)},_removeData:function(t,e){Q.remove(t,e)}}),x.fn.extend({data:function(t,e){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=K.get(s),1===s.nodeType&&!Q.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&0===(n=o[i].name).indexOf("data-")&&(n=G(n.slice(5)),tt(s,n,r[n]));Q.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){K.set(this,t)}):B(this,function(e){var i;if(s&&void 0===e)return void 0!==(i=K.get(s,t))?i:void 0!==(i=tt(s,t))?i:void 0;this.each(function(){K.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),x.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=Q.get(t,e),i&&(!n||Array.isArray(i)?n=Q.access(t,e,x.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=x.queue(t,e),n=i.length,r=i.shift(),s=x._queueHooks(t,e);"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,function(){x.dequeue(t,e)},s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Q.get(t,i)||Q.access(t,i,{empty:x.Callbacks("once memory").add(function(){Q.remove(t,[e+"queue",i])})})}}),x.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?x.queue(this[0],t):void 0===e?this:this.each(function(){var i=x.queue(this,t,e);x._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&x.dequeue(this,t)})},dequeue:function(t){return this.each(function(){x.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=x.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)(i=Q.get(s[o],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),nt=["Top","Right","Bottom","Left"],rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&x.contains(t.ownerDocument,t)&&"none"===x.css(t,"display")},st=function(t,e,i,n){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in r=i.apply(t,n||[]),e)t.style[s]=o[s];return r};function ot(t,e,i,n){var r,s,o=20,a=n?function(){return n.cur()}:function(){return x.css(t,e,"")},l=a(),u=i&&i[3]||(x.cssNumber[e]?"":"px"),c=(x.cssNumber[e]||"px"!==u&&+l)&&it.exec(x.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)x.style(t,e,c+u),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),c/=s;c*=2,x.style(t,e,c+u),i=i||[]}return i&&(c=+c||+l||0,r=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=r)),r}var at={};function lt(t,e){for(var i,n,r,s,o,a,l,u=[],c=0,d=t.length;c<d;c++)(n=t[c]).style&&(i=n.style.display,e?("none"===i&&(u[c]=Q.get(n,"display")||null,u[c]||(n.style.display="")),""===n.style.display&&rt(n)&&(u[c]=(s=void 0,o=void 0,void 0,l=void 0,o=(r=n).ownerDocument,a=r.nodeName,(l=at[a])||(s=o.body.appendChild(o.createElement(a)),l=x.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),at[a]=l,l)))):"none"!==i&&(u[c]="none",Q.set(n,"display",i)));for(c=0;c<d;c++)null!=u[c]&&(t[c].style.display=u[c]);return t}x.fn.extend({show:function(){return lt(this,!0)},hide:function(){return lt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?x(this).show():x(this).hide()})}});var ut=/^(?:checkbox|radio)$/i,ct=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,dt=/^$|^module$|\/(?:java|ecma)script/i,ht={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function pt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&D(t,e)?x.merge([t],i):i}function ft(t,e){for(var i=0,n=t.length;i<n;i++)Q.set(t[i],"globalEval",!e||Q.get(e[i],"globalEval"))}ht.optgroup=ht.option,ht.tbody=ht.tfoot=ht.colgroup=ht.caption=ht.thead,ht.th=ht.td;var mt,gt,vt=/<|&#?\w+;/;function yt(t,e,i,n,r){for(var s,o,a,l,u,c,d=e.createDocumentFragment(),h=[],p=0,f=t.length;p<f;p++)if((s=t[p])||0===s)if("object"===w(s))x.merge(h,s.nodeType?[s]:s);else if(vt.test(s)){for(o=o||d.appendChild(e.createElement("div")),a=(ct.exec(s)||["",""])[1].toLowerCase(),l=ht[a]||ht._default,o.innerHTML=l[1]+x.htmlPrefilter(s)+l[2],c=l[0];c--;)o=o.lastChild;x.merge(h,o.childNodes),(o=d.firstChild).textContent=""}else h.push(e.createTextNode(s));for(d.textContent="",p=0;s=h[p++];)if(n&&x.inArray(s,n)>-1)r&&r.push(s);else if(u=x.contains(s.ownerDocument,s),o=pt(d.appendChild(s),"script"),u&&ft(o),i)for(c=0;s=o[c++];)dt.test(s.type||"")&&i.push(s);return d}mt=n.createDocumentFragment().appendChild(n.createElement("div")),(gt=n.createElement("input")).setAttribute("type","radio"),gt.setAttribute("checked","checked"),gt.setAttribute("name","t"),mt.appendChild(gt),f.checkClone=mt.cloneNode(!0).cloneNode(!0).lastChild.checked,mt.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!mt.cloneNode(!0).lastChild.defaultValue;var wt=n.documentElement,bt=/^key/,xt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,_t=/^([^.]*)(?:\.(.+)|)/;function Et(){return!0}function Tt(){return!1}function Ct(){try{return n.activeElement}catch(t){}}function St(t,e,i,n,r,s){var o,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)St(t,a,i,n,e[a],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),!1===r)r=Tt;else if(!r)return t;return 1===s&&(o=r,(r=function(t){return x().off(t),o.apply(this,arguments)}).guid=o.guid||(o.guid=x.guid++)),t.each(function(){x.event.add(this,e,r,n,i)})}x.event={global:{},add:function(t,e,i,n,r){var s,o,a,l,u,c,d,h,p,f,m,g=Q.get(t);if(g)for(i.handler&&(i=(s=i).handler,r=s.selector),r&&x.find.matchesSelector(wt,r),i.guid||(i.guid=x.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(e){return void 0!==x&&x.event.triggered!==e.type?x.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(N)||[""]).length;u--;)p=m=(a=_t.exec(e[u])||[])[1],f=(a[2]||"").split(".").sort(),p&&(d=x.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=x.event.special[p]||{},c=x.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&x.expr.match.needsContext.test(r),namespace:f.join(".")},s),(h=l[p])||((h=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,f,o)||t.addEventListener&&t.addEventListener(p,o)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),x.event.global[p]=!0)},remove:function(t,e,i,n,r){var s,o,a,l,u,c,d,h,p,f,m,g=Q.hasData(t)&&Q.get(t);if(g&&(l=g.events)){for(u=(e=(e||"").match(N)||[""]).length;u--;)if(p=m=(a=_t.exec(e[u])||[])[1],f=(a[2]||"").split(".").sort(),p){for(d=x.event.special[p]||{},h=l[p=(n?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=h.length;s--;)c=h[s],!r&&m!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(h.splice(s,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(t,c));o&&!h.length&&(d.teardown&&!1!==d.teardown.call(t,f,g.handle)||x.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)x.event.remove(t,p+e[u],i,n,!0);x.isEmptyObject(l)&&Q.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,o,a=x.event.fix(t),l=new Array(arguments.length),u=(Q.get(this,"events")||{})[a.type]||[],c=x.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(o=x.event.handlers.call(this,a,u),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(n=((x.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,r,s,o,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(s=[],o={},i=0;i<l;i++)void 0===o[r=(n=e[i]).selector+" "]&&(o[r]=n.needsContext?x(r,this).index(u)>-1:x.find(r,this,null,[u]).length),o[r]&&s.push(n);s.length&&a.push({elem:u,handlers:s})}return u=this,l<e.length&&a.push({elem:u,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(x.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[x.expando]?t:new x.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ct()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ct()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&D(this,"input"))return this.click(),!1},_default:function(t){return D(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},x.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},x.Event=function(t,e){if(!(this instanceof x.Event))return new x.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Et:Tt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&x.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Tt,isPropagationStopped:Tt,isImmediatePropagationStopped:Tt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Et,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Et,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Et,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&bt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&xt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},x.event.addProp),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){x.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,r=t.handleObj;return n&&(n===this||x.contains(this,n))||(t.type=r.origType,i=r.handler.apply(this,arguments),t.type=e),i}}}),x.fn.extend({on:function(t,e,i,n){return St(this,t,e,i,n)},one:function(t,e,i,n){return St(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,x(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Tt),this.each(function(){x.event.remove(this,t,i,e)})}});var It=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Dt=/<script|<style|<link/i,kt=/checked\s*(?:[^=]|=\s*.checked.)/i,At=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Lt(t,e){return D(t,"table")&&D(11!==e.nodeType?e:e.firstChild,"tr")&&x(t).children("tbody")[0]||t}function Ot(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Mt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Pt(t,e){var i,n,r,s,o,a,l,u;if(1===e.nodeType){if(Q.hasData(t)&&(s=Q.access(t),o=Q.set(e,s),u=s.events))for(r in delete o.handle,o.events={},u)for(i=0,n=u[r].length;i<n;i++)x.event.add(e,r,u[r][i]);K.hasData(t)&&(a=K.access(t),l=x.extend({},a),K.set(e,l))}}function zt(t,e,i,n){e=o.apply([],e);var r,s,a,l,u,c,d=0,h=t.length,p=h-1,g=e[0],v=m(g);if(v||h>1&&"string"==typeof g&&!f.checkClone&&kt.test(g))return t.each(function(r){var s=t.eq(r);v&&(e[0]=g.call(this,r,s.html())),zt(s,e,i,n)});if(h&&(s=(r=yt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===r.childNodes.length&&(r=s),s||n)){for(l=(a=x.map(pt(r,"script"),Ot)).length;d<h;d++)u=r,d!==p&&(u=x.clone(u,!0,!0),l&&x.merge(a,pt(u,"script"))),i.call(t[d],u,d);if(l)for(c=a[a.length-1].ownerDocument,x.map(a,Mt),d=0;d<l;d++)u=a[d],dt.test(u.type||"")&&!Q.access(u,"globalEval")&&x.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?x._evalUrl&&x._evalUrl(u.src):y(u.textContent.replace(At,""),c,u))}return t}function Nt(t,e,i){for(var n,r=e?x.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||x.cleanData(pt(n)),n.parentNode&&(i&&x.contains(n.ownerDocument,n)&&ft(pt(n,"script")),n.parentNode.removeChild(n));return t}x.extend({htmlPrefilter:function(t){return t.replace(It,"<$1></$2>")},clone:function(t,e,i){var n,r,s,o,a,l,u,c=t.cloneNode(!0),d=x.contains(t.ownerDocument,t);if(!(f.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||x.isXMLDoc(t)))for(o=pt(c),n=0,r=(s=pt(t)).length;n<r;n++)a=s[n],l=o[n],void 0,"input"===(u=l.nodeName.toLowerCase())&&ut.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(e)if(i)for(s=s||pt(t),o=o||pt(c),n=0,r=s.length;n<r;n++)Pt(s[n],o[n]);else Pt(t,c);return(o=pt(c,"script")).length>0&&ft(o,!d&&pt(t,"script")),c},cleanData:function(t){for(var e,i,n,r=x.event.special,s=0;void 0!==(i=t[s]);s++)if(U(i)){if(e=i[Q.expando]){if(e.events)for(n in e.events)r[n]?x.event.remove(i,n):x.removeEvent(i,n,e.handle);i[Q.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),x.fn.extend({detach:function(t){return Nt(this,t,!0)},remove:function(t){return Nt(this,t)},text:function(t){return B(this,function(t){return void 0===t?x.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return zt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Lt(this,t).appendChild(t)})},prepend:function(){return zt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Lt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return zt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return zt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(x.cleanData(pt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return x.clone(this,t,e)})},html:function(t){return B(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Dt.test(t)&&!ht[(ct.exec(t)||["",""])[1].toLowerCase()]){t=x.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(x.cleanData(pt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return zt(this,arguments,function(e){var i=this.parentNode;x.inArray(this,t)<0&&(x.cleanData(pt(this)),i&&i.replaceChild(e,this))},t)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){x.fn[t]=function(t){for(var i,n=[],r=x(t),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),x(r[o])[e](i),a.apply(n,i.get());return this.pushStack(n)}});var $t=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),jt=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)},Ht=new RegExp(nt.join("|"),"i");function Rt(t,e,i){var n,r,s,o,a=t.style;return(i=i||jt(t))&&(""!==(o=i.getPropertyValue(e)||i[e])||x.contains(t.ownerDocument,t)||(o=x.style(t,e)),!f.pixelBoxStyles()&&$t.test(o)&&Ht.test(e)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function Wt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",wt.appendChild(u).appendChild(c);var e=t.getComputedStyle(c);r="1%"!==e.top,l=12===i(e.marginLeft),c.style.right="60%",a=36===i(e.right),s=36===i(e.width),c.style.position="absolute",o=36===c.offsetWidth||"absolute",wt.removeChild(u),c=null}}function i(t){return Math.round(parseFloat(t))}var r,s,o,a,l,u=n.createElement("div"),c=n.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===c.style.backgroundClip,x.extend(f,{boxSizingReliable:function(){return e(),s},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o}}))}();var qt=/^(none|table(?!-c[ea]).+)/,Bt=/^--/,Ft={position:"absolute",visibility:"hidden",display:"block"},Vt={letterSpacing:"0",fontWeight:"400"},Yt=["Webkit","Moz","ms"],Gt=n.createElement("div").style;function Ut(t){var e=x.cssProps[t];return e||(e=x.cssProps[t]=function(t){if(t in Gt)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=Yt.length;i--;)if((t=Yt[i]+e)in Gt)return t}(t)||t),e}function Xt(t,e,i){var n=it.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function Qt(t,e,i,n,r,s){var o="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;o<4;o+=2)"margin"===i&&(l+=x.css(t,i+nt[o],!0,r)),n?("content"===i&&(l-=x.css(t,"padding"+nt[o],!0,r)),"margin"!==i&&(l-=x.css(t,"border"+nt[o]+"Width",!0,r))):(l+=x.css(t,"padding"+nt[o],!0,r),"padding"!==i?l+=x.css(t,"border"+nt[o]+"Width",!0,r):a+=x.css(t,"border"+nt[o]+"Width",!0,r));return!n&&s>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))),l}function Kt(t,e,i){var n=jt(t),r=Rt(t,e,n),s="border-box"===x.css(t,"boxSizing",!1,n),o=s;if($t.test(r)){if(!i)return r;r="auto"}return o=o&&(f.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===x.css(t,"display",!1,n))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],o=!0),(r=parseFloat(r)||0)+Qt(t,e,i||(s?"border":"content"),o,n,r)+"px"}function Zt(t,e,i,n,r){return new Zt.prototype.init(t,e,i,n,r)}x.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Rt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=G(e),l=Bt.test(e),u=t.style;if(l||(e=Ut(a)),o=x.cssHooks[e]||x.cssHooks[a],void 0===i)return o&&"get"in o&&void 0!==(r=o.get(t,!1,n))?r:u[e];"string"===(s=typeof i)&&(r=it.exec(i))&&r[1]&&(i=ot(t,e,r),s="number"),null!=i&&i==i&&("number"===s&&(i+=r&&r[3]||(x.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==i||0!==e.indexOf("background")||(u[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l?u.setProperty(e,i):u[e]=i))}},css:function(t,e,i,n){var r,s,o,a=G(e);return Bt.test(e)||(e=Ut(a)),(o=x.cssHooks[e]||x.cssHooks[a])&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=Rt(t,e,n)),"normal"===r&&e in Vt&&(r=Vt[e]),""===i||i?(s=parseFloat(r),!0===i||isFinite(s)?s||0:r):r}}),x.each(["height","width"],function(t,e){x.cssHooks[e]={get:function(t,i,n){if(i)return!qt.test(x.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Kt(t,e,n):st(t,Ft,function(){return Kt(t,e,n)})},set:function(t,i,n){var r,s=jt(t),o="border-box"===x.css(t,"boxSizing",!1,s),a=n&&Qt(t,e,n,o,s);return o&&f.scrollboxSize()===s.position&&(a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(s[e])-Qt(t,e,"border",!1,s)-.5)),a&&(r=it.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=x.css(t,e)),Xt(0,i,a)}}}),x.cssHooks.marginLeft=Wt(f.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Rt(t,"marginLeft"))||t.getBoundingClientRect().left-st(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),x.each({margin:"",padding:"",border:"Width"},function(t,e){x.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+nt[n]+e]=s[n]||s[n-2]||s[0];return r}},"margin"!==t&&(x.cssHooks[t+e].set=Xt)}),x.fn.extend({css:function(t,e){return B(this,function(t,e,i){var n,r,s={},o=0;if(Array.isArray(e)){for(n=jt(t),r=e.length;o<r;o++)s[e[o]]=x.css(t,e[o],!1,n);return s}return void 0!==i?x.style(t,e,i):x.css(t,e)},t,e,arguments.length>1)}}),x.Tween=Zt,(Zt.prototype={constructor:Zt,init:function(t,e,i,n,r,s){this.elem=t,this.prop=i,this.easing=r||x.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(x.cssNumber[i]?"":"px")},cur:function(){var t=Zt.propHooks[this.prop];return t&&t.get?t.get(this):Zt.propHooks._default.get(this)},run:function(t){var e,i=Zt.propHooks[this.prop];return this.options.duration?this.pos=e=x.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):Zt.propHooks._default.set(this),this}}).init.prototype=Zt.prototype,(Zt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=x.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){x.fx.step[t.prop]?x.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[x.cssProps[t.prop]]&&!x.cssHooks[t.prop]?t.elem[t.prop]=t.now:x.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=Zt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},x.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},x.fx=Zt.prototype.init,x.fx.step={};var Jt,te,ee,ie,ne=/^(?:toggle|show|hide)$/,re=/queueHooks$/;function se(){te&&(!1===n.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(se):t.setTimeout(se,x.fx.interval),x.fx.tick())}function oe(){return t.setTimeout(function(){Jt=void 0}),Jt=Date.now()}function ae(t,e){var i,n=0,r={height:t};for(e=e?1:0;n<4;n+=2-e)r["margin"+(i=nt[n])]=r["padding"+i]=t;return e&&(r.opacity=r.width=t),r}function le(t,e,i){for(var n,r=(ue.tweeners[e]||[]).concat(ue.tweeners["*"]),s=0,o=r.length;s<o;s++)if(n=r[s].call(i,e,t))return n}function ue(t,e,i){var n,r,s=0,o=ue.prefilters.length,a=x.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=Jt||oe(),i=Math.max(0,u.startTime+u.duration-e),n=1-(i/u.duration||0),s=0,o=u.tweens.length;s<o;s++)u.tweens[s].run(n);return a.notifyWith(t,[u,n,i]),n<1&&o?i:(o||a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:x.extend({},e),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},i),originalProperties:e,originalOptions:i,startTime:Jt||oe(),duration:i.duration,tweens:[],createTween:function(e,i){var n=x.Tween(t,u.opts,e,i,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var i=0,n=e?u.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)u.tweens[i].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),c=u.props;for(!function(t,e){var i,n,r,s,o;for(i in t)if(r=e[n=G(i)],s=t[i],Array.isArray(s)&&(r=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),(o=x.cssHooks[n])&&"expand"in o)for(i in s=o.expand(s),delete t[n],s)i in t||(t[i]=s[i],e[i]=r);else e[n]=r}(c,u.opts.specialEasing);s<o;s++)if(n=ue.prefilters[s].call(u,t,c,u.opts))return m(n.stop)&&(x._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return x.map(c,le,u),m(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),x.fx.timer(x.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}x.Animation=x.extend(ue,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ot(i.elem,t,it.exec(e),i),i}]},tweener:function(t,e){m(t)?(e=t,t=["*"]):t=t.match(N);for(var i,n=0,r=t.length;n<r;n++)i=t[n],ue.tweeners[i]=ue.tweeners[i]||[],ue.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,r,s,o,a,l,u,c,d="width"in e||"height"in e,h=this,p={},f=t.style,m=t.nodeType&&rt(t),g=Q.get(t,"fxshow");for(n in i.queue||(null==(o=x._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,h.always(function(){h.always(function(){o.unqueued--,x.queue(t,"fx").length||o.empty.fire()})})),e)if(r=e[n],ne.test(r)){if(delete e[n],s=s||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[n])continue;m=!0}p[n]=g&&g[n]||x.style(t,n)}if((l=!x.isEmptyObject(e))||!x.isEmptyObject(p))for(n in d&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=Q.get(t,"display")),"none"===(c=x.css(t,"display"))&&(u?c=u:(lt([t],!0),u=t.style.display||u,c=x.css(t,"display"),lt([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===x.css(t,"float")&&(l||(h.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=Q.access(t,"fxshow",{display:u}),s&&(g.hidden=!m),m&&lt([t],!0),h.done(function(){for(n in m||lt([t]),Q.remove(t,"fxshow"),p)x.style(t,n,p[n])})),l=le(m?g[n]:0,n,h),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ue.prefilters.unshift(t):ue.prefilters.push(t)}}),x.speed=function(t,e,i){var n=t&&"object"==typeof t?x.extend({},t):{complete:i||!i&&e||m(t)&&t,duration:t,easing:i&&e||e&&!m(e)&&e};return x.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in x.fx.speeds?n.duration=x.fx.speeds[n.duration]:n.duration=x.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){m(n.old)&&n.old.call(this),n.queue&&x.dequeue(this,n.queue)},n},x.fn.extend({fadeTo:function(t,e,i,n){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var r=x.isEmptyObject(t),s=x.speed(e,i,n),o=function(){var e=ue(this,x.extend({},t),s);(r||Q.get(this,"finish"))&&e.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",s=x.timers,o=Q.get(this);if(r)o[r]&&o[r].stop&&n(o[r]);else for(r in o)o[r]&&o[r].stop&&re.test(r)&&n(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=t&&s[r].queue!==t||(s[r].anim.stop(i),e=!1,s.splice(r,1));!e&&i||x.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,i=Q.get(this),n=i[t+"queue"],r=i[t+"queueHooks"],s=x.timers,o=n?n.length:0;for(i.finish=!0,x.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),x.each(["toggle","show","hide"],function(t,e){var i=x.fn[e];x.fn[e]=function(t,n,r){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(ae(e,!0),t,n,r)}}),x.each({slideDown:ae("show"),slideUp:ae("hide"),slideToggle:ae("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){x.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),x.timers=[],x.fx.tick=function(){var t,e=0,i=x.timers;for(Jt=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||x.fx.stop(),Jt=void 0},x.fx.timer=function(t){x.timers.push(t),x.fx.start()},x.fx.interval=13,x.fx.start=function(){te||(te=!0,se())},x.fx.stop=function(){te=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,i){return e=x.fx&&x.fx.speeds[e]||e,i=i||"fx",this.queue(i,function(i,n){var r=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(r)}})},ee=n.createElement("input"),ie=n.createElement("select").appendChild(n.createElement("option")),ee.type="checkbox",f.checkOn=""!==ee.value,f.optSelected=ie.selected,(ee=n.createElement("input")).value="t",ee.type="radio",f.radioValue="t"===ee.value;var ce,de=x.expr.attrHandle;x.fn.extend({attr:function(t,e){return B(this,x.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){x.removeAttr(this,t)})}}),x.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?x.prop(t,e,i):(1===s&&x.isXMLDoc(t)||(r=x.attrHooks[e.toLowerCase()]||(x.expr.match.bool.test(e)?ce:void 0)),void 0!==i?null===i?void x.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:null==(n=x.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!f.radioValue&&"radio"===e&&D(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match(N);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),ce={set:function(t,e,i){return!1===e?x.removeAttr(t,i):t.setAttribute(i,i),i}},x.each(x.expr.match.bool.source.match(/\w+/g),function(t,e){var i=de[e]||x.find.attr;de[e]=function(t,e,n){var r,s,o=e.toLowerCase();return n||(s=de[o],de[o]=r,r=null!=i(t,e,n)?o:null,de[o]=s),r}});var he=/^(?:input|select|textarea|button)$/i,pe=/^(?:a|area)$/i;function fe(t){return(t.match(N)||[]).join(" ")}function me(t){return t.getAttribute&&t.getAttribute("class")||""}function ge(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(N)||[]}x.fn.extend({prop:function(t,e){return B(this,x.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[x.propFix[t]||t]})}}),x.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&x.isXMLDoc(t)||(e=x.propFix[e]||e,r=x.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=x.find.attr(t,"tabindex");return e?parseInt(e,10):he.test(t.nodeName)||pe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(x.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.fn.extend({addClass:function(t){var e,i,n,r,s,o,a,l=0;if(m(t))return this.each(function(e){x(this).addClass(t.call(this,e,me(this)))});if((e=ge(t)).length)for(;i=this[l++];)if(r=me(i),n=1===i.nodeType&&" "+fe(r)+" "){for(o=0;s=e[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");r!==(a=fe(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,r,s,o,a,l=0;if(m(t))return this.each(function(e){x(this).removeClass(t.call(this,e,me(this)))});if(!arguments.length)return this.attr("class","");if((e=ge(t)).length)for(;i=this[l++];)if(r=me(i),n=1===i.nodeType&&" "+fe(r)+" "){for(o=0;s=e[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");r!==(a=fe(n))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t,n="string"===i||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):m(t)?this.each(function(i){x(this).toggleClass(t.call(this,i,me(this),e),e)}):this.each(function(){var e,r,s,o;if(n)for(r=0,s=x(this),o=ge(t);e=o[r++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else void 0!==t&&"boolean"!==i||((e=me(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Q.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+fe(me(i))+" ").indexOf(e)>-1)return!0;return!1}});var ve=/\r/g;x.fn.extend({val:function(t){var e,i,n,r=this[0];return arguments.length?(n=m(t),this.each(function(i){var r;1===this.nodeType&&(null==(r=n?t.call(this,i,x(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=x.map(r,function(t){return null==t?"":t+""})),(e=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=x.valHooks[r.type]||x.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:"string"==typeof(i=r.value)?i.replace(ve,""):null==i?"":i:void 0}}),x.extend({valHooks:{option:{get:function(t){var e=x.find.attr(t,"value");return null!=e?e:fe(x.text(t))}},select:{get:function(t){var e,i,n,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(n=s<0?l:o?s:0;n<l;n++)if(((i=r[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!D(i.parentNode,"optgroup"))){if(e=x(i).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var i,n,r=t.options,s=x.makeArray(e),o=r.length;o--;)((n=r[o]).selected=x.inArray(x.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=x.inArray(x(t).val(),e)>-1}},f.checkOn||(x.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),f.focusin="onfocusin"in t;var ye=/^(?:focusinfocus|focusoutblur)$/,we=function(t){t.stopPropagation()};x.extend(x.event,{trigger:function(e,i,r,s){var o,a,l,u,c,h,p,f,v=[r||n],y=d.call(e,"type")?e.type:e,w=d.call(e,"namespace")?e.namespace.split("."):[];if(a=f=l=r=r||n,3!==r.nodeType&&8!==r.nodeType&&!ye.test(y+x.event.triggered)&&(y.indexOf(".")>-1&&(y=(w=y.split(".")).shift(),w.sort()),c=y.indexOf(":")<0&&"on"+y,(e=e[x.expando]?e:new x.Event(y,"object"==typeof e&&e)).isTrigger=s?2:3,e.namespace=w.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+w.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),i=null==i?[e]:x.makeArray(i,[e]),p=x.event.special[y]||{},s||!p.trigger||!1!==p.trigger.apply(r,i))){if(!s&&!p.noBubble&&!g(r)){for(u=p.delegateType||y,ye.test(u+y)||(a=a.parentNode);a;a=a.parentNode)v.push(a),l=a;l===(r.ownerDocument||n)&&v.push(l.defaultView||l.parentWindow||t)}for(o=0;(a=v[o++])&&!e.isPropagationStopped();)f=a,e.type=o>1?u:p.bindType||y,(h=(Q.get(a,"events")||{})[e.type]&&Q.get(a,"handle"))&&h.apply(a,i),(h=c&&a[c])&&h.apply&&U(a)&&(e.result=h.apply(a,i),!1===e.result&&e.preventDefault());return e.type=y,s||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(v.pop(),i)||!U(r)||c&&m(r[y])&&!g(r)&&((l=r[c])&&(r[c]=null),x.event.triggered=y,e.isPropagationStopped()&&f.addEventListener(y,we),r[y](),e.isPropagationStopped()&&f.removeEventListener(y,we),x.event.triggered=void 0,l&&(r[c]=l)),e.result}},simulate:function(t,e,i){var n=x.extend(new x.Event,i,{type:t,isSimulated:!0});x.event.trigger(n,null,e)}}),x.fn.extend({trigger:function(t,e){return this.each(function(){x.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return x.event.trigger(t,e,i,!0)}}),f.focusin||x.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){x.event.simulate(e,t.target,x.event.fix(t))};x.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=Q.access(n,e);r||n.addEventListener(t,i,!0),Q.access(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=Q.access(n,e)-1;r?Q.access(n,e,r):(n.removeEventListener(t,i,!0),Q.remove(n,e))}}});var be=t.location,xe=Date.now(),_e=/\?/;x.parseXML=function(e){var i;if(!e||"string"!=typeof e)return null;try{i=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+e),i};var Ee=/\[\]$/,Te=/\r?\n/g,Ce=/^(?:submit|button|image|reset|file)$/i,Se=/^(?:input|select|textarea|keygen)/i;function Ie(t,e,i,n){var r;if(Array.isArray(e))x.each(e,function(e,r){i||Ee.test(t)?n(t,r):Ie(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==w(e))n(t,e);else for(r in e)Ie(t+"["+r+"]",e[r],i,n)}x.param=function(t,e){var i,n=[],r=function(t,e){var i=m(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(t)||t.jquery&&!x.isPlainObject(t))x.each(t,function(){r(this.name,this.value)});else for(i in t)Ie(i,t[i],e,r);return n.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=x.prop(this,"elements");return t?x.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!x(this).is(":disabled")&&Se.test(this.nodeName)&&!Ce.test(t)&&(this.checked||!ut.test(t))}).map(function(t,e){var i=x(this).val();return null==i?null:Array.isArray(i)?x.map(i,function(t){return{name:e.name,value:t.replace(Te,"\r\n")}}):{name:e.name,value:i.replace(Te,"\r\n")}}).get()}});var De=/%20/g,ke=/#.*$/,Ae=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,Oe=/^(?:GET|HEAD)$/,Me=/^\/\//,Pe={},ze={},Ne="*/".concat("*"),$e=n.createElement("a");function je(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,r=0,s=e.toLowerCase().match(N)||[];if(m(i))for(;n=s[r++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function He(t,e,i,n){var r={},s=t===ze;function o(a){var l;return r[a]=!0,x.each(t[a]||[],function(t,a){var u=a(e,i,n);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),o(u),!1)}),l}return o(e.dataTypes[0])||!r["*"]&&o("*")}function Re(t,e){var i,n,r=x.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((r[i]?t:n||(n={}))[i]=e[i]);return n&&x.extend(!0,t,n),t}$e.href=be.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:be.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(be.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ne,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Re(Re(t,x.ajaxSettings),e):Re(x.ajaxSettings,t)},ajaxPrefilter:je(Pe),ajaxTransport:je(ze),ajax:function(e,i){"object"==typeof e&&(i=e,e=void 0),i=i||{};var r,s,o,a,l,u,c,d,h,p,f=x.ajaxSetup({},i),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?x(m):x.event,v=x.Deferred(),y=x.Callbacks("once memory"),w=f.statusCode||{},b={},_={},E="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a)for(a={};e=Le.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=_[t.toLowerCase()]=_[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==c&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)T.always(t[T.status]);else for(e in t)w[e]=[w[e],t[e]];return this},abort:function(t){var e=t||E;return r&&r.abort(e),C(0,e),this}};if(v.promise(T),f.url=((e||f.url||be.href)+"").replace(Me,be.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(N)||[""],null==f.crossDomain){u=n.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=$e.protocol+"//"+$e.host!=u.protocol+"//"+u.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=x.param(f.data,f.traditional)),He(Pe,f,i,T),c)return T;for(h in(d=x.event&&f.global)&&0==x.active++&&x.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Oe.test(f.type),s=f.url.replace(ke,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(De,"+")):(p=f.url.slice(s.length),f.data&&(f.processData||"string"==typeof f.data)&&(s+=(_e.test(s)?"&":"?")+f.data,delete f.data),!1===f.cache&&(s=s.replace(Ae,"$1"),p=(_e.test(s)?"&":"?")+"_="+xe+++p),f.url=s+p),f.ifModified&&(x.lastModified[s]&&T.setRequestHeader("If-Modified-Since",x.lastModified[s]),x.etag[s]&&T.setRequestHeader("If-None-Match",x.etag[s])),(f.data&&f.hasContent&&!1!==f.contentType||i.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ne+"; q=0.01":""):f.accepts["*"]),f.headers)T.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||c))return T.abort();if(E="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),r=He(ze,f,i,T)){if(T.readyState=1,d&&g.trigger("ajaxSend",[T,f]),c)return T;f.async&&f.timeout>0&&(l=t.setTimeout(function(){T.abort("timeout")},f.timeout));try{c=!1,r.send(b,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(e,i,n,a){var u,h,p,b,_,E=i;c||(c=!0,l&&t.clearTimeout(l),r=void 0,o=a||"",T.readyState=e>0?4:0,u=e>=200&&e<300||304===e,n&&(b=function(t,e,i){for(var n,r,s,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)s=l[0];else{for(r in i){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),i[s]}(f,T,n)),b=function(t,e,i,n){var r,s,o,a,l,u={},c=t.dataTypes.slice();if(c[1])for(o in t.converters)u[o.toLowerCase()]=t.converters[o];for(s=c.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=u[l+" "+s]||u["* "+s]))for(r in u)if((a=r.split(" "))[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){!0===o?o=u[r]:!0!==u[r]&&(s=a[0],c.unshift(a[1]));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(f,b,T,u),u?(f.ifModified&&((_=T.getResponseHeader("Last-Modified"))&&(x.lastModified[s]=_),(_=T.getResponseHeader("etag"))&&(x.etag[s]=_)),204===e||"HEAD"===f.type?E="nocontent":304===e?E="notmodified":(E=b.state,h=b.data,u=!(p=b.error))):(p=E,!e&&E||(E="error",e<0&&(e=0))),T.status=e,T.statusText=(i||E)+"",u?v.resolveWith(m,[h,E,T]):v.rejectWith(m,[T,E,p]),T.statusCode(w),w=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[T,f,u?h:p]),y.fireWith(m,[T,E]),d&&(g.trigger("ajaxComplete",[T,f]),--x.active||x.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,i){return x.get(t,e,i,"json")},getScript:function(t,e){return x.get(t,void 0,e,"script")}}),x.each(["get","post"],function(t,e){x[e]=function(t,i,n,r){return m(i)&&(r=r||n,n=i,i=void 0),x.ajax(x.extend({url:t,type:e,dataType:r,data:i,success:n},x.isPlainObject(t)&&t))}}),x._evalUrl=function(t){return x.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},x.fn.extend({wrapAll:function(t){var e;return this[0]&&(m(t)&&(t=t.call(this[0])),e=x(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return m(t)?this.each(function(e){x(this).wrapInner(t.call(this,e))}):this.each(function(){var e=x(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=m(t);return this.each(function(i){x(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){x(this).replaceWith(this.childNodes)}),this}}),x.expr.pseudos.hidden=function(t){return!x.expr.pseudos.visible(t)},x.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var We={0:200,1223:204},qe=x.ajaxSettings.xhr();f.cors=!!qe&&"withCredentials"in qe,f.ajax=qe=!!qe,x.ajaxTransport(function(e){var i,n;if(f.cors||qe&&!e.crossDomain)return{send:function(r,s){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];for(o in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(o,r[o]);i=function(t){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(We[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=a.ontimeout=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){i&&n()})},i=i("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(i)throw t}},abort:function(){i&&i()}}}),x.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return x.globalEval(t),t}}}),x.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),x.ajaxTransport("script",function(t){var e,i;if(t.crossDomain)return{send:function(r,s){e=x("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),n.head.appendChild(e[0])},abort:function(){i&&i()}}});var Be,Fe=[],Ve=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Fe.pop()||x.expando+"_"+xe++;return this[t]=!0,t}}),x.ajaxPrefilter("json jsonp",function(e,i,n){var r,s,o,a=!1!==e.jsonp&&(Ve.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ve,"$1"+r):!1!==e.jsonp&&(e.url+=(_e.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||x.error(r+" was not called"),o[0]},e.dataTypes[0]="json",s=t[r],t[r]=function(){o=arguments},n.always(function(){void 0===s?x(t).removeProp(r):t[r]=s,e[r]&&(e.jsonpCallback=i.jsonpCallback,Fe.push(r)),o&&m(s)&&s(o[0]),o=s=void 0}),"script"}),f.createHTMLDocument=((Be=n.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Be.childNodes.length),x.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(f.createHTMLDocument?((r=(e=n.implementation.createHTMLDocument("")).createElement("base")).href=n.location.href,e.head.appendChild(r)):e=n),o=!i&&[],(s=k.exec(t))?[e.createElement(s[1])]:(s=yt([t],e,o),o&&o.length&&x(o).remove(),x.merge([],s.childNodes)));var r,s,o},x.fn.load=function(t,e,i){var n,r,s,o=this,a=t.indexOf(" ");return a>-1&&(n=fe(t.slice(a)),t=t.slice(0,a)),m(e)?(i=e,e=void 0):e&&"object"==typeof e&&(r="POST"),o.length>0&&x.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){s=arguments,o.html(n?x("<div>").append(x.parseHTML(t)).find(n):t)}).always(i&&function(t,e){o.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){x.fn[e]=function(t){return this.on(e,t)}}),x.expr.pseudos.animated=function(t){return x.grep(x.timers,function(e){return t===e.elem}).length},x.offset={setOffset:function(t,e,i){var n,r,s,o,a,l,u=x.css(t,"position"),c=x(t),d={};"static"===u&&(t.style.position="relative"),a=c.offset(),s=x.css(t,"top"),l=x.css(t,"left"),("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1?(o=(n=c.position()).top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),m(e)&&(e=e.call(t,i,x.extend({},a))),null!=e.top&&(d.top=e.top-a.top+o),null!=e.left&&(d.left=e.left-a.left+r),"using"in e?e.using.call(t,d):c.css(d)}},x.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){x.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],r={top:0,left:0};if("fixed"===x.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===x.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((r=x(t).offset()).top+=x.css(t,"borderTopWidth",!0),r.left+=x.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-x.css(n,"marginTop",!0),left:e.left-r.left-x.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===x.css(t,"position");)t=t.offsetParent;return t||wt})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;x.fn[t]=function(n){return B(this,function(t,n,r){var s;if(g(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===r)return s?s[e]:t[n];s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r},t,n,arguments.length)}}),x.each(["top","left"],function(t,e){x.cssHooks[e]=Wt(f.pixelPosition,function(t,i){if(i)return i=Rt(t,e),$t.test(i)?x(t).position()[e]+"px":i})}),x.each({Height:"height",Width:"width"},function(t,e){x.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){x.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(!0===r||!0===s?"margin":"border");return B(this,function(e,i,r){var s;return g(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?x.css(e,i,a):x.style(e,i,r,a)},e,o?r:void 0,o)}})}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){x.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),x.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),x.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),x.proxy=function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),m(t))return n=s.call(arguments,2),(r=function(){return t.apply(e||this,n.concat(s.call(arguments)))}).guid=t.guid=t.guid||x.guid++,r},x.holdReady=function(t){t?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=D,x.isFunction=m,x.isWindow=g,x.camelCase=G,x.type=w,x.now=Date.now,x.isNumeric=function(t){var e=x.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return x});var Ye=t.jQuery,Ge=t.$;return x.noConflict=function(e){return t.$===x&&(t.$=Ge),e&&t.jQuery===x&&(t.jQuery=Ye),x},e||(t.jQuery=t.$=x),x}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery")):"function"==typeof define&&define.amd?define(["exports","jquery"],e):e(t.bootstrap={},t.jQuery)}(this,function(t,e){"use strict";function i(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function n(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}).apply(this,arguments)}for(var s,o,a,l,u,c,d,h,p,f,m,g,v,y,w,b,x,_=function(t){var e=!1;var i={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(e){var i,n=e.getAttribute("data-target");n&&"#"!==n||(n=e.getAttribute("href")||""),"#"===n.charAt(0)&&(i=n,n=i="function"==typeof t.escapeSelector?t.escapeSelector(i).substr(1):i.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1"));try{return t(document).find(n).length>0?n:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(i){t(i).trigger(e.end)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var s=n[r],o=e[r],a=o&&i.isElement(o)?"element":(l=o,{}.toString.call(l).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(s).test(a))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+s+'".')}var l}};return e=("undefined"==typeof window||!window.QUnit)&&{end:"transitionend"},t.fn.emulateTransitionEnd=function(e){var n=this,r=!1;return t(this).one(i.TRANSITION_END,function(){r=!0}),setTimeout(function(){r||i.triggerTransitionEnd(n)},e),this},i.supportsTransitionEnd()&&(t.event.special[i.TRANSITION_END]={bindType:e.end,delegateType:e.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}),i}(e=e&&e.hasOwnProperty("default")?e.default:e),E=(o="alert",l="."+(a="bs.alert"),u=(s=e).fn[o],c={CLOSE:"close"+l,CLOSED:"closed"+l,CLICK_DATA_API:"click"+l+".data-api"},"alert","fade","show",d=function(){function t(t){this._element=t}var e=t.prototype;return e.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},e.dispose=function(){s.removeData(this._element,a),this._element=null},e._getRootElement=function(t){var e=_.getSelectorFromElement(t),i=!1;return e&&(i=s(e)[0]),i||(i=s(t).closest(".alert")[0]),i},e._triggerCloseEvent=function(t){var e=s.Event(c.CLOSE);return s(t).trigger(e),e},e._removeElement=function(t){var e=this;s(t).removeClass("show"),_.supportsTransitionEnd()&&s(t).hasClass("fade")?s(t).one(_.TRANSITION_END,function(i){return e._destroyElement(t,i)}).emulateTransitionEnd(150):this._destroyElement(t)},e._destroyElement=function(t){s(t).detach().trigger(c.CLOSED).remove()},t._jQueryInterface=function(e){return this.each(function(){var i=s(this),n=i.data(a);n||(n=new t(this),i.data(a,n)),"close"===e&&n[e](this)})},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},n(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}(),s(document).on(c.CLICK_DATA_API,'[data-dismiss="alert"]',d._handleDismiss(new d)),s.fn[o]=d._jQueryInterface,s.fn[o].Constructor=d,s.fn[o].noConflict=function(){return s.fn[o]=u,d._jQueryInterface},d),T=(p="button",m="."+(f="bs.button"),g=".data-api",v=(h=e).fn[p],y="active","btn","focus",w='[data-toggle^="button"]','[data-toggle="buttons"]',"input",".active",".btn",b={CLICK_DATA_API:"click"+m+g,FOCUS_BLUR_DATA_API:"focus"+m+g+" blur"+m+g},x=function(){function t(t){this._element=t}var e=t.prototype;return e.toggle=function(){var t=!0,e=!0,i=h(this._element).closest('[data-toggle="buttons"]')[0];if(i){var n=h(this._element).find("input")[0];if(n){if("radio"===n.type)if(n.checked&&h(this._element).hasClass(y))t=!1;else{var r=h(i).find(".active")[0];r&&h(r).removeClass(y)}if(t){if(n.hasAttribute("disabled")||i.hasAttribute("disabled")||n.classList.contains("disabled")||i.classList.contains("disabled"))return;n.checked=!h(this._element).hasClass(y),h(n).trigger("change")}n.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!h(this._element).hasClass(y)),t&&h(this._element).toggleClass(y)},e.dispose=function(){h.removeData(this._element,f),this._element=null},t._jQueryInterface=function(e){return this.each(function(){var i=h(this).data(f);i||(i=new t(this),h(this).data(f,i)),"toggle"===e&&i[e]()})},n(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}(),h(document).on(b.CLICK_DATA_API,w,function(t){t.preventDefault();var e=t.target;h(e).hasClass("btn")||(e=h(e).closest(".btn")),x._jQueryInterface.call(h(e),"toggle")}).on(b.FOCUS_BLUR_DATA_API,w,function(t){var e=h(t.target).closest(".btn")[0];h(e).toggleClass("focus",/^focus(in)?$/.test(t.type))}),h.fn[p]=x._jQueryInterface,h.fn[p].Constructor=x,h.fn[p].noConflict=function(){return h.fn[p]=v,x._jQueryInterface},x),C=function(t){var e="carousel",i="bs.carousel",s="."+i,o=t.fn[e],a={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},l={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},u="next",c="prev",d={SLIDE:"slide"+s,SLID:"slid"+s,KEYDOWN:"keydown"+s,MOUSEENTER:"mouseenter"+s,MOUSELEAVE:"mouseleave"+s,TOUCHEND:"touchend"+s,LOAD_DATA_API:"load"+s+".data-api",CLICK_DATA_API:"click"+s+".data-api"},h="active",p={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},f=function(){function o(e,i){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(i),this._element=t(e)[0],this._indicatorsElement=t(this._element).find(p.INDICATORS)[0],this._addEventListeners()}var f=o.prototype;return f.next=function(){this._isSliding||this._slide(u)},f.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},f.prev=function(){this._isSliding||this._slide(c)},f.pause=function(e){e||(this._isPaused=!0),t(this._element).find(p.NEXT_PREV)[0]&&_.supportsTransitionEnd()&&(_.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},f.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},f.to=function(e){var i=this;this._activeElement=t(this._element).find(p.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)t(this._element).one(d.SLID,function(){return i.to(e)});else{if(n===e)return this.pause(),void this.cycle();var r=e>n?u:c;this._slide(r,this._items[e])}},f.dispose=function(){t(this._element).off(s),t.removeData(this._element,i),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},f._getConfig=function(t){return t=r({},a,t),_.typeCheckConfig(e,t,l),t},f._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(d.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(t(this._element).on(d.MOUSEENTER,function(t){return e.pause(t)}).on(d.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&t(this._element).on(d.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},f._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},f._getItemIndex=function(e){return this._items=t.makeArray(t(e).parent().find(p.ITEM)),this._items.indexOf(e)},f._getItemByDirection=function(t,e){var i=t===u,n=t===c,r=this._getItemIndex(e),s=this._items.length-1;if((n&&0===r||i&&r===s)&&!this._config.wrap)return e;var o=(r+(t===c?-1:1))%this._items.length;return-1===o?this._items[this._items.length-1]:this._items[o]},f._triggerSlideEvent=function(e,i){var n=this._getItemIndex(e),r=this._getItemIndex(t(this._element).find(p.ACTIVE_ITEM)[0]),s=t.Event(d.SLIDE,{relatedTarget:e,direction:i,from:r,to:n});return t(this._element).trigger(s),s},f._setActiveIndicatorElement=function(e){if(this._indicatorsElement){t(this._indicatorsElement).find(p.ACTIVE).removeClass(h);var i=this._indicatorsElement.children[this._getItemIndex(e)];i&&t(i).addClass(h)}},f._slide=function(e,i){var n,r,s,o=this,a=t(this._element).find(p.ACTIVE_ITEM)[0],l=this._getItemIndex(a),c=i||a&&this._getItemByDirection(e,a),f=this._getItemIndex(c),m=Boolean(this._interval);if(e===u?(n="carousel-item-left",r="carousel-item-next",s="left"):(n="carousel-item-right",r="carousel-item-prev",s="right"),c&&t(c).hasClass(h))this._isSliding=!1;else if(!this._triggerSlideEvent(c,s).isDefaultPrevented()&&a&&c){this._isSliding=!0,m&&this.pause(),this._setActiveIndicatorElement(c);var g=t.Event(d.SLID,{relatedTarget:c,direction:s,from:l,to:f});_.supportsTransitionEnd()&&t(this._element).hasClass("slide")?(t(c).addClass(r),_.reflow(c),t(a).addClass(n),t(c).addClass(n),t(a).one(_.TRANSITION_END,function(){t(c).removeClass(n+" "+r).addClass(h),t(a).removeClass(h+" "+r+" "+n),o._isSliding=!1,setTimeout(function(){return t(o._element).trigger(g)},0)}).emulateTransitionEnd(600)):(t(a).removeClass(h),t(c).addClass(h),this._isSliding=!1,t(this._element).trigger(g)),m&&this.cycle()}},o._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i),s=r({},a,t(this).data());"object"==typeof e&&(s=r({},s,e));var l="string"==typeof e?e:s.slide;if(n||(n=new o(this,s),t(this).data(i,n)),"number"==typeof e)n.to(e);else if("string"==typeof l){if(void 0===n[l])throw new TypeError('No method named "'+l+'"');n[l]()}else s.interval&&(n.pause(),n.cycle())})},o._dataApiClickHandler=function(e){var n=_.getSelectorFromElement(this);if(n){var s=t(n)[0];if(s&&t(s).hasClass("carousel")){var a=r({},t(s).data(),t(this).data()),l=this.getAttribute("data-slide-to");l&&(a.interval=!1),o._jQueryInterface.call(t(s),a),l&&t(s).data(i).to(l),e.preventDefault()}}},n(o,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return a}}]),o}();return t(document).on(d.CLICK_DATA_API,p.DATA_SLIDE,f._dataApiClickHandler),t(window).on(d.LOAD_DATA_API,function(){t(p.DATA_RIDE).each(function(){var e=t(this);f._jQueryInterface.call(e,e.data())})}),t.fn[e]=f._jQueryInterface,t.fn[e].Constructor=f,t.fn[e].noConflict=function(){return t.fn[e]=o,f._jQueryInterface},f}(e),S=function(t){var e="collapse",i="bs.collapse",s="."+i,o=t.fn[e],a={toggle:!0,parent:""},l={toggle:"boolean",parent:"(string|element)"},u={SHOW:"show"+s,SHOWN:"shown"+s,HIDE:"hide"+s,HIDDEN:"hidden"+s,CLICK_DATA_API:"click"+s+".data-api"},c="show",d="collapse",h="collapsing",p="collapsed",f={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},m=function(){function s(e,i){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(i),this._triggerArray=t.makeArray(t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=t(f.DATA_TOGGLE),r=0;r<n.length;r++){var s=n[r],o=_.getSelectorFromElement(s);null!==o&&t(o).filter(e).length>0&&(this._selector=o,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var o=s.prototype;return o.toggle=function(){t(this._element).hasClass(c)?this.hide():this.show()},o.show=function(){var e,n,r=this;if(!(this._isTransitioning||t(this._element).hasClass(c)||(this._parent&&0===(e=t.makeArray(t(this._parent).find(f.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(e=null),e&&(n=t(e).not(this._selector).data(i))&&n._isTransitioning))){var o=t.Event(u.SHOW);if(t(this._element).trigger(o),!o.isDefaultPrevented()){e&&(s._jQueryInterface.call(t(e).not(this._selector),"hide"),n||t(e).data(i,null));var a=this._getDimension();t(this._element).removeClass(d).addClass(h),this._element.style[a]=0,this._triggerArray.length>0&&t(this._triggerArray).removeClass(p).attr("aria-expanded",!0),this.setTransitioning(!0);var l=function(){t(r._element).removeClass(h).addClass(d).addClass(c),r._element.style[a]="",r.setTransitioning(!1),t(r._element).trigger(u.SHOWN)};if(_.supportsTransitionEnd()){var m="scroll"+(a[0].toUpperCase()+a.slice(1));t(this._element).one(_.TRANSITION_END,l).emulateTransitionEnd(600),this._element.style[a]=this._element[m]+"px"}else l()}}},o.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(c)){var i=t.Event(u.HIDE);if(t(this._element).trigger(i),!i.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",_.reflow(this._element),t(this._element).addClass(h).removeClass(d).removeClass(c),this._triggerArray.length>0)for(var r=0;r<this._triggerArray.length;r++){var s=this._triggerArray[r],o=_.getSelectorFromElement(s);null!==o&&(t(o).hasClass(c)||t(s).addClass(p).attr("aria-expanded",!1))}this.setTransitioning(!0);var a=function(){e.setTransitioning(!1),t(e._element).removeClass(h).addClass(d).trigger(u.HIDDEN)};this._element.style[n]="",_.supportsTransitionEnd()?t(this._element).one(_.TRANSITION_END,a).emulateTransitionEnd(600):a()}}},o.setTransitioning=function(t){this._isTransitioning=t},o.dispose=function(){t.removeData(this._element,i),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},o._getConfig=function(t){return(t=r({},a,t)).toggle=Boolean(t.toggle),_.typeCheckConfig(e,t,l),t},o._getDimension=function(){return t(this._element).hasClass("width")?"width":"height"},o._getParent=function(){var e=this,i=null;_.isElement(this._config.parent)?(i=this._config.parent,void 0!==this._config.parent.jquery&&(i=this._config.parent[0])):i=t(this._config.parent)[0];var n='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return t(i).find(n).each(function(t,i){e._addAriaAndCollapsedClass(s._getTargetFromElement(i),[i])}),i},o._addAriaAndCollapsedClass=function(e,i){if(e){var n=t(e).hasClass(c);i.length>0&&t(i).toggleClass(p,!n).attr("aria-expanded",n)}},s._getTargetFromElement=function(e){var i=_.getSelectorFromElement(e);return i?t(i)[0]:null},s._jQueryInterface=function(e){return this.each(function(){var n=t(this),o=n.data(i),l=r({},a,n.data(),"object"==typeof e&&e);if(!o&&l.toggle&&/show|hide/.test(e)&&(l.toggle=!1),o||(o=new s(this,l),n.data(i,o)),"string"==typeof e){if(void 0===o[e])throw new TypeError('No method named "'+e+'"');o[e]()}})},n(s,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return a}}]),s}();return t(document).on(u.CLICK_DATA_API,f.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=t(this),r=_.getSelectorFromElement(this);t(r).each(function(){var e=t(this),r=e.data(i)?"toggle":n.data();m._jQueryInterface.call(e,r)})}),t.fn[e]=m._jQueryInterface,t.fn[e].Constructor=m,t.fn[e].noConflict=function(){return t.fn[e]=o,m._jQueryInterface},m}(e),I="undefined"!=typeof window&&"undefined"!=typeof document,D=["Edge","Trident","Firefox"],k=0,A=0;A<D.length;A+=1)if(I&&navigator.userAgent.indexOf(D[A])>=0){k=1;break}var L=I&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},k))}};function O(t){return t&&"[object Function]"==={}.toString.call(t)}function M(t,e){if(1!==t.nodeType)return[];var i=getComputedStyle(t,null);return e?i[e]:i}function P(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function z(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=M(t),i=e.overflow,n=e.overflowX,r=e.overflowY;return/(auto|scroll)/.test(i+r+n)?t:z(P(t))}function N(t){var e=t&&t.offsetParent,i=e&&e.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(e.nodeName)&&"static"===M(e,"position")?N(e):e:t?t.ownerDocument.documentElement:document.documentElement}function $(t){return null!==t.parentNode?$(t.parentNode):t}function j(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var i=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,n=i?t:e,r=i?e:t,s=document.createRange();s.setStart(n,0),s.setEnd(r,0);var o,a,l=s.commonAncestorContainer;if(t!==l&&e!==l||n.contains(r))return"BODY"===(a=(o=l).nodeName)||"HTML"!==a&&N(o.firstElementChild)!==o?N(l):l;var u=$(t);return u.host?j(u.host,e):j(t,$(e).host)}function H(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"===i||"HTML"===i){var n=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||n)[e]}return t[e]}function R(t,e){var i="x"===e?"Left":"Top",n="Left"===i?"Right":"Bottom";return parseFloat(t["border"+i+"Width"],10)+parseFloat(t["border"+n+"Width"],10)}var W=void 0,q=function(){return void 0===W&&(W=-1!==navigator.appVersion.indexOf("MSIE 10")),W};function B(t,e,i,n){return Math.max(e["offset"+t],e["scroll"+t],i["client"+t],i["offset"+t],i["scroll"+t],q()?i["offset"+t]+n["margin"+("Height"===t?"Top":"Left")]+n["margin"+("Height"===t?"Bottom":"Right")]:0)}function F(){var t=document.body,e=document.documentElement,i=q()&&getComputedStyle(e);return{height:B("Height",t,e,i),width:B("Width",t,e,i)}}var V=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Y=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),G=function(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t},U=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t};function X(t){return U({},t,{right:t.left+t.width,bottom:t.top+t.height})}function Q(t){var e={};if(q())try{e=t.getBoundingClientRect();var i=H(t,"top"),n=H(t,"left");e.top+=i,e.left+=n,e.bottom+=i,e.right+=n}catch(t){}else e=t.getBoundingClientRect();var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},s="HTML"===t.nodeName?F():{},o=s.width||t.clientWidth||r.right-r.left,a=s.height||t.clientHeight||r.bottom-r.top,l=t.offsetWidth-o,u=t.offsetHeight-a;if(l||u){var c=M(t);l-=R(c,"x"),u-=R(c,"y"),r.width-=l,r.height-=u}return X(r)}function K(t,e){var i=q(),n="HTML"===e.nodeName,r=Q(t),s=Q(e),o=z(t),a=M(e),l=parseFloat(a.borderTopWidth,10),u=parseFloat(a.borderLeftWidth,10),c=X({top:r.top-s.top-l,left:r.left-s.left-u,width:r.width,height:r.height});if(c.marginTop=0,c.marginLeft=0,!i&&n){var d=parseFloat(a.marginTop,10),h=parseFloat(a.marginLeft,10);c.top-=l-d,c.bottom-=l-d,c.left-=u-h,c.right-=u-h,c.marginTop=d,c.marginLeft=h}return(i?e.contains(o):e===o&&"BODY"!==o.nodeName)&&(c=function(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=H(e,"top"),r=H(e,"left"),s=i?-1:1;return t.top+=n*s,t.bottom+=n*s,t.left+=r*s,t.right+=r*s,t}(c,e)),c}function Z(t,e,i,n){var r,s,o,a,l,u,c,d={top:0,left:0},h=j(t,e);if("viewport"===n)s=(r=h).ownerDocument.documentElement,o=K(r,s),a=Math.max(s.clientWidth,window.innerWidth||0),l=Math.max(s.clientHeight,window.innerHeight||0),u=H(s),c=H(s,"left"),d=X({top:u-o.top+o.marginTop,left:c-o.left+o.marginLeft,width:a,height:l});else{var p=void 0;"scrollParent"===n?"BODY"===(p=z(P(e))).nodeName&&(p=t.ownerDocument.documentElement):p="window"===n?t.ownerDocument.documentElement:n;var f=K(p,h);if("HTML"!==p.nodeName||function t(e){var i=e.nodeName;return"BODY"!==i&&"HTML"!==i&&("fixed"===M(e,"position")||t(P(e)))}(h))d=f;else{var m=F(),g=m.height,v=m.width;d.top+=f.top-f.marginTop,d.bottom=g+f.top,d.left+=f.left-f.marginLeft,d.right=v+f.left}}return d.left+=i,d.top+=i,d.right-=i,d.bottom-=i,d}function J(t,e,i,n,r){var s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var o=Z(i,n,s,r),a={top:{width:o.width,height:e.top-o.top},right:{width:o.right-e.right,height:o.height},bottom:{width:o.width,height:o.bottom-e.bottom},left:{width:e.left-o.left,height:o.height}},l=Object.keys(a).map(function(t){return U({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),u=l.filter(function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight}),c=u.length>0?u[0].key:l[0].key,d=t.split("-")[1];return c+(d?"-"+d:"")}function tt(t,e,i){return K(i,j(e,i))}function et(t){var e=getComputedStyle(t),i=parseFloat(e.marginTop)+parseFloat(e.marginBottom),n=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+n,height:t.offsetHeight+i}}function it(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function nt(t,e,i){i=i.split("-")[0];var n=et(t),r={width:n.width,height:n.height},s=-1!==["right","left"].indexOf(i),o=s?"top":"left",a=s?"left":"top",l=s?"height":"width",u=s?"width":"height";return r[o]=e[o]+e[l]/2-n[l]/2,r[a]=i===a?e[a]-n[u]:e[it(a)],r}function rt(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function st(t,e,i){return(void 0===i?t:t.slice(0,function(t,e,i){if(Array.prototype.findIndex)return t.findIndex(function(t){return t.name===i});var n=rt(t,function(t){return t.name===i});return t.indexOf(n)}(t,0,i))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=t.function||t.fn;t.enabled&&O(i)&&(e.offsets.popper=X(e.offsets.popper),e.offsets.reference=X(e.offsets.reference),e=i(e,t))}),e}function ot(t,e){return t.some(function(t){var i=t.name;return t.enabled&&i===e})}function at(t){for(var e=[!1,"ms","Webkit","Moz","O"],i=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<e.length-1;n++){var r=e[n],s=r?""+r+i:t;if(void 0!==document.body.style[s])return s}return null}function lt(t){var e=t.ownerDocument;return e?e.defaultView:window}function ut(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function ct(t,e){Object.keys(e).forEach(function(i){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&ut(e[i])&&(n="px"),t.style[i]=e[i]+n})}function dt(t,e,i){var n=rt(t,function(t){return t.name===e}),r=!!n&&t.some(function(t){return t.name===i&&t.enabled&&t.order<n.order});if(!r){var s="`"+e+"`",o="`"+i+"`";console.warn(o+" modifier is required by "+s+" modifier in order to work, be sure to include it before "+s+"!")}return r}var ht=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],pt=ht.slice(3);function ft(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=pt.indexOf(t),n=pt.slice(i+1).concat(pt.slice(0,i));return e?n.reverse():n}var mt="flip",gt="clockwise",vt="counterclockwise";var yt={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,i=e.split("-")[0],n=e.split("-")[1];if(n){var r=t.offsets,s=r.reference,o=r.popper,a=-1!==["bottom","top"].indexOf(i),l=a?"left":"top",u=a?"width":"height",c={start:G({},l,s[l]),end:G({},l,s[l]+s[u]-o[u])};t.offsets.popper=U({},o,c[n])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var i,n=e.offset,r=t.placement,s=t.offsets,o=s.popper,a=s.reference,l=r.split("-")[0];return i=ut(+n)?[+n,0]:function(t,e,i,n){var r=[0,0],s=-1!==["right","left"].indexOf(n),o=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=o.indexOf(rt(o,function(t){return-1!==t.search(/,|\s/)}));o[a]&&-1===o[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1!==a?[o.slice(0,a).concat([o[a].split(l)[0]]),[o[a].split(l)[1]].concat(o.slice(a+1))]:[o];return(u=u.map(function(t,n){var r=(1===n?!s:s)?"height":"width",o=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,o=!0,t):o?(t[t.length-1]+=e,o=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,i,n){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),s=+r[1],o=r[2];if(!s)return t;if(0===o.indexOf("%")){var a=void 0;switch(o){case"%p":a=i;break;case"%":case"%r":default:a=n}return X(a)[e]/100*s}return"vh"===o||"vw"===o?("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*s:s}(t,r,e,i)})})).forEach(function(t,e){t.forEach(function(i,n){ut(i)&&(r[e]+=i*("-"===t[n-1]?-1:1))})}),r}(n,o,a,l),"left"===l?(o.top+=i[0],o.left-=i[1]):"right"===l?(o.top+=i[0],o.left+=i[1]):"top"===l?(o.left+=i[0],o.top-=i[1]):"bottom"===l&&(o.left+=i[0],o.top+=i[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var i=e.boundariesElement||N(t.instance.popper);t.instance.reference===i&&(i=N(i));var n=Z(t.instance.popper,t.instance.reference,e.padding,i);e.boundaries=n;var r=e.priority,s=t.offsets.popper,o={primary:function(t){var i=s[t];return s[t]<n[t]&&!e.escapeWithReference&&(i=Math.max(s[t],n[t])),G({},t,i)},secondary:function(t){var i="right"===t?"left":"top",r=s[i];return s[t]>n[t]&&!e.escapeWithReference&&(r=Math.min(s[i],n[t]-("right"===t?s.width:s.height))),G({},i,r)}};return r.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";s=U({},s,o[e](t))}),t.offsets.popper=s,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,i=e.popper,n=e.reference,r=t.placement.split("-")[0],s=Math.floor,o=-1!==["top","bottom"].indexOf(r),a=o?"right":"bottom",l=o?"left":"top",u=o?"width":"height";return i[a]<s(n[l])&&(t.offsets.popper[l]=s(n[l])-i[u]),i[l]>s(n[a])&&(t.offsets.popper[l]=s(n[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var i;if(!dt(t.instance.modifiers,"arrow","keepTogether"))return t;var n=e.element;if("string"==typeof n){if(!(n=t.instance.popper.querySelector(n)))return t}else if(!t.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],s=t.offsets,o=s.popper,a=s.reference,l=-1!==["left","right"].indexOf(r),u=l?"height":"width",c=l?"Top":"Left",d=c.toLowerCase(),h=l?"left":"top",p=l?"bottom":"right",f=et(n)[u];a[p]-f<o[d]&&(t.offsets.popper[d]-=o[d]-(a[p]-f)),a[d]+f>o[p]&&(t.offsets.popper[d]+=a[d]+f-o[p]),t.offsets.popper=X(t.offsets.popper);var m=a[d]+a[u]/2-f/2,g=M(t.instance.popper),v=parseFloat(g["margin"+c],10),y=parseFloat(g["border"+c+"Width"],10),w=m-t.offsets.popper[d]-v-y;return w=Math.max(Math.min(o[u]-f,w),0),t.arrowElement=n,t.offsets.arrow=(G(i={},d,Math.round(w)),G(i,h,""),i),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(ot(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var i=Z(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement),n=t.placement.split("-")[0],r=it(n),s=t.placement.split("-")[1]||"",o=[];switch(e.behavior){case mt:o=[n,r];break;case gt:o=ft(n);break;case vt:o=ft(n,!0);break;default:o=e.behavior}return o.forEach(function(a,l){if(n!==a||o.length===l+1)return t;n=t.placement.split("-")[0],r=it(n);var u,c=t.offsets.popper,d=t.offsets.reference,h=Math.floor,p="left"===n&&h(c.right)>h(d.left)||"right"===n&&h(c.left)<h(d.right)||"top"===n&&h(c.bottom)>h(d.top)||"bottom"===n&&h(c.top)<h(d.bottom),f=h(c.left)<h(i.left),m=h(c.right)>h(i.right),g=h(c.top)<h(i.top),v=h(c.bottom)>h(i.bottom),y="left"===n&&f||"right"===n&&m||"top"===n&&g||"bottom"===n&&v,w=-1!==["top","bottom"].indexOf(n),b=!!e.flipVariations&&(w&&"start"===s&&f||w&&"end"===s&&m||!w&&"start"===s&&g||!w&&"end"===s&&v);(p||y||b)&&(t.flipped=!0,(p||y)&&(n=o[l+1]),b&&(s="end"===(u=s)?"start":"start"===u?"end":u),t.placement=n+(s?"-"+s:""),t.offsets.popper=U({},t.offsets.popper,nt(t.instance.popper,t.offsets.reference,t.placement)),t=st(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,i=e.split("-")[0],n=t.offsets,r=n.popper,s=n.reference,o=-1!==["left","right"].indexOf(i),a=-1===["top","left"].indexOf(i);return r[o?"left":"top"]=s[i]-(a?r[o?"width":"height"]:0),t.placement=it(e),t.offsets.popper=X(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!dt(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,i=rt(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<i.top||e.left>i.right||e.top>i.bottom||e.right<i.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var i=e.x,n=e.y,r=t.offsets.popper,s=rt(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==s&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var o,a,l=void 0!==s?s:e.gpuAcceleration,u=Q(N(t.instance.popper)),c={position:r.position},d={left:Math.floor(r.left),top:Math.floor(r.top),bottom:Math.floor(r.bottom),right:Math.floor(r.right)},h="bottom"===i?"top":"bottom",p="right"===n?"left":"right",f=at("transform");if(a="bottom"===h?-u.height+d.bottom:d.top,o="right"===p?-u.width+d.right:d.left,l&&f)c[f]="translate3d("+o+"px, "+a+"px, 0)",c[h]=0,c[p]=0,c.willChange="transform";else{var m="bottom"===h?-1:1,g="right"===p?-1:1;c[h]=a*m,c[p]=o*g,c.willChange=h+", "+p}var v={"x-placement":t.placement};return t.attributes=U({},v,t.attributes),t.styles=U({},c,t.styles),t.arrowStyles=U({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,i;return ct(t.instance.popper,t.styles),e=t.instance.popper,i=t.attributes,Object.keys(i).forEach(function(t){!1!==i[t]?e.setAttribute(t,i[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&ct(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,i,n,r){var s=tt(0,e,t),o=J(i.placement,s,e,t,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return e.setAttribute("x-placement",o),ct(e,{position:"absolute"}),i},gpuAcceleration:void 0}}},wt=function(){function t(e,i){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};V(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=L(this.update.bind(this)),this.options=U({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(U({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){n.options.modifiers[e]=U({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return U({name:t},n.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&O(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return Y(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=tt(this.state,this.popper,this.reference),t.placement=J(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.offsets.popper=nt(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position="absolute",t=st(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,ot(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[at("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=function(t,e,i,n){i.updateBound=n,lt(t).addEventListener("resize",i.updateBound,{passive:!0});var r=z(t);return function t(e,i,n,r){var s="BODY"===e.nodeName,o=s?e.ownerDocument.defaultView:e;o.addEventListener(i,n,{passive:!0}),s||t(z(o.parentNode),i,n,r),r.push(o)}(r,"scroll",i.updateBound,i.scrollParents),i.scrollElement=r,i.eventsEnabled=!0,i}(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return function(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,lt(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}.call(this)}}]),t}();wt.Utils=("undefined"!=typeof window?window:global).PopperUtils,wt.placements=ht,wt.Defaults=yt;var bt,xt,_t,Et,Tt,Ct,St,It,Dt,kt,At,Lt,Ot,Mt,Pt,zt,Nt,$t,jt,Ht,Rt,Wt,qt,Bt,Ft,Vt,Yt,Gt,Ut,Xt,Qt,Kt,Zt,Jt,te,ee,ie,ne,re,se,oe,ae,le,ue,ce,de,he,pe,fe,me,ge,ve,ye,we,be,xe,_e,Ee,Te,Ce,Se,Ie,De,ke,Ae,Le,Oe,Me,Pe,ze,Ne,$e,je,He=(Ce="dropdown",Ie="."+(Se="bs.dropdown"),De=(Te=e).fn[Ce],ke=new RegExp("38|40|27"),Ae={HIDE:"hide"+Ie,HIDDEN:"hidden"+Ie,SHOW:"show"+Ie,SHOWN:"shown"+Ie,CLICK:"click"+Ie,CLICK_DATA_API:"click"+Ie+".data-api",KEYDOWN_DATA_API:"keydown"+Ie+".data-api",KEYUP_DATA_API:"keyup"+Ie+".data-api"},Le="disabled",Oe="show",Me="dropdown-menu-right",Pe='[data-toggle="dropdown"]',ze=".dropdown-menu",Ne={offset:0,flip:!0,boundary:"scrollParent"},$e={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)"},je=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e=t.prototype;return e.toggle=function(){if(!this._element.disabled&&!Te(this._element).hasClass(Le)){var e=t._getParentFromElement(this._element),i=Te(this._menu).hasClass(Oe);if(t._clearMenus(),!i){var n={relatedTarget:this._element},r=Te.Event(Ae.SHOW,n);if(Te(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if(void 0===wt)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var s=this._element;Te(e).hasClass("dropup")&&(Te(this._menu).hasClass("dropdown-menu-left")||Te(this._menu).hasClass(Me))&&(s=e),"scrollParent"!==this._config.boundary&&Te(e).addClass("position-static"),this._popper=new wt(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===Te(e).closest(".navbar-nav").length&&Te("body").children().on("mouseover",null,Te.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),Te(this._menu).toggleClass(Oe),Te(e).toggleClass(Oe).trigger(Te.Event(Ae.SHOWN,n))}}}},e.dispose=function(){Te.removeData(this._element,Se),Te(this._element).off(Ie),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},e.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},e._addEventListeners=function(){var t=this;Te(this._element).on(Ae.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},e._getConfig=function(t){return t=r({},this.constructor.Default,Te(this._element).data(),t),_.typeCheckConfig(Ce,t,this.constructor.DefaultType),t},e._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);this._menu=Te(e).find(ze)[0]}return this._menu},e._getPlacement=function(){var t=Te(this._element).parent(),e="bottom-start";return t.hasClass("dropup")?(e="top-start",Te(this._menu).hasClass(Me)&&(e="top-end")):t.hasClass("dropright")?e="right-start":t.hasClass("dropleft")?e="left-start":Te(this._menu).hasClass(Me)&&(e="bottom-end"),e},e._detectNavbar=function(){return Te(this._element).closest(".navbar").length>0},e._getPopperConfig=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=r({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset,{placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}}},t._jQueryInterface=function(e){return this.each(function(){var i=Te(this).data(Se);if(i||(i=new t(this,"object"==typeof e?e:null),Te(this).data(Se,i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},t._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var i=Te.makeArray(Te(Pe)),n=0;n<i.length;n++){var r=t._getParentFromElement(i[n]),s=Te(i[n]).data(Se),o={relatedTarget:i[n]};if(s){var a=s._menu;if(Te(r).hasClass(Oe)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&Te.contains(r,e.target))){var l=Te.Event(Ae.HIDE,o);Te(r).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&Te("body").children().off("mouseover",null,Te.noop),i[n].setAttribute("aria-expanded","false"),Te(a).removeClass(Oe),Te(r).removeClass(Oe).trigger(Te.Event(Ae.HIDDEN,o)))}}}},t._getParentFromElement=function(t){var e,i=_.getSelectorFromElement(t);return i&&(e=Te(i)[0]),e||t.parentNode},t._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||Te(e.target).closest(ze).length)):ke.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!Te(this).hasClass(Le))){var i=t._getParentFromElement(this),n=Te(i).hasClass(Oe);if((n||27===e.which&&32===e.which)&&(!n||27!==e.which&&32!==e.which)){var r=Te(i).find(".dropdown-menu .dropdown-item:not(.disabled)").get();if(0!==r.length){var s=r.indexOf(e.target);38===e.which&&s>0&&s--,40===e.which&&s<r.length-1&&s++,s<0&&(s=0),r[s].focus()}}else{if(27===e.which){var o=Te(i).find(Pe)[0];Te(o).trigger("focus")}Te(this).trigger("click")}}},n(t,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Ne}},{key:"DefaultType",get:function(){return $e}}]),t}(),Te(document).on(Ae.KEYDOWN_DATA_API,Pe,je._dataApiKeydownHandler).on(Ae.KEYDOWN_DATA_API,ze,je._dataApiKeydownHandler).on(Ae.CLICK_DATA_API+" "+Ae.KEYUP_DATA_API,je._clearMenus).on(Ae.CLICK_DATA_API,Pe,function(t){t.preventDefault(),t.stopPropagation(),je._jQueryInterface.call(Te(this),"toggle")}).on(Ae.CLICK_DATA_API,".dropdown form",function(t){t.stopPropagation()}),Te.fn[Ce]=je._jQueryInterface,Te.fn[Ce].Constructor=je,Te.fn[Ce].noConflict=function(){return Te.fn[Ce]=De,je._jQueryInterface},je),Re=(fe="."+(pe="bs.modal"),me=(he=e).fn.modal,ge={backdrop:!0,keyboard:!0,focus:!0,show:!0},ve={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},ye={HIDE:"hide"+fe,HIDDEN:"hidden"+fe,SHOW:"show"+fe,SHOWN:"shown"+fe,FOCUSIN:"focusin"+fe,RESIZE:"resize"+fe,CLICK_DISMISS:"click.dismiss"+fe,KEYDOWN_DISMISS:"keydown.dismiss"+fe,MOUSEUP_DISMISS:"mouseup.dismiss"+fe,MOUSEDOWN_DISMISS:"mousedown.dismiss"+fe,CLICK_DATA_API:"click.bs.modal.data-api"},we="modal-open",be="fade",xe="show",_e={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},Ee=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=he(t).find(_e.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var e=t.prototype;return e.toggle=function(t){return this._isShown?this.hide():this.show(t)},e.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){_.supportsTransitionEnd()&&he(this._element).hasClass(be)&&(this._isTransitioning=!0);var i=he.Event(ye.SHOW,{relatedTarget:t});he(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),he(document.body).addClass(we),this._setEscapeEvent(),this._setResizeEvent(),he(this._element).on(ye.CLICK_DISMISS,_e.DATA_DISMISS,function(t){return e.hide(t)}),he(this._dialog).on(ye.MOUSEDOWN_DISMISS,function(){he(e._element).one(ye.MOUSEUP_DISMISS,function(t){he(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},e.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var i=he.Event(ye.HIDE);if(he(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var n=_.supportsTransitionEnd()&&he(this._element).hasClass(be);n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),he(document).off(ye.FOCUSIN),he(this._element).removeClass(xe),he(this._element).off(ye.CLICK_DISMISS),he(this._dialog).off(ye.MOUSEDOWN_DISMISS),n?he(this._element).one(_.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal()}}},e.dispose=function(){he.removeData(this._element,pe),he(window,document,this._element,this._backdrop).off(fe),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},e.handleUpdate=function(){this._adjustDialog()},e._getConfig=function(t){return t=r({},ge,t),_.typeCheckConfig("modal",t,ve),t},e._showElement=function(t){var e=this,i=_.supportsTransitionEnd()&&he(this._element).hasClass(be);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&_.reflow(this._element),he(this._element).addClass(xe),this._config.focus&&this._enforceFocus();var n=he.Event(ye.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,he(e._element).trigger(n)};i?he(this._dialog).one(_.TRANSITION_END,r).emulateTransitionEnd(300):r()},e._enforceFocus=function(){var t=this;he(document).off(ye.FOCUSIN).on(ye.FOCUSIN,function(e){document!==e.target&&t._element!==e.target&&0===he(t._element).has(e.target).length&&t._element.focus()})},e._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?he(this._element).on(ye.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||he(this._element).off(ye.KEYDOWN_DISMISS)},e._setResizeEvent=function(){var t=this;this._isShown?he(window).on(ye.RESIZE,function(e){return t.handleUpdate(e)}):he(window).off(ye.RESIZE)},e._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){he(document.body).removeClass(we),t._resetAdjustments(),t._resetScrollbar(),he(t._element).trigger(ye.HIDDEN)})},e._removeBackdrop=function(){this._backdrop&&(he(this._backdrop).remove(),this._backdrop=null)},e._showBackdrop=function(t){var e=this,i=he(this._element).hasClass(be)?be:"";if(this._isShown&&this._config.backdrop){var n=_.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",i&&he(this._backdrop).addClass(i),he(this._backdrop).appendTo(document.body),he(this._element).on(ye.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),n&&_.reflow(this._backdrop),he(this._backdrop).addClass(xe),!t)return;if(!n)return void t();he(this._backdrop).one(_.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){he(this._backdrop).removeClass(xe);var r=function(){e._removeBackdrop(),t&&t()};_.supportsTransitionEnd()&&he(this._element).hasClass(be)?he(this._backdrop).one(_.TRANSITION_END,r).emulateTransitionEnd(150):r()}else t&&t()},e._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},e._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},e._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},e._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){he(_e.FIXED_CONTENT).each(function(e,i){var n=he(i)[0].style.paddingRight,r=he(i).css("padding-right");he(i).data("padding-right",n).css("padding-right",parseFloat(r)+t._scrollbarWidth+"px")}),he(_e.STICKY_CONTENT).each(function(e,i){var n=he(i)[0].style.marginRight,r=he(i).css("margin-right");he(i).data("margin-right",n).css("margin-right",parseFloat(r)-t._scrollbarWidth+"px")}),he(_e.NAVBAR_TOGGLER).each(function(e,i){var n=he(i)[0].style.marginRight,r=he(i).css("margin-right");he(i).data("margin-right",n).css("margin-right",parseFloat(r)+t._scrollbarWidth+"px")});var e=document.body.style.paddingRight,i=he("body").css("padding-right");he("body").data("padding-right",e).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},e._resetScrollbar=function(){he(_e.FIXED_CONTENT).each(function(t,e){var i=he(e).data("padding-right");void 0!==i&&he(e).css("padding-right",i).removeData("padding-right")}),he(_e.STICKY_CONTENT+", "+_e.NAVBAR_TOGGLER).each(function(t,e){var i=he(e).data("margin-right");void 0!==i&&he(e).css("margin-right",i).removeData("margin-right")});var t=he("body").data("padding-right");void 0!==t&&he("body").css("padding-right",t).removeData("padding-right")},e._getScrollbarWidth=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(e,i){return this.each(function(){var n=he(this).data(pe),s=r({},t.Default,he(this).data(),"object"==typeof e&&e);if(n||(n=new t(this,s),he(this).data(pe,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e](i)}else s.show&&n.show(i)})},n(t,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return ge}}]),t}(),he(document).on(ye.CLICK_DATA_API,_e.DATA_TOGGLE,function(t){var e,i=this,n=_.getSelectorFromElement(this);n&&(e=he(n)[0]);var s=he(e).data(pe)?"toggle":r({},he(e).data(),he(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var o=he(e).one(ye.SHOW,function(t){t.isDefaultPrevented()||o.one(ye.HIDDEN,function(){he(i).is(":visible")&&i.focus()})});Ee._jQueryInterface.call(he(e),s,this)}),he.fn.modal=Ee._jQueryInterface,he.fn.modal.Constructor=Ee,he.fn.modal.noConflict=function(){return he.fn.modal=me,Ee._jQueryInterface},Ee),We=(Kt="tooltip",Jt="."+(Zt="bs.tooltip"),te=(Qt=e).fn[Kt],ee=new RegExp("(^|\\s)bs-tooltip\\S+","g"),ie={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},ne={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},re={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},se="show",oe={HIDE:"hide"+Jt,HIDDEN:"hidden"+Jt,SHOW:"show"+Jt,SHOWN:"shown"+Jt,INSERTED:"inserted"+Jt,CLICK:"click"+Jt,FOCUSIN:"focusin"+Jt,FOCUSOUT:"focusout"+Jt,MOUSEENTER:"mouseenter"+Jt,MOUSELEAVE:"mouseleave"+Jt},ae="fade",le="show",ue="hover",ce="focus",de=function(){function t(t,e){if(void 0===wt)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var e=t.prototype;return e.enable=function(){this._isEnabled=!0},e.disable=function(){this._isEnabled=!1},e.toggleEnabled=function(){this._isEnabled=!this._isEnabled},e.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,i=Qt(t.currentTarget).data(e);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),Qt(t.currentTarget).data(e,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(Qt(this.getTipElement()).hasClass(le))return void this._leave(null,this);this._enter(null,this)}},e.dispose=function(){clearTimeout(this._timeout),Qt.removeData(this.element,this.constructor.DATA_KEY),Qt(this.element).off(this.constructor.EVENT_KEY),Qt(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&Qt(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},e.show=function(){var e=this;if("none"===Qt(this.element).css("display"))throw new Error("Please use show on visible elements");var i=Qt.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){Qt(this.element).trigger(i);var n=Qt.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!n)return;var r=this.getTipElement(),s=_.getUID(this.constructor.NAME);r.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&Qt(r).addClass(ae);var o="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,a=this._getAttachment(o);this.addAttachmentClass(a);var l=!1===this.config.container?document.body:Qt(this.config.container);Qt(r).data(this.constructor.DATA_KEY,this),Qt.contains(this.element.ownerDocument.documentElement,this.tip)||Qt(r).appendTo(l),Qt(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new wt(this.element,r,{placement:a,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),Qt(r).addClass(le),"ontouchstart"in document.documentElement&&Qt("body").children().on("mouseover",null,Qt.noop);var u=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,Qt(e.element).trigger(e.constructor.Event.SHOWN),"out"===t&&e._leave(null,e)};_.supportsTransitionEnd()&&Qt(this.tip).hasClass(ae)?Qt(this.tip).one(_.TRANSITION_END,u).emulateTransitionEnd(t._TRANSITION_DURATION):u()}},e.hide=function(t){var e=this,i=this.getTipElement(),n=Qt.Event(this.constructor.Event.HIDE),r=function(){e._hoverState!==se&&i.parentNode&&i.parentNode.removeChild(i),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),Qt(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};Qt(this.element).trigger(n),n.isDefaultPrevented()||(Qt(i).removeClass(le),"ontouchstart"in document.documentElement&&Qt("body").children().off("mouseover",null,Qt.noop),this._activeTrigger.click=!1,this._activeTrigger[ce]=!1,this._activeTrigger[ue]=!1,_.supportsTransitionEnd()&&Qt(this.tip).hasClass(ae)?Qt(i).one(_.TRANSITION_END,r).emulateTransitionEnd(150):r(),this._hoverState="")},e.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},e.isWithContent=function(){return Boolean(this.getTitle())},e.addAttachmentClass=function(t){Qt(this.getTipElement()).addClass("bs-tooltip-"+t)},e.getTipElement=function(){return this.tip=this.tip||Qt(this.config.template)[0],this.tip},e.setContent=function(){var t=Qt(this.getTipElement());this.setElementContent(t.find(".tooltip-inner"),this.getTitle()),t.removeClass(ae+" "+le)},e.setElementContent=function(t,e){var i=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?i?Qt(e).parent().is(t)||t.empty().append(e):t.text(Qt(e).text()):t[i?"html":"text"](e)},e.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},e._getAttachment=function(t){return ne[t.toUpperCase()]},e._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach(function(e){if("click"===e)Qt(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if("manual"!==e){var i=e===ue?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,n=e===ue?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;Qt(t.element).on(i,t.config.selector,function(e){return t._enter(e)}).on(n,t.config.selector,function(e){return t._leave(e)})}Qt(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=r({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},e._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},e._enter=function(t,e){var i=this.constructor.DATA_KEY;(e=e||Qt(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),Qt(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusin"===t.type?ce:ue]=!0),Qt(e.getTipElement()).hasClass(le)||e._hoverState===se?e._hoverState=se:(clearTimeout(e._timeout),e._hoverState=se,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===se&&e.show()},e.config.delay.show):e.show())},e._leave=function(t,e){var i=this.constructor.DATA_KEY;(e=e||Qt(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),Qt(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusout"===t.type?ce:ue]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState="out",e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){"out"===e._hoverState&&e.hide()},e.config.delay.hide):e.hide())},e._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},e._getConfig=function(t){return"number"==typeof(t=r({},this.constructor.Default,Qt(this.element).data(),t)).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),_.typeCheckConfig(Kt,t,this.constructor.DefaultType),t},e._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},e._cleanTipClass=function(){var t=Qt(this.getTipElement()),e=t.attr("class").match(ee);null!==e&&e.length>0&&t.removeClass(e.join(""))},e._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},e._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(Qt(t).removeClass(ae),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},t._jQueryInterface=function(e){return this.each(function(){var i=Qt(this).data(Zt),n="object"==typeof e&&e;if((i||!/dispose|hide/.test(e))&&(i||(i=new t(this,n),Qt(this).data(Zt,i)),"string"==typeof e)){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},n(t,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return re}},{key:"NAME",get:function(){return Kt}},{key:"DATA_KEY",get:function(){return Zt}},{key:"Event",get:function(){return oe}},{key:"EVENT_KEY",get:function(){return Jt}},{key:"DefaultType",get:function(){return ie}}]),t}(),Qt.fn[Kt]=de._jQueryInterface,Qt.fn[Kt].Constructor=de,Qt.fn[Kt].noConflict=function(){return Qt.fn[Kt]=te,de._jQueryInterface},de),qe=(Wt="popover",Bt="."+(qt="bs.popover"),Ft=(Rt=e).fn[Wt],Vt=new RegExp("(^|\\s)bs-popover\\S+","g"),Yt=r({},We.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Gt=r({},We.DefaultType,{content:"(string|element|function)"}),Ut={HIDE:"hide"+Bt,HIDDEN:"hidden"+Bt,SHOW:"show"+Bt,SHOWN:"shown"+Bt,INSERTED:"inserted"+Bt,CLICK:"click"+Bt,FOCUSIN:"focusin"+Bt,FOCUSOUT:"focusout"+Bt,MOUSEENTER:"mouseenter"+Bt,MOUSELEAVE:"mouseleave"+Bt},Xt=function(t){var e,i;function r(){return t.apply(this,arguments)||this}i=t,(e=r).prototype=Object.create(i.prototype),e.prototype.constructor=e,e.__proto__=i;var s=r.prototype;return s.isWithContent=function(){return this.getTitle()||this._getContent()},s.addAttachmentClass=function(t){Rt(this.getTipElement()).addClass("bs-popover-"+t)},s.getTipElement=function(){return this.tip=this.tip||Rt(this.config.template)[0],this.tip},s.setContent=function(){var t=Rt(this.getTipElement());this.setElementContent(t.find(".popover-header"),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(".popover-body"),e),t.removeClass("fade show")},s._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},s._cleanTipClass=function(){var t=Rt(this.getTipElement()),e=t.attr("class").match(Vt);null!==e&&e.length>0&&t.removeClass(e.join(""))},r._jQueryInterface=function(t){return this.each(function(){var e=Rt(this).data(qt),i="object"==typeof t?t:null;if((e||!/destroy|hide/.test(t))&&(e||(e=new r(this,i),Rt(this).data(qt,e)),"string"==typeof t)){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},n(r,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Yt}},{key:"NAME",get:function(){return Wt}},{key:"DATA_KEY",get:function(){return qt}},{key:"Event",get:function(){return Ut}},{key:"EVENT_KEY",get:function(){return Bt}},{key:"DefaultType",get:function(){return Gt}}]),r}(We),Rt.fn[Wt]=Xt._jQueryInterface,Rt.fn[Wt].Constructor=Xt,Rt.fn[Wt].noConflict=function(){return Rt.fn[Wt]=Ft,Xt._jQueryInterface},Xt),Be=(kt="scrollspy",Lt="."+(At="bs.scrollspy"),Ot=(Dt=e).fn[kt],Mt={offset:10,method:"auto",target:""},Pt={offset:"number",method:"string",target:"(string|element)"},zt={ACTIVATE:"activate"+Lt,SCROLL:"scroll"+Lt,LOAD_DATA_API:"load"+Lt+".data-api"},Nt="active",$t={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},jt="position",Ht=function(){function t(t,e){var i=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+$t.NAV_LINKS+","+this._config.target+" "+$t.LIST_ITEMS+","+this._config.target+" "+$t.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,Dt(this._scrollElement).on(zt.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}var e=t.prototype;return e.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?"offset":jt,i="auto"===this._config.method?e:this._config.method,n=i===jt?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Dt.makeArray(Dt(this._selector)).map(function(t){var e,r=_.getSelectorFromElement(t);if(r&&(e=Dt(r)[0]),e){var s=e.getBoundingClientRect();if(s.width||s.height)return[Dt(e)[i]().top+n,r]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},e.dispose=function(){Dt.removeData(this._element,At),Dt(this._scrollElement).off(Lt),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},e._getConfig=function(t){if("string"!=typeof(t=r({},Mt,t)).target){var e=Dt(t.target).attr("id");e||(e=_.getUID(kt),Dt(t.target).attr("id",e)),t.target="#"+e}return _.typeCheckConfig(kt,t,Pt),t},e._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},e._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},e._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},e._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),i=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=i){var n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;)this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}},e._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",");e=e.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var i=Dt(e.join(","));i.hasClass("dropdown-item")?(i.closest($t.DROPDOWN).find($t.DROPDOWN_TOGGLE).addClass(Nt),i.addClass(Nt)):(i.addClass(Nt),i.parents($t.NAV_LIST_GROUP).prev($t.NAV_LINKS+", "+$t.LIST_ITEMS).addClass(Nt),i.parents($t.NAV_LIST_GROUP).prev($t.NAV_ITEMS).children($t.NAV_LINKS).addClass(Nt)),Dt(this._scrollElement).trigger(zt.ACTIVATE,{relatedTarget:t})},e._clear=function(){Dt(this._selector).filter($t.ACTIVE).removeClass(Nt)},t._jQueryInterface=function(e){return this.each(function(){var i=Dt(this).data(At);if(i||(i=new t(this,"object"==typeof e&&e),Dt(this).data(At,i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},n(t,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Mt}}]),t}(),Dt(window).on(zt.LOAD_DATA_API,function(){for(var t=Dt.makeArray(Dt($t.DATA_SPY)),e=t.length;e--;){var i=Dt(t[e]);Ht._jQueryInterface.call(i,i.data())}}),Dt.fn[kt]=Ht._jQueryInterface,Dt.fn[kt].Constructor=Ht,Dt.fn[kt].noConflict=function(){return Dt.fn[kt]=Ot,Ht._jQueryInterface},Ht),Fe=(xt=".bs.tab",_t=(bt=e).fn.tab,Et={HIDE:"hide"+xt,HIDDEN:"hidden"+xt,SHOW:"show"+xt,SHOWN:"shown"+xt,CLICK_DATA_API:"click.bs.tab.data-api"},Tt="active",Ct=".active",St="> li > .active",It=function(){function t(t){this._element=t}var e=t.prototype;return e.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&bt(this._element).hasClass(Tt)||bt(this._element).hasClass("disabled"))){var e,i,n=bt(this._element).closest(".nav, .list-group")[0],r=_.getSelectorFromElement(this._element);if(n){var s="UL"===n.nodeName?St:Ct;i=(i=bt.makeArray(bt(n).find(s)))[i.length-1]}var o=bt.Event(Et.HIDE,{relatedTarget:this._element}),a=bt.Event(Et.SHOW,{relatedTarget:i});if(i&&bt(i).trigger(o),bt(this._element).trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){r&&(e=bt(r)[0]),this._activate(this._element,n);var l=function(){var e=bt.Event(Et.HIDDEN,{relatedTarget:t._element}),n=bt.Event(Et.SHOWN,{relatedTarget:i});bt(i).trigger(e),bt(t._element).trigger(n)};e?this._activate(e,e.parentNode,l):l()}}},e.dispose=function(){bt.removeData(this._element,"bs.tab"),this._element=null},e._activate=function(t,e,i){var n=this,r=("UL"===e.nodeName?bt(e).find(St):bt(e).children(Ct))[0],s=i&&_.supportsTransitionEnd()&&r&&bt(r).hasClass("fade"),o=function(){return n._transitionComplete(t,r,i)};r&&s?bt(r).one(_.TRANSITION_END,o).emulateTransitionEnd(150):o()},e._transitionComplete=function(t,e,i){if(e){bt(e).removeClass("show "+Tt);var n=bt(e.parentNode).find("> .dropdown-menu .active")[0];n&&bt(n).removeClass(Tt),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(bt(t).addClass(Tt),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),_.reflow(t),bt(t).addClass("show"),t.parentNode&&bt(t.parentNode).hasClass("dropdown-menu")){var r=bt(t).closest(".dropdown")[0];r&&bt(r).find(".dropdown-toggle").addClass(Tt),t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(e){return this.each(function(){var i=bt(this),n=i.data("bs.tab");if(n||(n=new t(this),i.data("bs.tab",n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},n(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}(),bt(document).on(Et.CLICK_DATA_API,'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',function(t){t.preventDefault(),It._jQueryInterface.call(bt(this),"show")}),bt.fn.tab=It._jQueryInterface,bt.fn.tab.Constructor=It,bt.fn.tab.noConflict=function(){return bt.fn.tab=_t,It._jQueryInterface},It);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=_,t.Alert=E,t.Button=T,t.Carousel=C,t.Collapse=S,t.Dropdown=He,t.Modal=Re,t.Popover=qe,t.Scrollspy=Be,t.Tab=Fe,t.Tooltip=We,Object.defineProperty(t,"__esModule",{value:!0})}),function(t){var e={type:"html",content:"",url:"",ajax:{},ajax_request:null,closeOnEsc:!0,closeOnOverlayClick:!0,clone:!1,overlay:{block:void 0,tpl:'<div class="arcticmodal-overlay"></div>',css:{backgroundColor:"#000",opacity:.6}},container:{block:void 0,tpl:'<div class="arcticmodal-container"><table class="arcticmodal-container_i"><tr><td class="arcticmodal-container_i2"></td></tr></table></div>'},wrap:void 0,body:void 0,errors:{tpl:'<div class="arcticmodal-error arcticmodal-close"></div>',autoclose_delay:2e3,ajax_unsuccessful_load:"Error"},openEffect:{type:"fade",speed:400},closeEffect:{type:"fade",speed:400},beforeOpen:t.noop,afterOpen:t.noop,beforeClose:t.noop,afterClose:t.noop,afterLoading:t.noop,afterLoadingOnShow:t.noop,errorLoading:t.noop},i=0,n=t([]),r=function(e,i){var n=!0;return t(e).each(function(){t(i.target).get(0)==t(this).get(0)&&(n=!1),0==t(i.target).closest("HTML",t(this).get(0)).length&&(n=!1)}),n},s={getParentEl:function(e){var i=t(e);return i.data("arcticmodal")?i:(i=t(e).closest(".arcticmodal-container").data("arcticmodalParentEl"))||!1},transition:function(e,i,n,r){switch(r=null==r?t.noop:r,n.type){case"fade":"show"==i?e.fadeIn(n.speed,r):e.fadeOut(n.speed,r);break;case"none":"show"==i?e.show():e.hide(),r()}},prepare_body:function(e,i){t(".arcticmodal-close",e.body).unbind("click.arcticmodal").bind("click.arcticmodal",function(){return i.arcticmodal("close"),!1})},init_el:function(e,a){var l=e.data("arcticmodal");if(!l){if(i++,(l=a).modalID=i,l.overlay.block=t(l.overlay.tpl),l.overlay.block.css(l.overlay.css),l.container.block=t(l.container.tpl),l.body=t(".arcticmodal-container_i2",l.container.block),a.clone?l.body.html(e.clone(!0)):(e.before('<div id="arcticmodalReserve'+l.modalID+'" style="display: none" />'),l.body.html(e)),s.prepare_body(l,e),l.closeOnOverlayClick&&l.overlay.block.add(l.container.block).click(function(i){r(t(">*",l.body),i)&&e.arcticmodal("close")}),l.container.block.data("arcticmodalParentEl",e),e.data("arcticmodal",l),n=t.merge(n,e),t.proxy(o.show,e)(),"html"==l.type)return e;if(null!=l.ajax.beforeSend){var u=l.ajax.beforeSend;delete l.ajax.beforeSend}if(null!=l.ajax.success){var c=l.ajax.success;delete l.ajax.success}if(null!=l.ajax.error){var d=l.ajax.error;delete l.ajax.error}var h=t.extend(!0,{url:l.url,beforeSend:function(){null==u?l.body.html('<div class="arcticmodal-loading" />'):u(l,e)},success:function(t){e.trigger("afterLoading"),l.afterLoading(l,e,t),null==c?l.body.html(t):c(l,e,t),s.prepare_body(l,e),e.trigger("afterLoadingOnShow"),l.afterLoadingOnShow(l,e,t)},error:function(){e.trigger("errorLoading"),l.errorLoading(l,e),null==d?(l.body.html(l.errors.tpl),t(".arcticmodal-error",l.body).html(l.errors.ajax_unsuccessful_load),t(".arcticmodal-close",l.body).click(function(){return e.arcticmodal("close"),!1}),l.errors.autoclose_delay&&setTimeout(function(){e.arcticmodal("close")},l.errors.autoclose_delay)):d(l,e)}},l.ajax);l.ajax_request=t.ajax(h),e.data("arcticmodal",l)}},init:function(i){if(i=t.extend(!0,{},e,i),!t.isFunction(this))return this.each(function(){s.init_el(t(this),t.extend(!0,{},i))});if(null!=i)if(""!=i.type)switch(i.type){case"html":if(""==i.content)return void t.error('jquery.arcticmodal: Don\'t set parameter "content"');var n=i.content;return i.content="",s.init_el(t(n),i);case"ajax":return""==i.url?void t.error('jquery.arcticmodal: Don\'t set parameter "url"'):s.init_el(t("<div />"),i)}else t.error('jquery.arcticmodal: Don\'t set parameter "type"');else t.error("jquery.arcticmodal: Uncorrect parameters")}},o={show:function(){var e=s.getParentEl(this);if(!1!==e){var i=e.data("arcticmodal");if(i.overlay.block.hide(),i.container.block.hide(),t("BODY").append(i.overlay.block),t("BODY").append(i.container.block),i.beforeOpen(i,e),e.trigger("beforeOpen"),"hidden"!=i.wrap.css("overflow")){i.wrap.data("arcticmodalOverflow",i.wrap.css("overflow"));var r=i.wrap.outerWidth(!0);i.wrap.css("overflow","hidden");var o=i.wrap.outerWidth(!0);o!=r&&i.wrap.css("marginRight",o-r+"px")}return n.not(e).each(function(){t(this).data("arcticmodal").overlay.block.hide()}),s.transition(i.overlay.block,"show",n.length>1?{type:"none"}:i.openEffect),s.transition(i.container.block,"show",n.length>1?{type:"none"}:i.openEffect,function(){i.afterOpen(i,e),e.trigger("afterOpen")}),e}t.error("jquery.arcticmodal: Uncorrect call")},close:function(){if(!t.isFunction(this))return this.each(function(){var e=s.getParentEl(this);if(!1!==e){var i=e.data("arcticmodal");!1!==i.beforeClose(i,e)&&(e.trigger("beforeClose"),n.not(e).last().each(function(){t(this).data("arcticmodal").overlay.block.show()}),s.transition(i.overlay.block,"hide",n.length>1?{type:"none"}:i.closeEffect),s.transition(i.container.block,"hide",n.length>1?{type:"none"}:i.closeEffect,function(){i.afterClose(i,e),e.trigger("afterClose"),i.clone||t("#arcticmodalReserve"+i.modalID).replaceWith(i.body.find(">*")),i.overlay.block.remove(),i.container.block.remove(),e.data("arcticmodal",null),t(".arcticmodal-container").length||(i.wrap.data("arcticmodalOverflow")&&i.wrap.css("overflow",i.wrap.data("arcticmodalOverflow")),i.wrap.css("marginRight",0))}),"ajax"==i.type&&i.ajax_request.abort(),n=n.not(e))}else t.error("jquery.arcticmodal: Uncorrect call")});n.each(function(){t(this).arcticmodal("close")})},setDefault:function(i){t.extend(!0,e,i)}};t(function(){e.wrap=t(document.all&&!document.querySelector?"html":"body")}),t(document).bind("keyup.arcticmodal",function(t){var e=n.last();e.length&&(e.data("arcticmodal").closeOnEsc&&27===t.keyCode&&e.arcticmodal("close"))}),t.arcticmodal=t.fn.arcticmodal=function(e){return o[e]?o[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void t.error("jquery.arcticmodal: Method "+e+" does not exist"):s.init.apply(this,arguments)}}(jQuery),function(t,e,i,n){function r(e,i){this.settings=null,this.options=t.extend({},r.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(r.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(r.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}r.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},r.Width={Default:"default",Inner:"inner",Outer:"outer"},r.Type={Event:"event",State:"state"},r.Plugins={},r.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,n=this.settings.rtl,r={width:"auto","margin-left":n?e:"","margin-right":n?"":e};!i&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,n=this._items.length,r=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};n--;)i=this._mergers[n],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,s[n]=r?e*i:this._items[n].width();this._widths=s}},{filter:["items","settings"],run:function(){var e=[],i=this._items,n=this.settings,r=Math.max(2*n.items,4),s=2*Math.ceil(i.length/2),o=n.loop&&i.length?n.rewind?r:Math.max(r,s):0,a="",l="";for(o/=2;o--;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),l=i[e[e.length-1]][0].outerHTML+l;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,n=0,r=0,s=[];++i<e;)n=s[i-1]||0,r=this._widths[this.relative(i)]+this.settings.margin,s.push(n+r*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,n=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],n.eq(e).css(t.css);else i&&(t.css.width=t.items.width,n.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,n,r=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,o=this.coordinates(this.current())+s,a=o+this.width()*r,l=[];for(i=0,n=this._coordinates.length;i<n;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+s*r,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&l.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],r.prototype.initialize=function(){var e,i,r;(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading"))&&(e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:n,r=this.$element.children(i).width(),e.length&&r<=0&&this.preloadAutoWidthImages(e));this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},r.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,n=-1,r=null;i?(t.each(i,function(t){t<=e&&t>n&&(n=Number(t))}),"function"==typeof(r=t.extend({},this.options,i[n])).stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):r=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=n,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},r.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},r.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},r.prototype.update=function(){for(var e=0,i=this._pipe.length,n=t.proxy(function(t){return this[t]},this._invalidated),r={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,n).length>0)&&this._pipe[e].run(r),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},r.prototype.width=function(t){switch(t=t||r.Width.Default){case r.Width.Inner:case r.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},r.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},r.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},r.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},r.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},r.prototype.onDragStart=function(e){var n=null;3!==e.which&&(t.support.transform?n={x:(n=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===n.length?12:4],y:n[16===n.length?13:5]}:(n=this.$stage.position(),n={x:this.settings.rtl?n.left+this.$stage.width()-this.width()+this.settings.margin:n.left,y:n.top}),this.is("animating")&&(t.support.transform?this.animate(n.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=n,this._drag.stage.current=n,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var n=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(n.x)<Math.abs(n.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},r.prototype.onDragMove=function(t){var e=null,i=null,n=null,r=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),n=this.settings.pullDrag?-1*r.x/5:0,s.x=Math.max(Math.min(s.x,e+n),i+n)),this._drag.stage.current=s,this.animate(s.x))},r.prototype.onDragEnd=function(e){var n=this.difference(this._drag.pointer,this.pointer(e)),r=this._drag.stage.current,s=n.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==n.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==n.x?s:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=s,(Math.abs(n.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},r.prototype.closest=function(e,i){var n=-1,r=this.width(),s=this.coordinates();return this.settings.freeDrag||t.each(s,t.proxy(function(t,o){return"left"===i&&e>o-30&&e<o+30?n=t:"right"===i&&e>o-r-30&&e<o-r+30?n=t+1:this.op(e,"<",o)&&this.op(e,">",s[t+1]||o-r)&&(n="left"===i?t+1:t),-1===n},this)),this.settings.loop||(this.op(e,">",s[this.minimum()])?n=e=this.minimum():this.op(e,"<",s[this.maximum()])&&(n=e=this.maximum())),n},r.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},r.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},r.prototype.current=function(t){if(t===n)return this._current;if(0===this._items.length)return n;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==n&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},r.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},r.prototype.reset=function(t){(t=this.normalize(t))!==n&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},r.prototype.normalize=function(t,e){var i=this._items.length,r=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=n:(t<0||t>=i+r)&&(t=((t-r/2)%i+i)%i+r/2),t},r.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},r.prototype.maximum=function(t){var e,i,n,r=this.settings,s=this._coordinates.length;if(r.loop)s=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){for(e=this._items.length,i=this._items[--e].width(),n=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>n););s=e+1}else s=r.center?this._items.length-1:this._items.length-r.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},r.prototype.minimum=function(t){return t?0:this._clones.length/2},r.prototype.items=function(t){return t===n?this._items.slice():(t=this.normalize(t,!0),this._items[t])},r.prototype.mergers=function(t){return t===n?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},r.prototype.clones=function(e){var i=this._clones.length/2,r=i+this._items.length,s=function(t){return t%2==0?r+t/2:i-(t+1)/2};return e===n?t.map(this._clones,function(t,e){return s(e)}):t.map(this._clones,function(t,i){return t===e?s(i):null})},r.prototype.speed=function(t){return t!==n&&(this._speed=t),this._speed},r.prototype.coordinates=function(e){var i,r=1,s=e-1;return e===n?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(r=-1,s=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[s]||0))/2*r):i=this._coordinates[s]||0,i=Math.ceil(i))},r.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},r.prototype.to=function(t,e){var i=this.current(),n=null,r=t-this.relative(i),s=(r>0)-(r<0),o=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>o/2&&(r+=-1*s*o),(n=(((t=i+r)-a)%o+o)%o+a)!==t&&n-r<=l&&n-r>0&&(i=n-r,t=n,this.reset(i))):t=this.settings.rewind?(t%(l+=1)+l)%l:Math.max(a,Math.min(l,t)),this.speed(this.duration(i,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},r.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},r.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},r.prototype.onTransitionEnd=function(t){if(t!==n&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},r.prototype.viewport=function(){var n;return this.options.responsiveBaseElement!==e?n=t(this.options.responsiveBaseElement).width():e.innerWidth?n=e.innerWidth:i.documentElement&&i.documentElement.clientWidth?n=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),n},r.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},r.prototype.add=function(e,i){var r=this.relative(this._current);i=i===n?this._items.length:this.normalize(i,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:i}),e=this.prepare(e),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[i-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(e),this._items.splice(i,0,e),this._mergers.splice(i,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:e,position:i})},r.prototype.remove=function(t){(t=this.normalize(t,!0))!==n&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},r.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},r.prototype.destroy=function(){for(var n in this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize)),this._plugins)this._plugins[n].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},r.prototype.op=function(t,e,i){var n=this.settings.rtl;switch(e){case"<":return n?t>i:t<i;case">":return n?t<i:t>i;case">=":return n?t<=i:t>=i;case"<=":return n?t>=i:t<=i}},r.prototype.on=function(t,e,i,n){t.addEventListener?t.addEventListener(e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},r.prototype.off=function(t,e,i,n){t.removeEventListener?t.removeEventListener(e,i,n):t.detachEvent&&t.detachEvent("on"+e,i)},r.prototype.trigger=function(e,i,n,s,o){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,n],function(t){return t}).join("-").toLowerCase()),u=t.Event([e,"owl",n||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(u)}),this.register({type:r.Type.Event,name:e}),this.$element.trigger(u),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,u)),u},r.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===n&&(this._states.current[e]=0),this._states.current[e]++},this))},r.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},r.prototype.register=function(e){if(e.type===r.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===r.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,n){return t.inArray(i,this._states.tags[e.name])===n},this)))},r.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},r.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},r.prototype.pointer=function(t){var i={x:null,y:null};return(t=(t=t.originalEvent||t||e.event).touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(i.x=t.pageX,i.y=t.pageY):(i.x=t.clientX,i.y=t.clientY),i},r.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},r.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=t(this),s=n.data("owl.carousel");s||(s=new r(this,"object"==typeof e&&e),n.data("owl.carousel",s),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){s.register({type:r.Type.Event,name:i}),s.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),s[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},s))})),"string"==typeof e&&"_"!==e.charAt(0)&&s[e].apply(s,i)})},t.fn.owlCarousel.Constructor=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,i;for(t in e.clearInterval(this._interval),this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,n=i.center&&Math.ceil(i.items/2)||i.items,r=i.center&&-1*n||0,s=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+r,o=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);r++<n;)this.load(o/2+this._core.relative(s)),o&&t.each(this._core.clones(this._core.relative(s)),a),s++},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1},r.prototype.load=function(i){var n=this._core.$stage.children().eq(i),r=n&&n.find(".owl-lazy");!r||t.inArray(n.get(0),this._loaded)>-1||(r.each(t.proxy(function(i,n){var r,s=t(n),o=e.devicePixelRatio>1&&s.attr("data-src-retina")||s.attr("data-src");this._core.trigger("load",{element:s,url:o},"lazy"),s.is("img")?s.one("load.owl.lazy",t.proxy(function(){s.css("opacity",1),this._core.trigger("loaded",{element:s,url:o},"lazy")},this)).attr("src",o):((r=new Image).onload=t.proxy(function(){s.css({"background-image":'url("'+o+'")',opacity:"1"}),this._core.trigger("loaded",{element:s,url:o},"lazy")},this),r.src=o)},this)),this._loaded.push(n.get(0)))},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var e,i=this._core._current,n=i+this._core.settings.items,r=this._core.$stage.children().toArray().slice(i,n),s=[];t.each(r,function(e,i){s.push(t(i).height())}),e=Math.max.apply(null,s),this._core.$stage.parent().height(e).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(t,e){var i=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",n=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if((n=o.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)i="youtube";else if(n[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(n[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}n=n[6],this._videos[o]={type:i,id:n,width:r,height:s},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},r.prototype.thumbnail=function(e,i){var n,r,s=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",o=e.find("img"),a="src",l="",u=this._core.settings,c=function(t){'<div class="owl-video-play-icon"></div>',n=u.lazyLoad?'<div class="owl-video-tn '+l+'" '+a+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(n),e.after('<div class="owl-video-play-icon"></div>')};if(e.wrap('<div class="owl-video-wrapper"'+s+"></div>"),this._core.settings.lazyLoad&&(a="data-src",l="owl-lazy"),o.length)return c(o.attr(a)),o.remove(),!1;"youtube"===i.type?(r="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",c(r)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){r=t[0].thumbnail_large,c(r)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){r=t.framegrab_url,c(r)}})},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(e){var i,n=t(e.target).closest("."+this._core.settings.itemClass),r=this._videos[n.attr("data-video")],s=r.width||"100%",o=r.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),"youtube"===r.type?i='<iframe width="'+s+'" height="'+o+'" src="//www.youtube.com/embed/'+r.id+"?autoplay=1&rel=0&v="+r.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===r.type?i='<iframe src="//player.vimeo.com/video/'+r.id+'?autoplay=1" width="'+s+'" height="'+o+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===r.type&&(i='<iframe frameborder="0"height="'+o+'"width="'+s+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+r.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+i+"</div>").insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var t,e;for(t in this._core.$element.off("click.owl.video"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var r=function(e){this.core=e,this.core.options=t.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),s=this.core.settings.animateIn,o=this.core.settings.animateOut;this.core.current()!==this.previous&&(o&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(o)),s&&r.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(s))}},r.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var r=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},r.prototype._getNextTimeout=function(n,r){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||i.hidden||this._core.next(r||this._core.settings.autoplaySpeed)},this),n||this._core.settings.autoplayTimeout)},r.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},r.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},r.prototype.destroy=function(){var t,e;for(t in this.stop(),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){"use strict";var r=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var e,i=this._core.settings;for(e in this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t("<div>").addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var n=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(n,i.dotsSpeed)},this)),this._overrides)this._core[e]=t.proxy(this[e],this)},r.prototype.destroy=function(){var t,e,i,n;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(n in this.overides)this._core[n]=this._overrides[n];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},r.prototype.update=function(){var t,e,i=this._core.clones().length/2,n=i+this._core.items().length,r=this._core.maximum(!0),s=this._core.settings,o=s.center||s.autoWidth||s.dotsData?1:s.dotsEach||s.items;if("page"!==s.slideBy&&(s.slideBy=Math.min(s.slideBy,s.items)),s.dots||"page"==s.slideBy)for(this._pages=[],t=i,e=0,0;t<n;t++){if(e>=o||0===e){if(this._pages.push({start:Math.min(r,t-i),end:t-i+o-1}),Math.min(r,t-i)===r)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},r.prototype.draw=function(){var e,i=this._core.settings,n=this._core.items().length<=i.items,r=this._core.relative(this._core.current()),s=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||n),i.nav&&(this._controls.$previous.toggleClass("disabled",!s&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!s&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||n),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},r.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},r.prototype.getPosition=function(e){var i,n,r=this._core.settings;return"page"==r.slideBy?(i=t.inArray(this.current(),this._pages),n=this._pages.length,e?++i:--i,i=this._pages[(i%n+n)%n].start):(i=this._core.relative(this._core.current()),n=this._core.items().length,e?i+=r.slideBy:i-=r.slideBy),i},r.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},r.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},r.prototype.to=function(e,i,n){var r;!n&&this._pages.length?(r=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%r+r)%r].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){"use strict";var r=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var n=this._core.items(this._core.relative(this._core.current())),r=t.map(this._hashes,function(t,e){return t===n?e:null}).join();if(!r||e.location.hash.slice(1)===r)return;e.location.hash=r}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),n=this._core.$stage.children(),r=this._hashes[i]&&n.index(this._hashes[i]);void 0!==r&&r!==this._core.current()&&this._core.to(this._core.relative(r),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var i,n;for(i in t(e).off("hashchange.owl.navigation"),this._handlers)this._core.$element.off(i,this._handlers[i]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var r=t("<support>").get(0).style,s="Webkit Moz O ms".split(" "),o={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},a=function(){return!!c("transform")},l=function(){return!!c("perspective")},u=function(){return!!c("animation")};function c(e,i){var o=!1,a=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+s.join(a+" ")+a).split(" "),function(t,e){if(r[e]!==n)return o=!i||e,!1}),o}function d(t){return c(t,!0)}(function(){return!!c("transition")})()&&(t.support.transition=new String(d("transition")),t.support.transition.end=o.transition.end[t.support.transition]),u()&&(t.support.animation=new String(d("animation")),t.support.animation.end=o.animation.end[t.support.animation]),a()&&(t.support.transform=new String(d("transform")),t.support.transform3d=l())}(window.Zepto||window.jQuery,window,document),function(){"use strict";var t=0,e={};function i(n){if(!n)throw new Error("No options passed to Waypoint constructor");if(!n.element)throw new Error("No element option passed to Waypoint constructor");if(!n.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=i.Adapter.extend({},i.defaults,n),this.element=this.options.element,this.adapter=new i.Adapter(this.element),this.callback=n.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=i.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=i.Context.findOrCreateByElement(this.options.context),i.offsetAliases[this.options.offset]&&(this.options.offset=i.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),e[this.key]=this,t+=1}i.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},i.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},i.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete e[this.key]},i.prototype.disable=function(){return this.enabled=!1,this},i.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},i.prototype.next=function(){return this.group.next(this)},i.prototype.previous=function(){return this.group.previous(this)},i.invokeAll=function(t){var i=[];for(var n in e)i.push(e[n]);for(var r=0,s=i.length;r<s;r++)i[r][t]()},i.destroyAll=function(){i.invokeAll("destroy")},i.disableAll=function(){i.invokeAll("disable")},i.enableAll=function(){i.invokeAll("enable")},i.refreshAll=function(){i.Context.refreshAll()},i.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},i.viewportWidth=function(){return document.documentElement.clientWidth},i.adapters=[],i.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},i.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=i}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}var e=0,i={},n=window.Waypoint,r=window.onload;function s(t){this.element=t,this.Adapter=n.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+e,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,i[t.waypointContextKey]=this,e+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}s.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},s.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical);t&&e&&(this.adapter.off(".waypoints"),delete i[this.key])},s.prototype.createThrottledResizeHandler=function(){var t=this;function e(){t.handleResize(),t.didResize=!1}this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,n.requestAnimationFrame(e))})},s.prototype.createThrottledScrollHandler=function(){var t=this;function e(){t.handleScroll(),t.didScroll=!1}this.adapter.on("scroll.waypoints",function(){t.didScroll&&!n.isTouch||(t.didScroll=!0,n.requestAnimationFrame(e))})},s.prototype.handleResize=function(){n.Context.refreshAll()},s.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var i in e){var n=e[i],r=n.newScroll>n.oldScroll?n.forward:n.backward;for(var s in this.waypoints[i]){var o=this.waypoints[i][s],a=n.oldScroll<o.triggerPoint,l=n.newScroll>=o.triggerPoint;(a&&l||!a&&!l)&&(o.queueTrigger(r),t[o.group.id]=o.group)}}for(var u in t)t[u].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},s.prototype.innerHeight=function(){return this.element==this.element.window?n.viewportHeight():this.adapter.innerHeight()},s.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},s.prototype.innerWidth=function(){return this.element==this.element.window?n.viewportWidth():this.adapter.innerWidth()},s.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var i in this.waypoints[e])t.push(this.waypoints[e][i]);for(var n=0,r=t.length;n<r;n++)t[n].destroy()},s.prototype.refresh=function(){var t,e=this.element==this.element.window,i=e?void 0:this.adapter.offset(),r={};for(var s in this.handleScroll(),t={horizontal:{contextOffset:e?0:i.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:i.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}}){var o=t[s];for(var a in this.waypoints[s]){var l,u,c,d,h=this.waypoints[s][a],p=h.options.offset,f=h.triggerPoint,m=0,g=null==f;h.element!==h.element.window&&(m=h.adapter.offset()[o.offsetProp]),"function"==typeof p?p=p.apply(h):"string"==typeof p&&(p=parseFloat(p),h.options.offset.indexOf("%")>-1&&(p=Math.ceil(o.contextDimension*p/100))),l=o.contextScroll-o.contextOffset,h.triggerPoint=m+l-p,u=f<o.oldScroll,c=h.triggerPoint>=o.oldScroll,d=!u&&!c,!g&&(u&&c)?(h.queueTrigger(o.backward),r[h.group.id]=h.group):!g&&d?(h.queueTrigger(o.forward),r[h.group.id]=h.group):g&&o.oldScroll>=h.triggerPoint&&(h.queueTrigger(o.forward),r[h.group.id]=h.group)}}return n.requestAnimationFrame(function(){for(var t in r)r[t].flushTriggers()}),this},s.findOrCreateByElement=function(t){return s.findByElement(t)||new s(t)},s.refreshAll=function(){for(var t in i)i[t].refresh()},s.findByElement=function(t){return i[t.waypointContextKey]},window.onload=function(){r&&r(),s.refreshAll()},n.requestAnimationFrame=function(e){(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t).call(window,e)},n.Context=s}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}var i={vertical:{},horizontal:{}},n=window.Waypoint;function r(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),i[this.axis][this.name]=this}r.prototype.add=function(t){this.waypoints.push(t)},r.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},r.prototype.flushTriggers=function(){for(var i in this.triggerQueues){var n=this.triggerQueues[i],r="up"===i||"left"===i;n.sort(r?e:t);for(var s=0,o=n.length;s<o;s+=1){var a=n[s];(a.options.continuous||s===n.length-1)&&a.trigger([i])}}this.clearTriggerQueues()},r.prototype.next=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints);return i===this.waypoints.length-1?null:this.waypoints[i+1]},r.prototype.previous=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints);return i?this.waypoints[i-1]:null},r.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},r.prototype.remove=function(t){var e=n.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},r.prototype.first=function(){return this.waypoints[0]},r.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},r.findOrCreate=function(t){return i[t.axis][t.name]||new r(t)},n.Group=r}(),function(){"use strict";var t=window.jQuery,e=window.Waypoint;function i(e){this.$element=t(e)}t.each(["innerHeight","innerWidth","off","offset","on","outerHeight","outerWidth","scrollLeft","scrollTop"],function(t,e){i.prototype[e]=function(){var t=Array.prototype.slice.call(arguments);return this.$element[e].apply(this.$element,t)}}),t.each(["extend","inArray","isEmptyObject"],function(e,n){i[n]=t[n]}),e.adapters.push({name:"jquery",Adapter:i}),e.Adapter=i}(),function(){"use strict";var t=window.Waypoint;function e(e){return function(){var i=[],n=arguments[0];return e.isFunction(arguments[0])&&((n=e.extend({},arguments[1])).handler=arguments[0]),this.each(function(){var r=e.extend({},n,{element:this});"string"==typeof r.context&&(r.context=e(this).closest(r.context)[0]),i.push(new t(r))}),i}}window.jQuery&&(window.jQuery.fn.waypoint=e(window.jQuery)),window.Zepto&&(window.Zepto.fn.waypoint=e(window.Zepto))}(),function(t){"use strict";t.fn.counterUp=function(e){var i=t.extend({time:400,delay:10},e);return this.each(function(){var e=t(this),n=i;e.waypoint(function(){var t=[],i=n.time/n.delay,r=e.text(),s=/[0-9]+,[0-9]+/.test(r);r=r.replace(/,/g,"");/^[0-9]+$/.test(r);for(var o=/^[0-9]+\.[0-9]+$/.test(r),a=o?(r.split(".")[1]||[]).length:0,l=i;l>=1;l--){var u=parseInt(r/i*l);if(o&&(u=parseFloat(r/i*l).toFixed(a)),s)for(;/(\d+)(\d{3})/.test(u.toString());)u=u.toString().replace(/(\d+)(\d{3})/,"$1,$2");t.unshift(u)}e.data("counterup-nums",t),e.text("0");e.data("counterup-func",function(){e.text(e.data("counterup-nums").shift()),e.data("counterup-nums").length?setTimeout(e.data("counterup-func"),n.delay):(e.data("counterup-nums"),e.data("counterup-nums",null),e.data("counterup-func",null))}),setTimeout(e.data("counterup-func"),n.delay)},{offset:"100%",triggerOnce:!0})})}}(jQuery),function(t){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],t):"undefined"!=typeof module&&module.exports?t(require("jquery")):t(jQuery)}(function(t){"use strict";var e="left",i="right",n="up",r="down",s="in",o="out",a="none",l="auto",u="swipe",c="pinch",d="tap",h="doubletap",p="longtap",f="horizontal",m="vertical",g="all",v=10,y="start",w="move",b="end",x="cancel",_="ontouchstart"in window,E=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled&&!_,T=(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&!_,C="TouchSwipe";t.fn.swipe=function(S){var I=t(this),D=I.data(C);if(D&&"string"==typeof S){if(D[S])return D[S].apply(D,Array.prototype.slice.call(arguments,1));t.error("Method "+S+" does not exist on jQuery.swipe")}else if(D&&"object"==typeof S)D.option.apply(D,arguments);else if(!(D||"object"!=typeof S&&S))return function(S){!S||void 0!==S.allowPageScroll||void 0===S.swipe&&void 0===S.swipeStatus||(S.allowPageScroll=a);void 0!==S.click&&void 0===S.tap&&(S.tap=S.click);S||(S={});return S=t.extend({},t.fn.swipe.defaults,S),this.each(function(){var I=t(this),D=I.data(C);D||(D=new function(S,I){var I=t.extend({},I),D=_||T||!I.fallbackToMouseEvents,k=D?T?E?"MSPointerDown":"pointerdown":"touchstart":"mousedown",A=D?T?E?"MSPointerMove":"pointermove":"touchmove":"mousemove",L=D?T?E?"MSPointerUp":"pointerup":"touchend":"mouseup",O=D?T?"mouseleave":null:"mouseleave",M=T?E?"MSPointerCancel":"pointercancel":"touchcancel",P=0,z=null,N=null,$=0,j=0,H=0,R=1,W=0,q=0,B=null,F=t(S),V="start",Y=0,G={},U=0,X=0,Q=0,K=0,Z=0,J=null,tt=null;try{F.bind(k,et),F.bind(M,rt)}catch(e){t.error("events not supported "+k+","+M+" on jQuery.swipe")}function et(s){if(!0!==F.data(C+"_intouch")&&!(t(s.target).closest(I.excludedElements,F).length>0)){var o=s.originalEvent?s.originalEvent:s;if(!o.pointerType||"mouse"!=o.pointerType||0!=I.fallbackToMouseEvents){var a,l,u=o.touches,c=u?u[0]:o;return V=y,u?Y=u.length:!1!==I.preventDefaultEvents&&s.preventDefault(),P=0,z=null,N=null,q=null,$=0,j=0,H=0,R=1,W=0,(l={})[e]=Dt(e),l[i]=Dt(i),l[n]=Dt(n),l[r]=Dt(r),B=l,_t(),Ct(0,c),!u||Y===I.fingers||I.fingers===g||ft()?(U=Ot(),2==Y&&(Ct(1,u[1]),j=H=At(G[0].start,G[1].start)),(I.swipeStatus||I.pinchStatus)&&(a=lt(o,V))):a=!1,!1===a?(lt(o,V=x),a):(I.hold&&(tt=setTimeout(t.proxy(function(){F.trigger("hold",[o.target]),I.hold&&(a=I.hold.call(F,o,o.target))},this),I.longTapThreshold)),Tt(!0),null)}}}function it(u){var c,d,h=u.originalEvent?u.originalEvent:u;if(V!==b&&V!==x&&!Et()){var p,v,y,_,E,T,C,S=h.touches,D=S?S[0]:h,k=St(D);if(X=Ot(),S&&(Y=S.length),I.hold&&clearTimeout(tt),V=w,2==Y&&(0==j?(Ct(1,S[1]),j=H=At(G[0].start,G[1].start)):(St(S[1]),H=At(G[0].end,G[1].end),G[0].end,G[1].end,q=R<1?o:s),R=(H/j*1).toFixed(2),W=Math.abs(j-H)),Y===I.fingers||I.fingers===g||!S||ft()){if(z=Lt(k.start,k.end),N=Lt(k.last,k.end),function(t,s){if(!1!==I.preventDefaultEvents)if(I.allowPageScroll===a)t.preventDefault();else{var o=I.allowPageScroll===l;switch(s){case e:(I.swipeLeft&&o||!o&&I.allowPageScroll!=f)&&t.preventDefault();break;case i:(I.swipeRight&&o||!o&&I.allowPageScroll!=f)&&t.preventDefault();break;case n:(I.swipeUp&&o||!o&&I.allowPageScroll!=m)&&t.preventDefault();break;case r:(I.swipeDown&&o||!o&&I.allowPageScroll!=m)&&t.preventDefault()}}}(u,N),T=k.start,C=k.end,P=Math.round(Math.sqrt(Math.pow(C.x-T.x,2)+Math.pow(C.y-T.y,2))),$=kt(),d=P,(c=z)!=a&&(d=Math.max(d,It(c)),B[c].distance=d),p=lt(h,V),!I.triggerOnTouchEnd||I.triggerOnTouchLeave){var A=!0;if(I.triggerOnTouchLeave){var L={left:(E=(_=t(_=this)).offset()).left,right:E.left+_.outerWidth(),top:E.top,bottom:E.top+_.outerHeight()};v=k.end,y=L,A=v.x>y.left&&v.x<y.right&&v.y>y.top&&v.y<y.bottom}!I.triggerOnTouchEnd&&A?V=at(w):I.triggerOnTouchLeave&&!A&&(V=at(b)),V!=x&&V!=b||lt(h,V)}}else lt(h,V=x);!1===p&&lt(h,V=x)}}function nt(t){var e,i=t.originalEvent?t.originalEvent:t,n=i.touches;if(n){if(n.length&&!Et())return e=i,Q=Ot(),K=e.touches.length+1,!0;if(n.length&&Et())return!0}return Et()&&(Y=K),X=Ot(),$=kt(),dt()||!ct()?lt(i,V=x):I.triggerOnTouchEnd||!1===I.triggerOnTouchEnd&&V===w?(!1!==I.preventDefaultEvents&&t.preventDefault(),lt(i,V=b)):!I.triggerOnTouchEnd&&wt()?ut(i,V=b,d):V===w&&lt(i,V=x),Tt(!1),null}function rt(){Y=0,X=0,U=0,j=0,H=0,R=1,_t(),Tt(!1)}function st(t){var e=t.originalEvent?t.originalEvent:t;I.triggerOnTouchLeave&&(V=at(b),lt(e,V))}function ot(){F.unbind(k,et),F.unbind(M,rt),F.unbind(A,it),F.unbind(L,nt),O&&F.unbind(O,st),Tt(!1)}function at(t){var e=t,i=ht(),n=ct(),r=dt();return!i||r?e=x:!n||t!=w||I.triggerOnTouchEnd&&!I.triggerOnTouchLeave?!n&&t==b&&I.triggerOnTouchLeave&&(e=x):e=b,e}function lt(t,e){var i,n=t.touches;return(mt()&&gt()||gt())&&(i=ut(t,e,u)),(pt()&&ft()||ft())&&!1!==i&&(i=ut(t,e,c)),xt()&&bt()&&!1!==i?i=ut(t,e,h):$>I.longTapThreshold&&P<v&&I.longTap&&!1!==i?i=ut(t,e,p):1!==Y&&_||!(isNaN(P)||P<I.threshold)||!wt()||!1===i||(i=ut(t,e,d)),e===x&&rt(),e===b&&(n&&n.length||rt()),i}function ut(a,l,f){var m;if(f==u){if(F.trigger("swipeStatus",[l,z||null,P||0,$||0,Y,G,N]),I.swipeStatus&&!1===(m=I.swipeStatus.call(F,a,l,z||null,P||0,$||0,Y,G,N)))return!1;if(l==b&&mt()){if(clearTimeout(J),clearTimeout(tt),F.trigger("swipe",[z,P,$,Y,G,N]),I.swipe&&!1===(m=I.swipe.call(F,a,z,P,$,Y,G,N)))return!1;switch(z){case e:F.trigger("swipeLeft",[z,P,$,Y,G,N]),I.swipeLeft&&(m=I.swipeLeft.call(F,a,z,P,$,Y,G,N));break;case i:F.trigger("swipeRight",[z,P,$,Y,G,N]),I.swipeRight&&(m=I.swipeRight.call(F,a,z,P,$,Y,G,N));break;case n:F.trigger("swipeUp",[z,P,$,Y,G,N]),I.swipeUp&&(m=I.swipeUp.call(F,a,z,P,$,Y,G,N));break;case r:F.trigger("swipeDown",[z,P,$,Y,G,N]),I.swipeDown&&(m=I.swipeDown.call(F,a,z,P,$,Y,G,N))}}}if(f==c){if(F.trigger("pinchStatus",[l,q||null,W||0,$||0,Y,R,G]),I.pinchStatus&&!1===(m=I.pinchStatus.call(F,a,l,q||null,W||0,$||0,Y,R,G)))return!1;if(l==b&&pt())switch(q){case s:F.trigger("pinchIn",[q||null,W||0,$||0,Y,R,G]),I.pinchIn&&(m=I.pinchIn.call(F,a,q||null,W||0,$||0,Y,R,G));break;case o:F.trigger("pinchOut",[q||null,W||0,$||0,Y,R,G]),I.pinchOut&&(m=I.pinchOut.call(F,a,q||null,W||0,$||0,Y,R,G))}}return f==d?l!==x&&l!==b||(clearTimeout(J),clearTimeout(tt),bt()&&!xt()?(Z=Ot(),J=setTimeout(t.proxy(function(){Z=null,F.trigger("tap",[a.target]),I.tap&&(m=I.tap.call(F,a,a.target))},this),I.doubleTapThreshold)):(Z=null,F.trigger("tap",[a.target]),I.tap&&(m=I.tap.call(F,a,a.target)))):f==h?l!==x&&l!==b||(clearTimeout(J),clearTimeout(tt),Z=null,F.trigger("doubletap",[a.target]),I.doubleTap&&(m=I.doubleTap.call(F,a,a.target))):f==p&&(l!==x&&l!==b||(clearTimeout(J),Z=null,F.trigger("longtap",[a.target]),I.longTap&&(m=I.longTap.call(F,a,a.target)))),m}function ct(){var t=!0;return null!==I.threshold&&(t=P>=I.threshold),t}function dt(){var t=!1;return null!==I.cancelThreshold&&null!==z&&(t=It(z)-P>=I.cancelThreshold),t}function ht(){return!(I.maxTimeThreshold&&$>=I.maxTimeThreshold)}function pt(){var t=vt(),e=yt(),i=null===I.pinchThreshold||W>=I.pinchThreshold;return t&&e&&i}function ft(){return!!(I.pinchStatus||I.pinchIn||I.pinchOut)}function mt(){var t=ht(),e=ct(),i=vt(),n=yt(),r=dt(),s=!r&&n&&i&&e&&t;return s}function gt(){return!!(I.swipe||I.swipeStatus||I.swipeLeft||I.swipeRight||I.swipeUp||I.swipeDown)}function vt(){return Y===I.fingers||I.fingers===g||!_}function yt(){return 0!==G[0].end.x}function wt(){return!!I.tap}function bt(){return!!I.doubleTap}function xt(){if(null==Z)return!1;var t=Ot();return bt()&&t-Z<=I.doubleTapThreshold}function _t(){Q=0,K=0}function Et(){var t=!1;if(Q){var e=Ot()-Q;e<=I.fingerReleaseThreshold&&(t=!0)}return t}function Tt(t){F&&(!0===t?(F.bind(A,it),F.bind(L,nt),O&&F.bind(O,st)):(F.unbind(A,it,!1),F.unbind(L,nt,!1),O&&F.unbind(O,st,!1)),F.data(C+"_intouch",!0===t))}function Ct(t,e){var i={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return i.start.x=i.last.x=i.end.x=e.pageX||e.clientX,i.start.y=i.last.y=i.end.y=e.pageY||e.clientY,G[t]=i,i}function St(t){var e=void 0!==t.identifier?t.identifier:0,i=G[e]||null;return null===i&&(i=Ct(e,t)),i.last.x=i.end.x,i.last.y=i.end.y,i.end.x=t.pageX||t.clientX,i.end.y=t.pageY||t.clientY,i}function It(t){if(B[t])return B[t].distance}function Dt(t){return{direction:t,distance:0}}function kt(){return X-U}function At(t,e){var i=Math.abs(t.x-e.x),n=Math.abs(t.y-e.y);return Math.round(Math.sqrt(i*i+n*n))}function Lt(t,s){if(l=s,(o=t).x==l.x&&o.y==l.y)return a;var o,l,u,c,d,h,p,f,m=(c=s,d=(u=t).x-c.x,h=c.y-u.y,p=Math.atan2(h,d),(f=Math.round(180*p/Math.PI))<0&&(f=360-Math.abs(f)),f);return m<=45&&m>=0?e:m<=360&&m>=315?e:m>=135&&m<=225?i:m>45&&m<135?r:n}function Ot(){var t=new Date;return t.getTime()}this.enable=function(){return this.disable(),F.bind(k,et),F.bind(M,rt),F},this.disable=function(){return ot(),F},this.destroy=function(){ot(),F.data(C,null),F=null},this.option=function(e,i){if("object"==typeof e)I=t.extend(I,e);else if(void 0!==I[e]){if(void 0===i)return I[e];I[e]=i}else{if(!e)return I;t.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}(this,S),I.data(C,D))})}.apply(this,arguments);return I},t.fn.swipe.version="1.6.18",t.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},t.fn.swipe.phases={PHASE_START:y,PHASE_MOVE:w,PHASE_END:b,PHASE_CANCEL:x},t.fn.swipe.directions={LEFT:e,RIGHT:i,UP:n,DOWN:r,IN:s,OUT:o},t.fn.swipe.pageScroll={NONE:a,HORIZONTAL:f,VERTICAL:m,AUTO:l},t.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:g}}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Swiper=e()}(this,function(){"use strict";var t="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,e="undefined"==typeof window?{document:t,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,i=function(t){for(var e=0;e<t.length;e+=1)this[e]=t[e];return this.length=t.length,this};function n(n,r){var s=[],o=0;if(n&&!r&&n instanceof i)return n;if(n)if("string"==typeof n){var a,l,u=n.trim();if(u.indexOf("<")>=0&&u.indexOf(">")>=0){var c="div";for(0===u.indexOf("<li")&&(c="ul"),0===u.indexOf("<tr")&&(c="tbody"),0!==u.indexOf("<td")&&0!==u.indexOf("<th")||(c="tr"),0===u.indexOf("<tbody")&&(c="table"),0===u.indexOf("<option")&&(c="select"),(l=t.createElement(c)).innerHTML=u,o=0;o<l.childNodes.length;o+=1)s.push(l.childNodes[o])}else for(a=r||"#"!==n[0]||n.match(/[ .<>:~]/)?(r||t).querySelectorAll(n.trim()):[t.getElementById(n.trim().split("#")[1])],o=0;o<a.length;o+=1)a[o]&&s.push(a[o])}else if(n.nodeType||n===e||n===t)s.push(n);else if(n.length>0&&n[0].nodeType)for(o=0;o<n.length;o+=1)s.push(n[o]);return new i(s)}function r(t){for(var e=[],i=0;i<t.length;i+=1)-1===e.indexOf(t[i])&&e.push(t[i]);return e}n.fn=i.prototype,n.Class=i,n.Dom7=i;"resize scroll".split(" ");var s={addClass:function(t){if(void 0===t)return this;for(var e=t.split(" "),i=0;i<e.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n].classList&&this[n].classList.add(e[i]);return this},removeClass:function(t){for(var e=t.split(" "),i=0;i<e.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n].classList&&this[n].classList.remove(e[i]);return this},hasClass:function(t){return!!this[0]&&this[0].classList.contains(t)},toggleClass:function(t){for(var e=t.split(" "),i=0;i<e.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n].classList&&this[n].classList.toggle(e[i]);return this},attr:function(t,e){var i=arguments;if(1===arguments.length&&"string"==typeof t)return this[0]?this[0].getAttribute(t):void 0;for(var n=0;n<this.length;n+=1)if(2===i.length)this[n].setAttribute(t,e);else for(var r in t)this[n][r]=t[r],this[n].setAttribute(r,t[r]);return this},removeAttr:function(t){for(var e=0;e<this.length;e+=1)this[e].removeAttribute(t);return this},data:function(t,e){var i;if(void 0!==e){for(var n=0;n<this.length;n+=1)(i=this[n]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[t]=e;return this}if(i=this[0]){if(i.dom7ElementDataStorage&&t in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[t];var r=i.getAttribute("data-"+t);return r||void 0}},transform:function(t){for(var e=0;e<this.length;e+=1){var i=this[e].style;i.webkitTransform=t,i.transform=t}return this},transition:function(t){"string"!=typeof t&&(t+="ms");for(var e=0;e<this.length;e+=1){var i=this[e].style;i.webkitTransitionDuration=t,i.transitionDuration=t}return this},on:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i,r=t[0],s=t[1],o=t[2],a=t[3];function l(t){var e=t.target;if(e){var i=t.target.dom7EventData||[];if(i.unshift(t),n(e).is(s))o.apply(e,i);else for(var r=n(e).parents(),a=0;a<r.length;a+=1)n(r[a]).is(s)&&o.apply(r[a],i)}}function u(t){var e=t&&t.target&&t.target.dom7EventData||[];e.unshift(t),o.apply(this,e)}"function"==typeof t[1]&&(r=(i=t)[0],o=i[1],a=i[2],s=void 0),a||(a=!1);for(var c,d=r.split(" "),h=0;h<this.length;h+=1){var p=this[h];if(s)for(c=0;c<d.length;c+=1)p.dom7LiveListeners||(p.dom7LiveListeners=[]),p.dom7LiveListeners.push({type:r,listener:o,proxyListener:l}),p.addEventListener(d[c],l,a);else for(c=0;c<d.length;c+=1)p.dom7Listeners||(p.dom7Listeners=[]),p.dom7Listeners.push({type:r,listener:o,proxyListener:u}),p.addEventListener(d[c],u,a)}return this},off:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i,n=t[0],r=t[1],s=t[2],o=t[3];"function"==typeof t[1]&&(n=(i=t)[0],s=i[1],o=i[2],r=void 0),o||(o=!1);for(var a=n.split(" "),l=0;l<a.length;l+=1)for(var u=0;u<this.length;u+=1){var c=this[u];if(r){if(c.dom7LiveListeners)for(var d=0;d<c.dom7LiveListeners.length;d+=1)s?c.dom7LiveListeners[d].listener===s&&c.removeEventListener(a[l],c.dom7LiveListeners[d].proxyListener,o):c.dom7LiveListeners[d].type===a[l]&&c.removeEventListener(a[l],c.dom7LiveListeners[d].proxyListener,o)}else if(c.dom7Listeners)for(var h=0;h<c.dom7Listeners.length;h+=1)s?c.dom7Listeners[h].listener===s&&c.removeEventListener(a[l],c.dom7Listeners[h].proxyListener,o):c.dom7Listeners[h].type===a[l]&&c.removeEventListener(a[l],c.dom7Listeners[h].proxyListener,o)}return this},trigger:function(){for(var i=[],n=arguments.length;n--;)i[n]=arguments[n];for(var r=i[0].split(" "),s=i[1],o=0;o<r.length;o+=1)for(var a=0;a<this.length;a+=1){var l=void 0;try{l=new e.CustomEvent(r[o],{detail:s,bubbles:!0,cancelable:!0})}catch(e){(l=t.createEvent("Event")).initEvent(r[o],!0,!0),l.detail=s}this[a].dom7EventData=i.filter(function(t,e){return e>0}),this[a].dispatchEvent(l),this[a].dom7EventData=[],delete this[a].dom7EventData}return this},transitionEnd:function(t){var e,i=["webkitTransitionEnd","transitionend"],n=this;function r(s){if(s.target===this)for(t.call(this,s),e=0;e<i.length;e+=1)n.off(i[e],r)}if(t)for(e=0;e<i.length;e+=1)n.on(i[e],r);return this},outerWidth:function(t){if(this.length>0){if(t){var e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(t){if(this.length>0){if(t){var e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){var i=this[0],n=i.getBoundingClientRect(),r=t.body,s=i.clientTop||r.clientTop||0,o=i.clientLeft||r.clientLeft||0,a=i===e?e.scrollY:i.scrollTop,l=i===e?e.scrollX:i.scrollLeft;return{top:n.top+a-s,left:n.left+l-o}}return null},css:function(t,i){var n;if(1===arguments.length){if("string"!=typeof t){for(n=0;n<this.length;n+=1)for(var r in t)this[n].style[r]=t[r];return this}if(this[0])return e.getComputedStyle(this[0],null).getPropertyValue(t)}if(2===arguments.length&&"string"==typeof t){for(n=0;n<this.length;n+=1)this[n].style[t]=i;return this}return this},each:function(t){if(!t)return this;for(var e=0;e<this.length;e+=1)if(!1===t.call(this[e],e,this[e]))return this;return this},html:function(t){if(void 0===t)return this[0]?this[0].innerHTML:void 0;for(var e=0;e<this.length;e+=1)this[e].innerHTML=t;return this},text:function(t){if(void 0===t)return this[0]?this[0].textContent.trim():null;for(var e=0;e<this.length;e+=1)this[e].textContent=t;return this},is:function(r){var s,o,a=this[0];if(!a||void 0===r)return!1;if("string"==typeof r){if(a.matches)return a.matches(r);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(r);if(a.msMatchesSelector)return a.msMatchesSelector(r);for(s=n(r),o=0;o<s.length;o+=1)if(s[o]===a)return!0;return!1}if(r===t)return a===t;if(r===e)return a===e;if(r.nodeType||r instanceof i){for(s=r.nodeType?[r]:r,o=0;o<s.length;o+=1)if(s[o]===a)return!0;return!1}return!1},index:function(){var t,e=this[0];if(e){for(t=0;null!==(e=e.previousSibling);)1===e.nodeType&&(t+=1);return t}},eq:function(t){if(void 0===t)return this;var e,n=this.length;return new i(t>n-1?[]:t<0?(e=n+t)<0?[]:[this[e]]:[this[t]])},append:function(){for(var e,n=[],r=arguments.length;r--;)n[r]=arguments[r];for(var s=0;s<n.length;s+=1){e=n[s];for(var o=0;o<this.length;o+=1)if("string"==typeof e){var a=t.createElement("div");for(a.innerHTML=e;a.firstChild;)this[o].appendChild(a.firstChild)}else if(e instanceof i)for(var l=0;l<e.length;l+=1)this[o].appendChild(e[l]);else this[o].appendChild(e)}return this},prepend:function(e){var n,r;for(n=0;n<this.length;n+=1)if("string"==typeof e){var s=t.createElement("div");for(s.innerHTML=e,r=s.childNodes.length-1;r>=0;r-=1)this[n].insertBefore(s.childNodes[r],this[n].childNodes[0])}else if(e instanceof i)for(r=0;r<e.length;r+=1)this[n].insertBefore(e[r],this[n].childNodes[0]);else this[n].insertBefore(e,this[n].childNodes[0]);return this},next:function(t){return this.length>0?t?this[0].nextElementSibling&&n(this[0].nextElementSibling).is(t)?new i([this[0].nextElementSibling]):new i([]):this[0].nextElementSibling?new i([this[0].nextElementSibling]):new i([]):new i([])},nextAll:function(t){var e=[],r=this[0];if(!r)return new i([]);for(;r.nextElementSibling;){var s=r.nextElementSibling;t?n(s).is(t)&&e.push(s):e.push(s),r=s}return new i(e)},prev:function(t){if(this.length>0){var e=this[0];return t?e.previousElementSibling&&n(e.previousElementSibling).is(t)?new i([e.previousElementSibling]):new i([]):e.previousElementSibling?new i([e.previousElementSibling]):new i([])}return new i([])},prevAll:function(t){var e=[],r=this[0];if(!r)return new i([]);for(;r.previousElementSibling;){var s=r.previousElementSibling;t?n(s).is(t)&&e.push(s):e.push(s),r=s}return new i(e)},parent:function(t){for(var e=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(t?n(this[i].parentNode).is(t)&&e.push(this[i].parentNode):e.push(this[i].parentNode));return n(r(e))},parents:function(t){for(var e=[],i=0;i<this.length;i+=1)for(var s=this[i].parentNode;s;)t?n(s).is(t)&&e.push(s):e.push(s),s=s.parentNode;return n(r(e))},closest:function(t){var e=this;return void 0===t?new i([]):(e.is(t)||(e=e.parents(t).eq(0)),e)},find:function(t){for(var e=[],n=0;n<this.length;n+=1)for(var r=this[n].querySelectorAll(t),s=0;s<r.length;s+=1)e.push(r[s]);return new i(e)},children:function(t){for(var e=[],s=0;s<this.length;s+=1)for(var o=this[s].childNodes,a=0;a<o.length;a+=1)t?1===o[a].nodeType&&n(o[a]).is(t)&&e.push(o[a]):1===o[a].nodeType&&e.push(o[a]);return new i(r(e))},remove:function(){for(var t=0;t<this.length;t+=1)this[t].parentNode&&this[t].parentNode.removeChild(this[t]);return this},add:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i,r;for(i=0;i<t.length;i+=1){var s=n(t[i]);for(r=0;r<s.length;r+=1)this[this.length]=s[r],this.length+=1}return this},styles:function(){return this[0]?e.getComputedStyle(this[0],null):{}}};Object.keys(s).forEach(function(t){n.fn[t]=s[t]});var o,a,l,u={deleteProps:function(t){var e=t;Object.keys(e).forEach(function(t){try{e[t]=null}catch(t){}try{delete e[t]}catch(t){}})},nextTick:function(t,e){return void 0===e&&(e=0),setTimeout(t,e)},now:function(){return Date.now()},getTranslate:function(t,i){var n,r,s;void 0===i&&(i="x");var o=e.getComputedStyle(t,null);return e.WebKitCSSMatrix?((r=o.transform||o.webkitTransform).split(",").length>6&&(r=r.split(", ").map(function(t){return t.replace(",",".")}).join(", ")),s=new e.WebKitCSSMatrix("none"===r?"":r)):n=(s=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===i&&(r=e.WebKitCSSMatrix?s.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===i&&(r=e.WebKitCSSMatrix?s.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),r||0},parseUrlQuery:function(t){var i,n,r,s,o={},a=t||e.location.href;if("string"==typeof a&&a.length)for(s=(n=(a=a.indexOf("?")>-1?a.replace(/\S*\?/,""):"").split("&").filter(function(t){return""!==t})).length,i=0;i<s;i+=1)r=n[i].replace(/#\S+/g,"").split("="),o[decodeURIComponent(r[0])]=void 0===r[1]?void 0:decodeURIComponent(r[1])||"";return o},isObject:function(t){return"object"==typeof t&&null!==t&&t.constructor&&t.constructor===Object},extend:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var i=Object(t[0]),n=1;n<t.length;n+=1){var r=t[n];if(null!=r)for(var s=Object.keys(Object(r)),o=0,a=s.length;o<a;o+=1){var l=s[o],c=Object.getOwnPropertyDescriptor(r,l);void 0!==c&&c.enumerable&&(u.isObject(i[l])&&u.isObject(r[l])?u.extend(i[l],r[l]):!u.isObject(i[l])&&u.isObject(r[l])?(i[l]={},u.extend(i[l],r[l])):i[l]=r[l])}}return i}},c=(l=t.createElement("div"),{touch:e.Modernizr&&!0===e.Modernizr.touch||!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!(!e.navigator.pointerEnabled&&!e.PointerEvent),prefixedPointerEvents:!!e.navigator.msPointerEnabled,transition:(a=l.style,"transition"in a||"webkitTransition"in a||"MozTransition"in a),transforms3d:e.Modernizr&&!0===e.Modernizr.csstransforms3d||(o=l.style,"webkitPerspective"in o||"MozPerspective"in o||"OPerspective"in o||"MsPerspective"in o||"perspective"in o),flexbox:function(){for(var t=l.style,e="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<e.length;i+=1)if(e[i]in t)return!0;return!1}(),observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var i=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,i)}catch(t){}return t}(),gestures:"ongesturestart"in e}),d=function(t){void 0===t&&(t={});var e=this;e.params=t,e.eventsListeners={},e.params&&e.params.on&&Object.keys(e.params.on).forEach(function(t){e.on(t,e.params.on[t])})},h={components:{configurable:!0}};d.prototype.on=function(t,e){var i=this;return"function"!=typeof e?i:(t.split(" ").forEach(function(t){i.eventsListeners[t]||(i.eventsListeners[t]=[]),i.eventsListeners[t].push(e)}),i)},d.prototype.once=function(t,e){var i=this;if("function"!=typeof e)return i;return i.on(t,function n(){for(var r=[],s=arguments.length;s--;)r[s]=arguments[s];e.apply(i,r),i.off(t,n)})},d.prototype.off=function(t,e){var i=this;return t.split(" ").forEach(function(t){void 0===e?i.eventsListeners[t]=[]:i.eventsListeners[t].forEach(function(n,r){n===e&&i.eventsListeners[t].splice(r,1)})}),i},d.prototype.emit=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i,n,r,s=this;return s.eventsListeners?("string"==typeof t[0]||Array.isArray(t[0])?(i=t[0],n=t.slice(1,t.length),r=s):(i=t[0].events,n=t[0].data,r=t[0].context||s),(Array.isArray(i)?i:i.split(" ")).forEach(function(t){if(s.eventsListeners[t]){var e=[];s.eventsListeners[t].forEach(function(t){e.push(t)}),e.forEach(function(t){t.apply(r,n)})}}),s):s},d.prototype.useModulesParams=function(t){var e=this;e.modules&&Object.keys(e.modules).forEach(function(i){var n=e.modules[i];n.params&&u.extend(t,n.params)})},d.prototype.useModules=function(t){void 0===t&&(t={});var e=this;e.modules&&Object.keys(e.modules).forEach(function(i){var n=e.modules[i],r=t[i]||{};n.instance&&Object.keys(n.instance).forEach(function(t){var i=n.instance[t];e[t]="function"==typeof i?i.bind(e):i}),n.on&&e.on&&Object.keys(n.on).forEach(function(t){e.on(t,n.on[t])}),n.create&&n.create.bind(e)(r)})},h.components.set=function(t){this.use&&this.use(t)},d.installModule=function(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var r=t.name||Object.keys(n.prototype.modules).length+"_"+u.now();return n.prototype.modules[r]=t,t.proto&&Object.keys(t.proto).forEach(function(e){n.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){n[e]=t.static[e]}),t.install&&t.install.apply(n,e),n},d.use=function(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];var n=this;return Array.isArray(t)?(t.forEach(function(t){return n.installModule(t)}),n):n.installModule.apply(n,[t].concat(e))},Object.defineProperties(d,h);var p={updateSize:function(){var t,e,i=this.$el;t=void 0!==this.params.width?this.params.width:i[0].clientWidth,e=void 0!==this.params.height?this.params.height:i[0].clientHeight,0===t&&this.isHorizontal()||0===e&&this.isVertical()||(t=t-parseInt(i.css("padding-left"),10)-parseInt(i.css("padding-right"),10),e=e-parseInt(i.css("padding-top"),10)-parseInt(i.css("padding-bottom"),10),u.extend(this,{width:t,height:e,size:this.isHorizontal()?t:e}))},updateSlides:function(){var t=this,e=t.params,i=t.$wrapperEl,n=t.size,r=t.rtl,s=t.wrongRTL,o=i.children("."+t.params.slideClass),a=t.virtual&&e.virtual.enabled?t.virtual.slides.length:o.length,l=[],d=[],h=[],p=e.slidesOffsetBefore;"function"==typeof p&&(p=e.slidesOffsetBefore.call(t));var f=e.slidesOffsetAfter;"function"==typeof f&&(f=e.slidesOffsetAfter.call(t));var m=a,g=t.snapGrid.length,v=t.snapGrid.length,y=e.spaceBetween,w=-p,b=0,x=0;if(void 0!==n){var _,E;"string"==typeof y&&y.indexOf("%")>=0&&(y=parseFloat(y.replace("%",""))/100*n),t.virtualSize=-y,r?o.css({marginLeft:"",marginTop:""}):o.css({marginRight:"",marginBottom:""}),e.slidesPerColumn>1&&(_=Math.floor(a/e.slidesPerColumn)===a/t.params.slidesPerColumn?a:Math.ceil(a/e.slidesPerColumn)*e.slidesPerColumn,"auto"!==e.slidesPerView&&"row"===e.slidesPerColumnFill&&(_=Math.max(_,e.slidesPerView*e.slidesPerColumn)));for(var T,C=e.slidesPerColumn,S=_/C,I=S-(e.slidesPerColumn*S-a),D=0;D<a;D+=1){E=0;var k=o.eq(D);if(e.slidesPerColumn>1){var A=void 0,L=void 0,O=void 0;"column"===e.slidesPerColumnFill?(O=D-(L=Math.floor(D/C))*C,(L>I||L===I&&O===C-1)&&(O+=1)>=C&&(O=0,L+=1),A=L+O*_/C,k.css({"-webkit-box-ordinal-group":A,"-moz-box-ordinal-group":A,"-ms-flex-order":A,"-webkit-order":A,order:A})):L=D-(O=Math.floor(D/S))*S,k.css("margin-"+(t.isHorizontal()?"top":"left"),0!==O&&e.spaceBetween&&e.spaceBetween+"px").attr("data-swiper-column",L).attr("data-swiper-row",O)}"none"!==k.css("display")&&("auto"===e.slidesPerView?(E=t.isHorizontal()?k.outerWidth(!0):k.outerHeight(!0),e.roundLengths&&(E=Math.floor(E))):(E=(n-(e.slidesPerView-1)*y)/e.slidesPerView,e.roundLengths&&(E=Math.floor(E)),o[D]&&(t.isHorizontal()?o[D].style.width=E+"px":o[D].style.height=E+"px")),o[D]&&(o[D].swiperSlideSize=E),h.push(E),e.centeredSlides?(w=w+E/2+b/2+y,0===b&&0!==D&&(w=w-n/2-y),0===D&&(w=w-n/2-y),Math.abs(w)<.001&&(w=0),x%e.slidesPerGroup==0&&l.push(w),d.push(w)):(x%e.slidesPerGroup==0&&l.push(w),d.push(w),w=w+E+y),t.virtualSize+=E+y,b=E,x+=1)}if(t.virtualSize=Math.max(t.virtualSize,n)+f,r&&s&&("slide"===e.effect||"coverflow"===e.effect)&&i.css({width:t.virtualSize+e.spaceBetween+"px"}),c.flexbox&&!e.setWrapperSize||(t.isHorizontal()?i.css({width:t.virtualSize+e.spaceBetween+"px"}):i.css({height:t.virtualSize+e.spaceBetween+"px"})),e.slidesPerColumn>1&&(t.virtualSize=(E+e.spaceBetween)*_,t.virtualSize=Math.ceil(t.virtualSize/e.slidesPerColumn)-e.spaceBetween,t.isHorizontal()?i.css({width:t.virtualSize+e.spaceBetween+"px"}):i.css({height:t.virtualSize+e.spaceBetween+"px"}),e.centeredSlides)){T=[];for(var M=0;M<l.length;M+=1)l[M]<t.virtualSize+l[0]&&T.push(l[M]);l=T}if(!e.centeredSlides){T=[];for(var P=0;P<l.length;P+=1)l[P]<=t.virtualSize-n&&T.push(l[P]);l=T,Math.floor(t.virtualSize-n)-Math.floor(l[l.length-1])>1&&l.push(t.virtualSize-n)}0===l.length&&(l=[0]),0!==e.spaceBetween&&(t.isHorizontal()?r?o.css({marginLeft:y+"px"}):o.css({marginRight:y+"px"}):o.css({marginBottom:y+"px"})),u.extend(t,{slides:o,snapGrid:l,slidesGrid:d,slidesSizesGrid:h}),a!==m&&t.emit("slidesLengthChange"),l.length!==g&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),d.length!==v&&t.emit("slidesGridLengthChange"),(e.watchSlidesProgress||e.watchSlidesVisibility)&&t.updateSlidesOffset()}},updateAutoHeight:function(){var t,e=[],i=0;if("auto"!==this.params.slidesPerView&&this.params.slidesPerView>1)for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var n=this.activeIndex+t;if(n>this.slides.length)break;e.push(this.slides.eq(n)[0])}else e.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<e.length;t+=1)if(void 0!==e[t]){var r=e[t].offsetHeight;i=r>i?r:i}i&&this.$wrapperEl.css("height",i+"px")},updateSlidesOffset:function(){for(var t=this.slides,e=0;e<t.length;e+=1)t[e].swiperSlideOffset=this.isHorizontal()?t[e].offsetLeft:t[e].offsetTop},updateSlidesProgress:function(t){void 0===t&&(t=this.translate||0);var e=this.params,i=this.slides,n=this.rtl;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var r=-t;n&&(r=t),i.removeClass(e.slideVisibleClass);for(var s=0;s<i.length;s+=1){var o=i[s],a=(r+(e.centeredSlides?this.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+e.spaceBetween);if(e.watchSlidesVisibility){var l=-(r-o.swiperSlideOffset),u=l+this.slidesSizesGrid[s];(l>=0&&l<this.size||u>0&&u<=this.size||l<=0&&u>=this.size)&&i.eq(s).addClass(e.slideVisibleClass)}o.progress=n?-a:a}}},updateProgress:function(t){void 0===t&&(t=this.translate||0);var e=this,i=e.params,n=e.maxTranslate()-e.minTranslate(),r=e.progress,s=e.isBeginning,o=e.isEnd,a=s,l=o;0===n?(r=0,s=!0,o=!0):(s=(r=(t-e.minTranslate())/n)<=0,o=r>=1),u.extend(e,{progress:r,isBeginning:s,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility)&&e.updateSlidesProgress(t),s&&!a&&e.emit("reachBeginning toEdge"),o&&!l&&e.emit("reachEnd toEdge"),(a&&!s||l&&!o)&&e.emit("fromEdge"),e.emit("progress",r)},updateSlidesClasses:function(){var t,e=this.slides,i=this.params,n=this.$wrapperEl,r=this.activeIndex,s=this.realIndex,o=this.virtual&&i.virtual.enabled;e.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(t=o?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+r+'"]'):e.eq(r)).addClass(i.slideActiveClass),i.loop&&(t.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass));var a=t.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===a.length&&(a=e.eq(0)).addClass(i.slideNextClass);var l=t.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=e.eq(-1)).addClass(i.slidePrevClass),i.loop&&(a.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+a.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(t){var e,i=this,n=i.rtl?i.translate:-i.translate,r=i.slidesGrid,s=i.snapGrid,o=i.params,a=i.activeIndex,l=i.realIndex,c=i.snapIndex,d=t;if(void 0===d){for(var h=0;h<r.length;h+=1)void 0!==r[h+1]?n>=r[h]&&n<r[h+1]-(r[h+1]-r[h])/2?d=h:n>=r[h]&&n<r[h+1]&&(d=h+1):n>=r[h]&&(d=h);o.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if((e=s.indexOf(n)>=0?s.indexOf(n):Math.floor(d/o.slidesPerGroup))>=s.length&&(e=s.length-1),d!==a){var p=parseInt(i.slides.eq(d).attr("data-swiper-slide-index")||d,10);u.extend(i,{snapIndex:e,realIndex:p,previousIndex:a,activeIndex:d}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==p&&i.emit("realIndexChange"),i.emit("slideChange")}else e!==c&&(i.snapIndex=e,i.emit("snapIndexChange"))},updateClickedSlide:function(t){var e=this,i=e.params,r=n(t.target).closest("."+i.slideClass)[0],s=!1;if(r)for(var o=0;o<e.slides.length;o+=1)e.slides[o]===r&&(s=!0);if(!r||!s)return e.clickedSlide=void 0,void(e.clickedIndex=void 0);e.clickedSlide=r,e.virtual&&e.params.virtual.enabled?e.clickedIndex=parseInt(n(r).attr("data-swiper-slide-index"),10):e.clickedIndex=n(r).index(),i.slideToClickedSlide&&void 0!==e.clickedIndex&&e.clickedIndex!==e.activeIndex&&e.slideToClickedSlide()}},f={getTranslate:function(t){void 0===t&&(t=this.isHorizontal()?"x":"y");var e=this.params,i=this.rtl,n=this.translate,r=this.$wrapperEl;if(e.virtualTranslate)return i?-n:n;var s=u.getTranslate(r[0],t);return i&&(s=-s),s||0},setTranslate:function(t,e){var i=this,n=i.rtl,r=i.params,s=i.$wrapperEl,o=i.progress,a=0,l=0;i.isHorizontal()?a=n?-t:t:l=t,r.roundLengths&&(a=Math.floor(a),l=Math.floor(l)),r.virtualTranslate||(c.transforms3d?s.transform("translate3d("+a+"px, "+l+"px, 0px)"):s.transform("translate("+a+"px, "+l+"px)")),i.translate=i.isHorizontal()?a:l;var u=i.maxTranslate()-i.minTranslate();(0===u?0:(t-i.minTranslate())/u)!==o&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}},m={setTransition:function(t,e){this.$wrapperEl.transition(t),this.emit("setTransition",t,e)},transitionStart:function(t,e){void 0===t&&(t=!0);var i=this.activeIndex,n=this.params,r=this.previousIndex;n.autoHeight&&this.updateAutoHeight();var s=e;if(s||(s=i>r?"next":i<r?"prev":"reset"),this.emit("transitionStart"),t&&i!==r){if("reset"===s)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===s?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}},transitionEnd:function(t,e){void 0===t&&(t=!0);var i=this.activeIndex,n=this.previousIndex;this.animating=!1,this.setTransition(0);var r=e;if(r||(r=i>n?"next":i<n?"prev":"reset"),this.emit("transitionEnd"),t&&i!==n){if("reset"===r)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===r?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}},g={slideTo:function(t,e,i,n){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0);var r=this,s=t;s<0&&(s=0);var o=r.params,a=r.snapGrid,l=r.slidesGrid,u=r.previousIndex,d=r.activeIndex,h=r.rtl,p=r.$wrapperEl;if(r.animating&&o.preventIntercationOnTransition)return!1;var f=Math.floor(s/o.slidesPerGroup);f>=a.length&&(f=a.length-1),(d||o.initialSlide||0)===(u||0)&&i&&r.emit("beforeSlideChangeStart");var m,g=-a[f];if(r.updateProgress(g),o.normalizeSlideIndex)for(var v=0;v<l.length;v+=1)-Math.floor(100*g)>=Math.floor(100*l[v])&&(s=v);if(r.initialized&&s!==d){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(d||0)!==s)return!1}return m=s>d?"next":s<d?"prev":"reset",h&&-g===r.translate||!h&&g===r.translate?(r.updateActiveIndex(s),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(g),"reset"!==m&&(r.transitionStart(i,m),r.transitionEnd(i,m)),!1):(0!==e&&c.transition?(r.setTransition(e),r.setTranslate(g),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,n),r.transitionStart(i,m),r.animating||(r.animating=!0,p.transitionEnd(function(){r&&!r.destroyed&&r.transitionEnd(i,m)}))):(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,n),r.transitionStart(i,m),r.transitionEnd(i,m)),!0)},slideToLoop:function(t,e,i,n){void 0===t&&(t=0),void 0===e&&(e=this.params.speed),void 0===i&&(i=!0);var r=t;return this.params.loop&&(r+=this.loopedSlides),this.slideTo(r,e,i,n)},slideNext:function(t,e,i){void 0===t&&(t=this.params.speed),void 0===e&&(e=!0);var n=this.params,r=this.animating;return n.loop?!r&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,this.slideTo(this.activeIndex+n.slidesPerGroup,t,e,i)):this.slideTo(this.activeIndex+n.slidesPerGroup,t,e,i)},slidePrev:function(t,e,i){void 0===t&&(t=this.params.speed),void 0===e&&(e=!0);var n=this.params,r=this.animating;return n.loop?!r&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,this.slideTo(this.activeIndex-1,t,e,i)):this.slideTo(this.activeIndex-1,t,e,i)},slideReset:function(t,e,i){void 0===t&&(t=this.params.speed),void 0===e&&(e=!0);return this.slideTo(this.activeIndex,t,e,i)},slideToClickedSlide:function(){var t,e=this,i=e.params,r=e.$wrapperEl,s="auto"===i.slidesPerView?e.slidesPerViewDynamic():i.slidesPerView,o=e.clickedIndex;if(i.loop){if(e.animating)return;t=parseInt(n(e.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?o<e.loopedSlides-s/2||o>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),o=r.children("."+i.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),u.nextTick(function(){e.slideTo(o)})):e.slideTo(o):o>e.slides.length-s?(e.loopFix(),o=r.children("."+i.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),u.nextTick(function(){e.slideTo(o)})):e.slideTo(o)}else e.slideTo(o)}},v={loopCreate:function(){var e=this,i=e.params,r=e.$wrapperEl;r.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var s=r.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var o=i.slidesPerGroup-s.length%i.slidesPerGroup;if(o!==i.slidesPerGroup){for(var a=0;a<o;a+=1){var l=n(t.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);r.append(l)}s=r.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=s.length),e.loopedSlides=parseInt(i.loopedSlides||i.slidesPerView,10),e.loopedSlides+=i.loopAdditionalSlides,e.loopedSlides>s.length&&(e.loopedSlides=s.length);var u=[],c=[];s.each(function(t,i){var r=n(i);t<e.loopedSlides&&c.push(i),t<s.length&&t>=s.length-e.loopedSlides&&u.push(i),r.attr("data-swiper-slide-index",t)});for(var d=0;d<c.length;d+=1)r.append(n(c[d].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var h=u.length-1;h>=0;h-=1)r.prepend(n(u[h].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){var t,e=this,i=e.params,n=e.activeIndex,r=e.slides,s=e.loopedSlides,o=e.allowSlidePrev,a=e.allowSlideNext,l=e.snapGrid,u=e.rtl;e.allowSlidePrev=!0,e.allowSlideNext=!0;var c=-l[n]-e.getTranslate();n<s?(t=r.length-3*s+n,t+=s,e.slideTo(t,0,!1,!0)&&0!==c&&e.setTranslate((u?-e.translate:e.translate)-c)):("auto"===i.slidesPerView&&n>=2*s||n>r.length-2*i.slidesPerView)&&(t=-r.length+n+s,t+=s,e.slideTo(t,0,!1,!0)&&0!==c&&e.setTranslate((u?-e.translate:e.translate)-c));e.allowSlidePrev=o,e.allowSlideNext=a},loopDestroy:function(){var t=this.$wrapperEl,e=this.params,i=this.slides;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove(),i.removeAttr("data-swiper-slide-index")}},y={setGrabCursor:function(t){if(!c.touch&&this.params.simulateTouch){var e=this.el;e.style.cursor="move",e.style.cursor=t?"-webkit-grabbing":"-webkit-grab",e.style.cursor=t?"-moz-grabbin":"-moz-grab",e.style.cursor=t?"grabbing":"grab"}},unsetGrabCursor:function(){c.touch||(this.el.style.cursor="")}},w={appendSlide:function(t){var e=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof t&&"length"in t)for(var n=0;n<t.length;n+=1)t[n]&&e.append(t[n]);else e.append(t);i.loop&&this.loopCreate(),i.observer&&c.observer||this.update()},prependSlide:function(t){var e=this.params,i=this.$wrapperEl,n=this.activeIndex;e.loop&&this.loopDestroy();var r=n+1;if("object"==typeof t&&"length"in t){for(var s=0;s<t.length;s+=1)t[s]&&i.prepend(t[s]);r=n+t.length}else i.prepend(t);e.loop&&this.loopCreate(),e.observer&&c.observer||this.update(),this.slideTo(r,0,!1)},removeSlide:function(t){var e=this,i=e.params,n=e.$wrapperEl,r=e.activeIndex;i.loop&&(e.loopDestroy(),e.slides=n.children("."+i.slideClass));var s,o=r;if("object"==typeof t&&"length"in t){for(var a=0;a<t.length;a+=1)s=t[a],e.slides[s]&&e.slides.eq(s).remove(),s<o&&(o-=1);o=Math.max(o,0)}else s=t,e.slides[s]&&e.slides.eq(s).remove(),s<o&&(o-=1),o=Math.max(o,0);i.loop&&e.loopCreate(),i.observer&&c.observer||e.update(),i.loop?e.slideTo(o+e.loopedSlides,0,!1):e.slideTo(o,0,!1)},removeAllSlides:function(){for(var t=[],e=0;e<this.slides.length;e+=1)t.push(e);this.removeSlide(t)}},b=function(){var i=e.navigator.userAgent,n={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:e.cordova||e.phonegap,phonegap:e.cordova||e.phonegap},r=i.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),s=i.match(/(Android);?[\s\/]+([\d.]+)?/),o=i.match(/(iPad).*OS\s([\d_]+)/),a=i.match(/(iPod)(.*OS\s([\d_]+))?/),l=!o&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(r&&(n.os="windows",n.osVersion=r[2],n.windows=!0),s&&!r&&(n.os="android",n.osVersion=s[2],n.android=!0,n.androidChrome=i.toLowerCase().indexOf("chrome")>=0),(o||l||a)&&(n.os="ios",n.ios=!0),l&&!a&&(n.osVersion=l[2].replace(/_/g,"."),n.iphone=!0),o&&(n.osVersion=o[2].replace(/_/g,"."),n.ipad=!0),a&&(n.osVersion=a[3]?a[3].replace(/_/g,"."):null,n.iphone=!0),n.ios&&n.osVersion&&i.indexOf("Version/")>=0&&"10"===n.osVersion.split(".")[0]&&(n.osVersion=i.toLowerCase().split("version/")[1].split(" ")[0]),n.desktop=!(n.os||n.android||n.webView),n.webView=(l||o||a)&&i.match(/.*AppleWebKit(?!.*Safari)/i),n.os&&"ios"===n.os){var u=n.osVersion.split("."),c=t.querySelector('meta[name="viewport"]');n.minimalUi=!n.webView&&(a||l)&&(1*u[0]==7?1*u[1]>=1:1*u[0]>7)&&c&&c.getAttribute("content").indexOf("minimal-ui")>=0}return n.pixelRatio=e.devicePixelRatio||1,n}(),x=function(i){var r=this,s=r.touchEventsData,o=r.params,a=r.touches;if(!r.animating||!o.preventIntercationOnTransition){var l=i;if(l.originalEvent&&(l=l.originalEvent),s.isTouchEvent="touchstart"===l.type,(s.isTouchEvent||!("which"in l)||3!==l.which)&&(!s.isTouched||!s.isMoved))if(o.noSwiping&&n(l.target).closest(o.noSwipingSelector?o.noSwipingSelector:"."+o.noSwipingClass)[0])r.allowClick=!0;else if(!o.swipeHandler||n(l).closest(o.swipeHandler)[0]){a.currentX="touchstart"===l.type?l.targetTouches[0].pageX:l.pageX,a.currentY="touchstart"===l.type?l.targetTouches[0].pageY:l.pageY;var c=a.currentX,d=a.currentY;if(!(b.ios&&!b.cordova&&o.iOSEdgeSwipeDetection&&c<=o.iOSEdgeSwipeThreshold&&c>=e.screen.width-o.iOSEdgeSwipeThreshold)){if(u.extend(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=c,a.startY=d,s.touchStartTime=u.now(),r.allowClick=!0,r.updateSize(),r.swipeDirection=void 0,o.threshold>0&&(s.allowThresholdMove=!1),"touchstart"!==l.type){var h=!0;n(l.target).is(s.formElements)&&(h=!1),t.activeElement&&n(t.activeElement).is(s.formElements)&&t.activeElement!==l.target&&t.activeElement.blur(),h&&r.allowTouchMove&&l.preventDefault()}r.emit("touchStart",l)}}}},_=function(e){var i=this,r=i.touchEventsData,s=i.params,o=i.touches,a=i.rtl,l=e;if(l.originalEvent&&(l=l.originalEvent),r.isTouched){if(!r.isTouchEvent||"mousemove"!==l.type){var c="touchmove"===l.type?l.targetTouches[0].pageX:l.pageX,d="touchmove"===l.type?l.targetTouches[0].pageY:l.pageY;if(l.preventedByNestedSwiper)return o.startX=c,void(o.startY=d);if(!i.allowTouchMove)return i.allowClick=!1,void(r.isTouched&&(u.extend(o,{startX:c,startY:d,currentX:c,currentY:d}),r.touchStartTime=u.now()));if(r.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(i.isVertical()){if(d<o.startY&&i.translate<=i.maxTranslate()||d>o.startY&&i.translate>=i.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(c<o.startX&&i.translate<=i.maxTranslate()||c>o.startX&&i.translate>=i.minTranslate())return;if(r.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&n(l.target).is(r.formElements))return r.isMoved=!0,void(i.allowClick=!1);if(r.allowTouchCallbacks&&i.emit("touchMove",l),!(l.targetTouches&&l.targetTouches.length>1)){o.currentX=c,o.currentY=d;var h,p=o.currentX-o.startX,f=o.currentY-o.startY;if(void 0===r.isScrolling)i.isHorizontal()&&o.currentY===o.startY||i.isVertical()&&o.currentX===o.startX?r.isScrolling=!1:p*p+f*f>=25&&(h=180*Math.atan2(Math.abs(f),Math.abs(p))/Math.PI,r.isScrolling=i.isHorizontal()?h>s.touchAngle:90-h>s.touchAngle);if(r.isScrolling&&i.emit("touchMoveOpposite",l),"undefined"==typeof startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(r.startMoving=!0)),r.isScrolling)r.isTouched=!1;else if(r.startMoving){i.allowClick=!1,l.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&l.stopPropagation(),r.isMoved||(s.loop&&i.loopFix(),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),r.allowMomentumBounce=!1,!s.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",l)),i.emit("sliderMove",l),r.isMoved=!0;var m=i.isHorizontal()?p:f;o.diff=m,m*=s.touchRatio,a&&(m=-m),i.swipeDirection=m>0?"prev":"next",r.currentTranslate=m+r.startTranslate;var g=!0,v=s.resistanceRatio;if(s.touchReleaseOnEdges&&(v=0),m>0&&r.currentTranslate>i.minTranslate()?(g=!1,s.resistance&&(r.currentTranslate=i.minTranslate()-1+Math.pow(-i.minTranslate()+r.startTranslate+m,v))):m<0&&r.currentTranslate<i.maxTranslate()&&(g=!1,s.resistance&&(r.currentTranslate=i.maxTranslate()+1-Math.pow(i.maxTranslate()-r.startTranslate-m,v))),g&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),s.threshold>0){if(!(Math.abs(m)>s.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,r.currentTranslate=r.startTranslate,void(o.diff=i.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}s.followFinger&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(i.updateActiveIndex(),i.updateSlidesClasses()),s.freeMode&&(0===r.velocities.length&&r.velocities.push({position:o[i.isHorizontal()?"startX":"startY"],time:r.touchStartTime}),r.velocities.push({position:o[i.isHorizontal()?"currentX":"currentY"],time:u.now()})),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}}}}else r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",l)},E=function(t){var e=this,i=e.touchEventsData,n=e.params,r=e.touches,s=e.rtl,o=e.$wrapperEl,a=e.slidesGrid,l=e.snapGrid,c=t;if(c.originalEvent&&(c=c.originalEvent),i.allowTouchCallbacks&&e.emit("touchEnd",c),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===e.allowSlideNext||!0===e.allowSlidePrev)&&e.setGrabCursor(!1);var d,h=u.now(),p=h-i.touchStartTime;if(e.allowClick&&(e.updateClickedSlide(c),e.emit("tap",c),p<300&&h-i.lastClickTime>300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),i.clickTimeout=u.nextTick(function(){e&&!e.destroyed&&e.emit("click",c)},300)),p<300&&h-i.lastClickTime<300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),e.emit("doubleTap",c))),i.lastClickTime=u.now(),u.nextTick(function(){e.destroyed||(e.allowClick=!0)}),!i.isTouched||!i.isMoved||!e.swipeDirection||0===r.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,d=n.followFinger?s?e.translate:-e.translate:-i.currentTranslate,n.freeMode){if(d<-e.minTranslate())return void e.slideTo(e.activeIndex);if(d>-e.maxTranslate())return void(e.slides.length<l.length?e.slideTo(l.length-1):e.slideTo(e.slides.length-1));if(n.freeModeMomentum){if(i.velocities.length>1){var f=i.velocities.pop(),m=i.velocities.pop(),g=f.position-m.position,v=f.time-m.time;e.velocity=g/v,e.velocity/=2,Math.abs(e.velocity)<n.freeModeMinimumVelocity&&(e.velocity=0),(v>150||u.now()-f.time>300)&&(e.velocity=0)}else e.velocity=0;e.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var y=1e3*n.freeModeMomentumRatio,w=e.velocity*y,b=e.translate+w;s&&(b=-b);var x,_=!1,E=20*Math.abs(e.velocity)*n.freeModeMomentumBounceRatio;if(b<e.maxTranslate())n.freeModeMomentumBounce?(b+e.maxTranslate()<-E&&(b=e.maxTranslate()-E),x=e.maxTranslate(),_=!0,i.allowMomentumBounce=!0):b=e.maxTranslate();else if(b>e.minTranslate())n.freeModeMomentumBounce?(b-e.minTranslate()>E&&(b=e.minTranslate()+E),x=e.minTranslate(),_=!0,i.allowMomentumBounce=!0):b=e.minTranslate();else if(n.freeModeSticky){for(var T,C=0;C<l.length;C+=1)if(l[C]>-b){T=C;break}b=-(b=Math.abs(l[T]-b)<Math.abs(l[T-1]-b)||"next"===e.swipeDirection?l[T]:l[T-1])}if(0!==e.velocity)y=s?Math.abs((-b-e.translate)/e.velocity):Math.abs((b-e.translate)/e.velocity);else if(n.freeModeSticky)return void e.slideReset();n.freeModeMomentumBounce&&_?(e.updateProgress(x),e.setTransition(y),e.setTranslate(b),e.transitionStart(!0,e.swipeDirection),e.animating=!0,o.transitionEnd(function(){e&&!e.destroyed&&i.allowMomentumBounce&&(e.emit("momentumBounce"),e.setTransition(n.speed),e.setTranslate(x),o.transitionEnd(function(){e&&!e.destroyed&&e.transitionEnd()}))})):e.velocity?(e.updateProgress(b),e.setTransition(y),e.setTranslate(b),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,o.transitionEnd(function(){e&&!e.destroyed&&e.transitionEnd()}))):e.updateProgress(b),e.updateActiveIndex(),e.updateSlidesClasses()}(!n.freeModeMomentum||p>=n.longSwipesMs)&&(e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}else{for(var S=0,I=e.slidesSizesGrid[0],D=0;D<a.length;D+=n.slidesPerGroup)void 0!==a[D+n.slidesPerGroup]?d>=a[D]&&d<a[D+n.slidesPerGroup]&&(S=D,I=a[D+n.slidesPerGroup]-a[D]):d>=a[D]&&(S=D,I=a[a.length-1]-a[a.length-2]);var k=(d-a[S])/I;if(p>n.longSwipesMs){if(!n.longSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&(k>=n.longSwipesRatio?e.slideTo(S+n.slidesPerGroup):e.slideTo(S)),"prev"===e.swipeDirection&&(k>1-n.longSwipesRatio?e.slideTo(S+n.slidesPerGroup):e.slideTo(S))}else{if(!n.shortSwipes)return void e.slideTo(e.activeIndex);"next"===e.swipeDirection&&e.slideTo(S+n.slidesPerGroup),"prev"===e.swipeDirection&&e.slideTo(S)}}},T=function(){var t=this,e=t.params,i=t.el;if(!i||0!==i.offsetWidth){e.breakpoints&&t.setBreakpoint();var n=t.allowSlideNext,r=t.allowSlidePrev;if(t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),e.freeMode){var s=Math.min(Math.max(t.translate,t.maxTranslate()),t.minTranslate());t.setTranslate(s),t.updateActiveIndex(),t.updateSlidesClasses(),e.autoHeight&&t.updateAutoHeight()}else t.updateSlidesClasses(),("auto"===e.slidesPerView||e.slidesPerView>1)&&t.isEnd&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0);t.allowSlidePrev=r,t.allowSlideNext=n}},C=function(t){this.allowClick||(this.params.preventClicks&&t.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(t.stopPropagation(),t.stopImmediatePropagation()))};var S,I={attachEvents:function(){var e=this,i=e.params,n=e.touchEvents,r=e.el,s=e.wrapperEl;e.onTouchStart=x.bind(e),e.onTouchMove=_.bind(e),e.onTouchEnd=E.bind(e),e.onClick=C.bind(e);var o="container"===i.touchEventsTarget?r:s,a=!!i.nested;if(c.touch||!c.pointerEvents&&!c.prefixedPointerEvents){if(c.touch){var l=!("touchstart"!==n.start||!c.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};o.addEventListener(n.start,e.onTouchStart,l),o.addEventListener(n.move,e.onTouchMove,c.passiveListener?{passive:!1,capture:a}:a),o.addEventListener(n.end,e.onTouchEnd,l)}(i.simulateTouch&&!b.ios&&!b.android||i.simulateTouch&&!c.touch&&b.ios)&&(o.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,a),t.addEventListener("mouseup",e.onTouchEnd,!1))}else o.addEventListener(n.start,e.onTouchStart,!1),t.addEventListener(n.move,e.onTouchMove,a),t.addEventListener(n.end,e.onTouchEnd,!1);(i.preventClicks||i.preventClicksPropagation)&&o.addEventListener("click",e.onClick,!0),e.on("resize observerUpdate",T)},detachEvents:function(){var e=this,i=e.params,n=e.touchEvents,r=e.el,s=e.wrapperEl,o="container"===i.touchEventsTarget?r:s,a=!!i.nested;if(c.touch||!c.pointerEvents&&!c.prefixedPointerEvents){if(c.touch){var l=!("onTouchStart"!==n.start||!c.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};o.removeEventListener(n.start,e.onTouchStart,l),o.removeEventListener(n.move,e.onTouchMove,a),o.removeEventListener(n.end,e.onTouchEnd,l)}(i.simulateTouch&&!b.ios&&!b.android||i.simulateTouch&&!c.touch&&b.ios)&&(o.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,a),t.removeEventListener("mouseup",e.onTouchEnd,!1))}else o.removeEventListener(n.start,e.onTouchStart,!1),t.removeEventListener(n.move,e.onTouchMove,a),t.removeEventListener(n.end,e.onTouchEnd,!1);(i.preventClicks||i.preventClicksPropagation)&&o.removeEventListener("click",e.onClick,!0),e.off("resize observerUpdate",T)}},D={setBreakpoint:function(){var t=this,e=t.activeIndex,i=t.loopedSlides;void 0===i&&(i=0);var n=t.params,r=n.breakpoints;if(r&&(!r||0!==Object.keys(r).length)){var s=t.getBreakpoint(r);if(s&&t.currentBreakpoint!==s){var o=s in r?r[s]:t.originalParams,a=n.loop&&o.slidesPerView!==n.slidesPerView;u.extend(t.params,o),u.extend(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),t.currentBreakpoint=s,a&&(t.loopDestroy(),t.loopCreate(),t.updateSlides(),t.slideTo(e-i+t.loopedSlides,0,!1)),t.emit("breakpoint",o)}}},getBreakpoint:function(t){if(t){var i=!1,n=[];Object.keys(t).forEach(function(t){n.push(t)}),n.sort(function(t,e){return parseInt(t,10)-parseInt(e,10)});for(var r=0;r<n.length;r+=1){var s=n[r];s>=e.innerWidth&&!i&&(i=s)}return i||"max"}}},k={isIE:!!e.navigator.userAgent.match(/Trident/g)||!!e.navigator.userAgent.match(/MSIE/g),isSafari:(S=e.navigator.userAgent.toLowerCase(),S.indexOf("safari")>=0&&S.indexOf("chrome")<0&&S.indexOf("android")<0),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)};var A={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventIntercationOnTransition:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},L={update:p,translate:f,transition:m,slide:g,loop:v,grabCursor:y,manipulation:w,events:I,breakpoints:D,checkOverflow:{checkOverflow:function(){var t=this.isLocked;this.isLocked=1===this.snapGrid.length,this.allowTouchMove=!this.isLocked,t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,e=this.params,i=this.rtl,n=this.$el,r=[];r.push(e.direction),e.freeMode&&r.push("free-mode"),c.flexbox||r.push("no-flexbox"),e.autoHeight&&r.push("autoheight"),i&&r.push("rtl"),e.slidesPerColumn>1&&r.push("multirow"),b.android&&r.push("android"),b.ios&&r.push("ios"),k.isIE&&(c.pointerEvents||c.prefixedPointerEvents)&&r.push("wp8-"+e.direction),r.forEach(function(i){t.push(e.containerModifierClass+i)}),n.addClass(t.join(" "))},removeClasses:function(){var t=this.$el,e=this.classNames;t.removeClass(e.join(" "))}},images:{loadImage:function(t,i,n,r,s,o){var a;function l(){o&&o()}t.complete&&s?l():i?((a=new e.Image).onload=l,a.onerror=l,r&&(a.sizes=r),n&&(a.srcset=n),i&&(a.src=i)):l()},preloadImages:function(){var t=this;function e(){null!=t&&t&&!t.destroyed&&(void 0!==t.imagesLoaded&&(t.imagesLoaded+=1),t.imagesLoaded===t.imagesToLoad.length&&(t.params.updateOnImagesReady&&t.update(),t.emit("imagesReady")))}t.imagesToLoad=t.$el.find("img");for(var i=0;i<t.imagesToLoad.length;i+=1){var n=t.imagesToLoad[i];t.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,e)}}}},O={},M=function(t){function e(){for(var i,r,s,o=[],a=arguments.length;a--;)o[a]=arguments[a];1===o.length&&o[0].constructor&&o[0].constructor===Object?r=o[0]:(i=(s=o)[0],r=s[1]);r||(r={}),r=u.extend({},r),i&&!r.el&&(r.el=i),t.call(this,r),Object.keys(L).forEach(function(t){Object.keys(L[t]).forEach(function(i){e.prototype[i]||(e.prototype[i]=L[t][i])})});var l=this;void 0===l.modules&&(l.modules={}),Object.keys(l.modules).forEach(function(t){var e=l.modules[t];if(e.params){var i=Object.keys(e.params)[0],n=e.params[i];if("object"!=typeof n)return;if(!(i in r&&"enabled"in n))return;!0===r[i]&&(r[i]={enabled:!0}),"object"!=typeof r[i]||"enabled"in r[i]||(r[i].enabled=!0),r[i]||(r[i]={enabled:!1})}});var d=u.extend({},A);l.useModulesParams(d),l.params=u.extend({},d,O,r),l.originalParams=u.extend({},l.params),l.passedParams=u.extend({},r),l.$=n;var h=n(l.params.el);if(i=h[0]){if(h.length>1){var p=[];return h.each(function(t,i){var n=u.extend({},r,{el:i});p.push(new e(n))}),p}i.swiper=l,h.data("swiper",l);var f,m,g=h.children("."+l.params.wrapperClass);return u.extend(l,{$el:h,el:i,$wrapperEl:g,wrapperEl:g[0],classNames:[],slides:n(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===l.params.direction},isVertical:function(){return"vertical"===l.params.direction},rtl:"horizontal"===l.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===h.css("direction")),wrongRTL:"-webkit-box"===g.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,progress:0,velocity:0,animating:!1,allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEvents:(f=["touchstart","touchmove","touchend"],m=["mousedown","mousemove","mouseup"],c.pointerEvents?m=["pointerdown","pointermove","pointerup"]:c.prefixedPointerEvents&&(m=["MSPointerDown","MSPointerMove","MSPointerUp"]),l.touchEventsTouch={start:f[0],move:f[1],end:f[2]},l.touchEventsDesktop={start:m[0],move:m[1],end:m[2]},c.touch||!l.params.simulateTouch?l.touchEventsTouch:l.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:u.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.useModules(),l.params.init&&l.init(),l}}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var i={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return e.prototype.slidesPerViewDynamic=function(){var t=this.params,e=this.slides,i=this.slidesGrid,n=this.size,r=this.activeIndex,s=1;if(t.centeredSlides){for(var o,a=e[r].swiperSlideSize,l=r+1;l<e.length;l+=1)e[l]&&!o&&(s+=1,(a+=e[l].swiperSlideSize)>n&&(o=!0));for(var u=r-1;u>=0;u-=1)e[u]&&!o&&(s+=1,(a+=e[u].swiperSlideSize)>n&&(o=!0))}else for(var c=r+1;c<e.length;c+=1)i[c]-i[r]<n&&(s+=1);return s},e.prototype.update=function(){var t=this;t&&!t.destroyed&&(t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.params.freeMode?(e(),t.params.autoHeight&&t.updateAutoHeight()):(("auto"===t.params.slidesPerView||t.params.slidesPerView>1)&&t.isEnd&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0))||e(),t.emit("update"));function e(){var e=t.rtl?-1*t.translate:t.translate,i=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}},e.prototype.init=function(){var t=this;t.initialized||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit),t.attachEvents(),t.initialized=!0,t.emit("init"))},e.prototype.destroy=function(t,e){void 0===t&&(t=!0),void 0===e&&(e=!0);var i=this,n=i.params,r=i.$el,s=i.$wrapperEl,o=i.slides;i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),e&&(i.removeClasses(),r.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(t){i.off(t)}),!1!==t&&(i.$el[0].swiper=null,i.$el.data("swiper",null),u.deleteProps(i)),i.destroyed=!0},e.extendDefaults=function(t){u.extend(O,t)},i.extendedDefaults.get=function(){return O},i.defaults.get=function(){return A},i.Class.get=function(){return t},i.$.get=function(){return n},Object.defineProperties(e,i),e}(d),P={name:"device",proto:{device:b},static:{device:b}},z={name:"support",proto:{support:c},static:{support:c}},N={name:"browser",proto:{browser:k},static:{browser:k}},$={name:"resize",create:function(){var t=this;u.extend(t,{resize:{resizeHandler:function(){t&&!t.destroyed&&t.initialized&&(t.emit("beforeResize"),t.emit("resize"))},orientationChangeHandler:function(){t&&!t.destroyed&&t.initialized&&t.emit("orientationchange")}}})},on:{init:function(){e.addEventListener("resize",this.resize.resizeHandler),e.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){e.removeEventListener("resize",this.resize.resizeHandler),e.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},j={func:e.MutationObserver||e.WebkitMutationObserver,attach:function(t,e){void 0===e&&(e={});var i=this,n=new(0,j.func)(function(t){t.forEach(function(t){i.emit("observerUpdate",t)})});n.observe(t,{attributes:void 0===e.attributes||e.attributes,childList:void 0===e.childList||e.childList,characterData:void 0===e.characterData||e.characterData}),i.observer.observers.push(n)},init:function(){if(c.observer&&this.params.observer){if(this.params.observeParents)for(var t=this.$el.parents(),e=0;e<t.length;e+=1)this.observer.attach(t[e]);this.observer.attach(this.$el[0],{childList:!1}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(t){t.disconnect()}),this.observer.observers=[]}},H={name:"observer",params:{observer:!1,observeParents:!1},create:function(){u.extend(this,{observer:{init:j.init.bind(this),attach:j.attach.bind(this),destroy:j.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},R={update:function(t){var e=this,i=e.params,n=i.slidesPerView,r=i.slidesPerGroup,s=i.centeredSlides,o=e.virtual,a=o.from,l=o.to,c=o.slides,d=o.slidesGrid,h=o.renderSlide,p=o.offset;e.updateActiveIndex();var f,m,g,v=e.activeIndex||0;f=e.rtl&&e.isHorizontal()?"right":e.isHorizontal()?"left":"top",s?(m=Math.floor(n/2)+r,g=Math.floor(n/2)+r):(m=n+(r-1),g=r);var y=Math.max((v||0)-g,0),w=Math.min((v||0)+m,c.length-1),b=(e.slidesGrid[y]||0)-(e.slidesGrid[0]||0);function x(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.lazy&&e.params.lazy.enabled&&e.lazy.load()}if(u.extend(e.virtual,{from:y,to:w,offset:b,slidesGrid:e.slidesGrid}),a===y&&l===w&&!t)return e.slidesGrid!==d&&b!==p&&e.slides.css(f,b+"px"),void e.updateProgress();if(e.params.virtual.renderExternal)return e.params.virtual.renderExternal.call(e,{offset:b,from:y,to:w,slides:function(){for(var t=[],e=y;e<=w;e+=1)t.push(c[e]);return t}()}),void x();var _=[],E=[];if(t)e.$wrapperEl.find("."+e.params.slideClass).remove();else for(var T=a;T<=l;T+=1)(T<y||T>w)&&e.$wrapperEl.find("."+e.params.slideClass+'[data-swiper-slide-index="'+T+'"]').remove();for(var C=0;C<c.length;C+=1)C>=y&&C<=w&&(void 0===l||t?E.push(C):(C>l&&E.push(C),C<a&&_.push(C)));E.forEach(function(t){e.$wrapperEl.append(h(c[t],t))}),_.sort(function(t,e){return t<e}).forEach(function(t){e.$wrapperEl.prepend(h(c[t],t))}),e.$wrapperEl.children(".swiper-slide").css(f,b+"px"),x()},renderSlide:function(t,e){var i=this.params.virtual;if(i.cache&&this.virtual.cache[e])return this.virtual.cache[e];var r=i.renderSlide?n(i.renderSlide.call(this,t,e)):n('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+e+'">'+t+"</div>");return r.attr("data-swiper-slide-index")||r.attr("data-swiper-slide-index",e),i.cache&&(this.virtual.cache[e]=r),r},appendSlide:function(t){this.virtual.slides.push(t),this.virtual.update(!0)},prependSlide:function(t){if(this.virtual.slides.unshift(t),this.params.virtual.cache){var e=this.virtual.cache,i={};Object.keys(e).forEach(function(t){i[t+1]=e[t]}),this.virtual.cache=i}this.virtual.update(!0),this.slideNext(0)}},W={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null}},create:function(){u.extend(this,{virtual:{update:R.update.bind(this),appendSlide:R.appendSlide.bind(this),prependSlide:R.prependSlide.bind(this),renderSlide:R.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){if(this.params.virtual.enabled){this.classNames.push(this.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};u.extend(this.params,t),u.extend(this.originalParams,t),this.virtual.update()}},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},q={handle:function(i){var n=this,r=i;r.originalEvent&&(r=r.originalEvent);var s=r.keyCode||r.charCode;if(!n.allowSlideNext&&(n.isHorizontal()&&39===s||n.isVertical()&&40===s))return!1;if(!n.allowSlidePrev&&(n.isHorizontal()&&37===s||n.isVertical()&&38===s))return!1;if(!(r.shiftKey||r.altKey||r.ctrlKey||r.metaKey||t.activeElement&&t.activeElement.nodeName&&("input"===t.activeElement.nodeName.toLowerCase()||"textarea"===t.activeElement.nodeName.toLowerCase()))){if(n.params.keyboard.onlyInViewport&&(37===s||39===s||38===s||40===s)){var o=!1;if(n.$el.parents("."+n.params.slideClass).length>0&&0===n.$el.parents("."+n.params.slideActiveClass).length)return;var a=e.innerWidth,l=e.innerHeight,u=n.$el.offset();n.rtl&&(u.left-=n.$el[0].scrollLeft);for(var c=[[u.left,u.top],[u.left+n.width,u.top],[u.left,u.top+n.height],[u.left+n.width,u.top+n.height]],d=0;d<c.length;d+=1){var h=c[d];h[0]>=0&&h[0]<=a&&h[1]>=0&&h[1]<=l&&(o=!0)}if(!o)return}n.isHorizontal()?(37!==s&&39!==s||(r.preventDefault?r.preventDefault():r.returnValue=!1),(39===s&&!n.rtl||37===s&&n.rtl)&&n.slideNext(),(37===s&&!n.rtl||39===s&&n.rtl)&&n.slidePrev()):(38!==s&&40!==s||(r.preventDefault?r.preventDefault():r.returnValue=!1),40===s&&n.slideNext(),38===s&&n.slidePrev()),n.emit("keyPress",s)}},enable:function(){this.keyboard.enabled||(n(t).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(n(t).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},B={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){u.extend(this,{keyboard:{enabled:!1,enable:q.enable.bind(this),disable:q.disable.bind(this),handle:q.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var F={lastScrollTime:u.now(),event:e.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel",i=e in t;if(!i){var n=t.createElement("div");n.setAttribute(e,"return;"),i="function"==typeof n[e]}return!i&&t.implementation&&t.implementation.hasFeature&&!0!==t.implementation.hasFeature("","")&&(i=t.implementation.hasFeature("Events.wheel","3.0")),i}()?"wheel":"mousewheel",normalize:function(t){var e=0,i=0,n=0,r=0;return"detail"in t&&(i=t.detail),"wheelDelta"in t&&(i=-t.wheelDelta/120),"wheelDeltaY"in t&&(i=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=i,i=0),n=10*e,r=10*i,"deltaY"in t&&(r=t.deltaY),"deltaX"in t&&(n=t.deltaX),(n||r)&&t.deltaMode&&(1===t.deltaMode?(n*=40,r*=40):(n*=800,r*=800)),n&&!e&&(e=n<1?-1:1),r&&!i&&(i=r<1?-1:1),{spinX:e,spinY:i,pixelX:n,pixelY:r}},handle:function(t){var i=t,n=this,r=n.params.mousewheel;i.originalEvent&&(i=i.originalEvent);var s=0,o=n.rtl?-1:1,a=F.normalize(i);if(r.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(a.pixelX)>Math.abs(a.pixelY)))return!0;s=a.pixelX*o}else{if(!(Math.abs(a.pixelY)>Math.abs(a.pixelX)))return!0;s=a.pixelY}else s=Math.abs(a.pixelX)>Math.abs(a.pixelY)?-a.pixelX*o:-a.pixelY;if(0===s)return!0;if(r.invert&&(s=-s),n.params.freeMode){var l=n.getTranslate()+s*r.sensitivity,c=n.isBeginning,d=n.isEnd;if(l>=n.minTranslate()&&(l=n.minTranslate()),l<=n.maxTranslate()&&(l=n.maxTranslate()),n.setTransition(0),n.setTranslate(l),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!c&&n.isBeginning||!d&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky&&(clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=u.nextTick(function(){n.slideReset()},300)),n.emit("scroll",i),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.stopAutoplay(),l===n.minTranslate()||l===n.maxTranslate())return!0}else{if(u.now()-n.mousewheel.lastScrollTime>60)if(s<0)if(n.isEnd&&!n.params.loop||n.animating){if(r.releaseOnEdges)return!0}else n.slideNext(),n.emit("scroll",i);else if(n.isBeginning&&!n.params.loop||n.animating){if(r.releaseOnEdges)return!0}else n.slidePrev(),n.emit("scroll",i);n.mousewheel.lastScrollTime=(new e.Date).getTime()}return i.preventDefault?i.preventDefault():i.returnValue=!1,!1},enable:function(){if(!F.event)return!1;if(this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=n(this.params.mousewheel.eventsTarged)),t.on(F.event,this.mousewheel.handle),this.mousewheel.enabled=!0,!0},disable:function(){if(!F.event)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=n(this.params.mousewheel.eventsTarged)),t.off(F.event,this.mousewheel.handle),this.mousewheel.enabled=!1,!0}},V={update:function(){var t=this.params.navigation;if(!this.params.loop){var e=this.navigation,i=e.$nextEl,n=e.$prevEl;n&&n.length>0&&(this.isBeginning?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass)),i&&i.length>0&&(this.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass))}},init:function(){var t,e,i=this,r=i.params.navigation;(r.nextEl||r.prevEl)&&(r.nextEl&&(t=n(r.nextEl),i.params.uniqueNavElements&&"string"==typeof r.nextEl&&t.length>1&&1===i.$el.find(r.nextEl).length&&(t=i.$el.find(r.nextEl))),r.prevEl&&(e=n(r.prevEl),i.params.uniqueNavElements&&"string"==typeof r.prevEl&&e.length>1&&1===i.$el.find(r.prevEl).length&&(e=i.$el.find(r.prevEl))),t&&t.length>0&&t.on("click",function(t){t.preventDefault(),i.isEnd&&!i.params.loop||i.slideNext()}),e&&e.length>0&&e.on("click",function(t){t.preventDefault(),i.isBeginning&&!i.params.loop||i.slidePrev()}),u.extend(i.navigation,{$nextEl:t,nextEl:t&&t[0],$prevEl:e,prevEl:e&&e[0]}))},destroy:function(){var t=this.navigation,e=t.$nextEl,i=t.$prevEl;e&&e.length&&(e.off("click"),e.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click"),i.removeClass(this.params.navigation.disabledClass))}},Y={update:function(){var t=this,e=t.rtl,i=t.params.pagination;if(i.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length){var r,s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,o=t.pagination.$el,a=t.params.loop?Math.ceil((s-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?((r=Math.ceil((t.activeIndex-t.loopedSlides)/t.params.slidesPerGroup))>s-1-2*t.loopedSlides&&(r-=s-2*t.loopedSlides),r>a-1&&(r-=a),r<0&&"bullets"!==t.params.paginationType&&(r=a+r)):r=void 0!==t.snapIndex?t.snapIndex:t.activeIndex||0,"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){var l,u,c,d=t.pagination.bullets;if(i.dynamicBullets&&(t.pagination.bulletSize=d.eq(0)[t.isHorizontal()?"outerWidth":"outerHeight"](!0),o.css(t.isHorizontal()?"width":"height",t.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==t.previousIndex&&(r>t.previousIndex&&t.pagination.dynamicBulletIndex<i.dynamicMainBullets-1?t.pagination.dynamicBulletIndex+=1:r<t.previousIndex&&t.pagination.dynamicBulletIndex>0&&(t.pagination.dynamicBulletIndex-=1)),l=r-t.pagination.dynamicBulletIndex,c=((u=l+(i.dynamicMainBullets-1))+l)/2),d.removeClass(i.bulletActiveClass+" "+i.bulletActiveClass+"-next "+i.bulletActiveClass+"-next-next "+i.bulletActiveClass+"-prev "+i.bulletActiveClass+"-prev-prev "+i.bulletActiveClass+"-main"),o.length>1)d.each(function(t,e){var s=n(e),o=s.index();o===r&&s.addClass(i.bulletActiveClass),i.dynamicBullets&&(o>=l&&o<=u&&s.addClass(i.bulletActiveClass+"-main"),o===l&&s.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),o===u&&s.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else if(d.eq(r).addClass(i.bulletActiveClass),i.dynamicBullets){for(var h=d.eq(l),p=d.eq(u),f=l;f<=u;f+=1)d.eq(f).addClass(i.bulletActiveClass+"-main");h.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),p.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}if(i.dynamicBullets){var m=Math.min(d.length,i.dynamicMainBullets+4),g=(t.pagination.bulletSize*m-t.pagination.bulletSize)/2-c*t.pagination.bulletSize,v=e?"right":"left";d.css(t.isHorizontal()?v:"top",g+"px")}}if("fraction"===i.type&&(o.find("."+i.currentClass).text(r+1),o.find("."+i.totalClass).text(a)),"progressbar"===i.type){var y=(r+1)/a,w=y,b=1;t.isHorizontal()||(b=y,w=1),o.find("."+i.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+w+") scaleY("+b+")").transition(t.params.speed)}"custom"===i.type&&i.renderCustom?(o.html(i.renderCustom(t,r+1,a)),t.emit("paginationRender",t,o[0])):t.emit("paginationUpdate",t,o[0]),o[t.params.watchOverflow&&t.isLocked?"addClass":"removeClass"](i.lockClass)}},render:function(){var t=this,e=t.params.pagination;if(e.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length){var i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,n=t.pagination.$el,r="";if("bullets"===e.type){for(var s=t.params.loop?Math.ceil((i-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length,o=0;o<s;o+=1)e.renderBullet?r+=e.renderBullet.call(t,o,e.bulletClass):r+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";n.html(r),t.pagination.bullets=n.find("."+e.bulletClass)}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',n.html(r)),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',n.html(r)),"custom"!==e.type&&t.emit("paginationRender",t.pagination.$el[0])}},init:function(){var t=this,e=t.params.pagination;if(e.el){var i=n(e.el);0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&i.length>1&&1===t.$el.find(e.el).length&&(i=t.$el.find(e.el)),"bullets"===e.type&&e.clickable&&i.addClass(e.clickableClass),i.addClass(e.modifierClass+e.type),"bullets"===e.type&&e.dynamicBullets&&(i.addClass(""+e.modifierClass+e.type+"-dynamic"),t.pagination.dynamicBulletIndex=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),e.clickable&&i.on("click","."+e.bulletClass,function(e){e.preventDefault();var i=n(this).index()*t.params.slidesPerGroup;t.params.loop&&(i+=t.loopedSlides),t.slideTo(i)}),u.extend(t.pagination,{$el:i,el:i[0]}))}},destroy:function(){var t=this.params.pagination;if(t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var e=this.pagination.$el;e.removeClass(t.hiddenClass),e.removeClass(t.modifierClass+t.type),this.pagination.bullets&&this.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&e.off("click","."+t.bulletClass)}}},G={setTranslate:function(){var t=this;if(t.params.scrollbar.el&&t.scrollbar.el){var e=t.scrollbar,i=t.rtl,n=t.progress,r=e.dragSize,s=e.trackSize,o=e.$dragEl,a=e.$el,l=t.params.scrollbar,u=r,d=(s-r)*n;i&&t.isHorizontal()?(d=-d)>0?(u=r-d,d=0):-d+r>s&&(u=s+d):d<0?(u=r+d,d=0):d+r>s&&(u=s-d),t.isHorizontal()?(c.transforms3d?o.transform("translate3d("+d+"px, 0, 0)"):o.transform("translateX("+d+"px)"),o[0].style.width=u+"px"):(c.transforms3d?o.transform("translate3d(0px, "+d+"px, 0)"):o.transform("translateY("+d+"px)"),o[0].style.height=u+"px"),l.hide&&(clearTimeout(t.scrollbar.timeout),a[0].style.opacity=1,t.scrollbar.timeout=setTimeout(function(){a[0].style.opacity=0,a.transition(400)},1e3))}},setTransition:function(t){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(t)},updateSize:function(){var t=this;if(t.params.scrollbar.el&&t.scrollbar.el){var e=t.scrollbar,i=e.$dragEl,n=e.$el;i[0].style.width="",i[0].style.height="";var r,s=t.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,o=t.size/t.virtualSize,a=o*(s/t.size);r="auto"===t.params.scrollbar.dragSize?s*o:parseInt(t.params.scrollbar.dragSize,10),t.isHorizontal()?i[0].style.width=r+"px":i[0].style.height=r+"px",n[0].style.display=o>=1?"none":"",t.params.scrollbarHide&&(n[0].style.opacity=0),u.extend(e,{trackSize:s,divider:o,moveDivider:a,dragSize:r}),e.$el[t.params.watchOverflow&&t.isLocked?"addClass":"removeClass"](t.params.scrollbar.lockClass)}},setDragPosition:function(t){var e,i=this,n=i.scrollbar,r=n.$el,s=n.dragSize,o=n.trackSize;e=((i.isHorizontal()?"touchstart"===t.type||"touchmove"===t.type?t.targetTouches[0].pageX:t.pageX||t.clientX:"touchstart"===t.type||"touchmove"===t.type?t.targetTouches[0].pageY:t.pageY||t.clientY)-r.offset()[i.isHorizontal()?"left":"top"]-s/2)/(o-s),e=Math.max(Math.min(e,1),0),i.rtl&&(e=1-e);var a=i.minTranslate()+(i.maxTranslate()-i.minTranslate())*e;i.updateProgress(a),i.setTranslate(a),i.updateActiveIndex(),i.updateSlidesClasses()},onDragStart:function(t){var e=this.params.scrollbar,i=this.scrollbar,n=this.$wrapperEl,r=i.$el,s=i.$dragEl;this.scrollbar.isTouched=!0,t.preventDefault(),t.stopPropagation(),n.transition(100),s.transition(100),i.setDragPosition(t),clearTimeout(this.scrollbar.dragTimeout),r.transition(0),e.hide&&r.css("opacity",1),this.emit("scrollbarDragStart",t)},onDragMove:function(t){var e=this.scrollbar,i=this.$wrapperEl,n=e.$el,r=e.$dragEl;this.scrollbar.isTouched&&(t.preventDefault?t.preventDefault():t.returnValue=!1,e.setDragPosition(t),i.transition(0),n.transition(0),r.transition(0),this.emit("scrollbarDragMove",t))},onDragEnd:function(t){var e=this.params.scrollbar,i=this.scrollbar.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,e.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=u.nextTick(function(){i.css("opacity",0),i.transition(400)},1e3)),this.emit("scrollbarDragEnd",t),e.snapOnRelease&&this.slideReset())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var i=e.scrollbar,n=e.touchEvents,r=e.touchEventsDesktop,s=e.params,o=i.$el[0],a=!(!c.passiveListener||!s.passiveListener)&&{passive:!1,capture:!1},l=!(!c.passiveListener||!s.passiveListener)&&{passive:!0,capture:!1};c.touch||!c.pointerEvents&&!c.prefixedPointerEvents?(c.touch&&(o.addEventListener(n.start,e.scrollbar.onDragStart,a),o.addEventListener(n.move,e.scrollbar.onDragMove,a),o.addEventListener(n.end,e.scrollbar.onDragEnd,l)),(s.simulateTouch&&!b.ios&&!b.android||s.simulateTouch&&!c.touch&&b.ios)&&(o.addEventListener("mousedown",e.scrollbar.onDragStart,a),t.addEventListener("mousemove",e.scrollbar.onDragMove,a),t.addEventListener("mouseup",e.scrollbar.onDragEnd,l))):(o.addEventListener(r.start,e.scrollbar.onDragStart,a),t.addEventListener(r.move,e.scrollbar.onDragMove,a),t.addEventListener(r.end,e.scrollbar.onDragEnd,l))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var i=e.scrollbar,n=e.touchEvents,r=e.touchEventsDesktop,s=e.params,o=i.$el[0],a=!(!c.passiveListener||!s.passiveListener)&&{passive:!1,capture:!1},l=!(!c.passiveListener||!s.passiveListener)&&{passive:!0,capture:!1};c.touch||!c.pointerEvents&&!c.prefixedPointerEvents?(c.touch&&(o.removeEventListener(n.start,e.scrollbar.onDragStart,a),o.removeEventListener(n.move,e.scrollbar.onDragMove,a),o.removeEventListener(n.end,e.scrollbar.onDragEnd,l)),(s.simulateTouch&&!b.ios&&!b.android||s.simulateTouch&&!c.touch&&b.ios)&&(o.removeEventListener("mousedown",e.scrollbar.onDragStart,a),t.removeEventListener("mousemove",e.scrollbar.onDragMove,a),t.removeEventListener("mouseup",e.scrollbar.onDragEnd,l))):(o.removeEventListener(r.start,e.scrollbar.onDragStart,a),t.removeEventListener(r.move,e.scrollbar.onDragMove,a),t.removeEventListener(r.end,e.scrollbar.onDragEnd,l))}},init:function(){if(this.params.scrollbar.el){var t=this.scrollbar,e=this.$el,i=this.params.scrollbar,r=n(i.el);this.params.uniqueNavElements&&"string"==typeof i.el&&r.length>1&&1===e.find(i.el).length&&(r=e.find(i.el));var s=r.find("."+this.params.scrollbar.dragClass);0===s.length&&(s=n('<div class="'+this.params.scrollbar.dragClass+'"></div>'),r.append(s)),u.extend(t,{$el:r,el:r[0],$dragEl:s,dragEl:s[0]}),i.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},U={setTransform:function(t,e){var i=this.rtl,r=n(t),s=i?-1:1,o=r.attr("data-swiper-parallax")||"0",a=r.attr("data-swiper-parallax-x"),l=r.attr("data-swiper-parallax-y"),u=r.attr("data-swiper-parallax-scale"),c=r.attr("data-swiper-parallax-opacity");if(a||l?(a=a||"0",l=l||"0"):this.isHorizontal()?(a=o,l="0"):(l=o,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*e*s+"%":a*e*s+"px",l=l.indexOf("%")>=0?parseInt(l,10)*e+"%":l*e+"px",null!=c){var d=c-(c-1)*(1-Math.abs(e));r[0].style.opacity=d}if(null==u)r.transform("translate3d("+a+", "+l+", 0px)");else{var h=u-(u-1)*(1-Math.abs(e));r.transform("translate3d("+a+", "+l+", 0px) scale("+h+")")}},setTranslate:function(){var t=this,e=t.$el,i=t.slides,r=t.progress,s=t.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,i){t.parallax.setTransform(i,r)}),i.each(function(e,i){var o=i.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(o+=Math.ceil(e/2)-r*(s.length-1)),o=Math.min(Math.max(o,-1),1),n(i).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,i){t.parallax.setTransform(i,o)})})},setTransition:function(t){void 0===t&&(t=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,i){var r=n(i),s=parseInt(r.attr("data-swiper-parallax-duration"),10)||t;0===t&&(s=0),r.transition(s)})}},X={getDistanceBetweenTouches:function(t){if(t.targetTouches.length<2)return 1;var e=t.targetTouches[0].pageX,i=t.targetTouches[0].pageY,n=t.targetTouches[1].pageX,r=t.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-e,2)+Math.pow(r-i,2))},onGestureStart:function(t){var e=this.params.zoom,i=this.zoom,r=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!c.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;i.fakeGestureTouched=!0,r.scaleStart=X.getDistanceBetweenTouches(t)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=n(t.target).closest(".swiper-slide"),0===r.$slideEl.length&&(r.$slideEl=this.slides.eq(this.activeIndex)),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent("."+e.containerClass),r.maxRatio=r.$imageWrapEl.attr("data-swiper-zoom")||e.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl.transition(0),this.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange:function(t){var e=this.params.zoom,i=this.zoom,n=i.gesture;if(!c.gestures){if("touchmove"!==t.type||"touchmove"===t.type&&t.targetTouches.length<2)return;i.fakeGestureMoved=!0,n.scaleMove=X.getDistanceBetweenTouches(t)}n.$imageEl&&0!==n.$imageEl.length&&(c.gestures?this.zoom.scale=t.scale*i.currentScale:i.scale=n.scaleMove/n.scaleStart*i.currentScale,i.scale>n.maxRatio&&(i.scale=n.maxRatio-1+Math.pow(i.scale-n.maxRatio+1,.5)),i.scale<e.minRatio&&(i.scale=e.minRatio+1-Math.pow(e.minRatio-i.scale+1,.5)),n.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(t){var e=this.params.zoom,i=this.zoom,n=i.gesture;if(!c.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==t.type||"touchend"===t.type&&t.changedTouches.length<2&&!b.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,n.maxRatio),e.minRatio),n.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(n.$slideEl=void 0))},onTouchStart:function(t){var e=this.zoom,i=e.gesture,n=e.image;i.$imageEl&&0!==i.$imageEl.length&&(n.isTouched||(b.android&&t.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(t){var e=this.zoom,i=e.gesture,n=e.image,r=e.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,n.isTouched&&i.$slideEl)){n.isMoved||(n.width=i.$imageEl[0].offsetWidth,n.height=i.$imageEl[0].offsetHeight,n.startX=u.getTranslate(i.$imageWrapEl[0],"x")||0,n.startY=u.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(n.startX=-n.startX),this.rtl&&(n.startY=-n.startY));var s=n.width*e.scale,o=n.height*e.scale;if(!(s<i.slideWidth&&o<i.slideHeight)){if(n.minX=Math.min(i.slideWidth/2-s/2,0),n.maxX=-n.minX,n.minY=Math.min(i.slideHeight/2-o/2,0),n.maxY=-n.minY,n.touchesCurrent.x="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,n.touchesCurrent.y="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,!n.isMoved&&!e.isScaling){if(this.isHorizontal()&&(Math.floor(n.minX)===Math.floor(n.startX)&&n.touchesCurrent.x<n.touchesStart.x||Math.floor(n.maxX)===Math.floor(n.startX)&&n.touchesCurrent.x>n.touchesStart.x))return void(n.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(n.minY)===Math.floor(n.startY)&&n.touchesCurrent.y<n.touchesStart.y||Math.floor(n.maxY)===Math.floor(n.startY)&&n.touchesCurrent.y>n.touchesStart.y))return void(n.isTouched=!1)}t.preventDefault(),t.stopPropagation(),n.isMoved=!0,n.currentX=n.touchesCurrent.x-n.touchesStart.x+n.startX,n.currentY=n.touchesCurrent.y-n.touchesStart.y+n.startY,n.currentX<n.minX&&(n.currentX=n.minX+1-Math.pow(n.minX-n.currentX+1,.8)),n.currentX>n.maxX&&(n.currentX=n.maxX-1+Math.pow(n.currentX-n.maxX+1,.8)),n.currentY<n.minY&&(n.currentY=n.minY+1-Math.pow(n.minY-n.currentY+1,.8)),n.currentY>n.maxY&&(n.currentY=n.maxY-1+Math.pow(n.currentY-n.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=n.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=n.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(n.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(n.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(n.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(n.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=n.touchesCurrent.x,r.prevPositionY=n.touchesCurrent.y,r.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}}},onTouchEnd:function(){var t=this.zoom,e=t.gesture,i=t.image,n=t.velocity;if(e.$imageEl&&0!==e.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var r=300,s=300,o=n.x*r,a=i.currentX+o,l=n.y*s,u=i.currentY+l;0!==n.x&&(r=Math.abs((a-i.currentX)/n.x)),0!==n.y&&(s=Math.abs((u-i.currentY)/n.y));var c=Math.max(r,s);i.currentX=a,i.currentY=u;var d=i.width*t.scale,h=i.height*t.scale;i.minX=Math.min(e.slideWidth/2-d/2,0),i.maxX=-i.minX,i.minY=Math.min(e.slideHeight/2-h/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),e.$imageWrapEl.transition(c).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var t=this.zoom,e=t.gesture;e.$slideEl&&this.previousIndex!==this.activeIndex&&(e.$imageEl.transform("translate3d(0,0,0) scale(1)"),e.$imageWrapEl.transform("translate3d(0,0,0)"),e.$slideEl=void 0,e.$imageEl=void 0,e.$imageWrapEl=void 0,t.scale=1,t.currentScale=1)},toggle:function(t){var e=this.zoom;e.scale&&1!==e.scale?e.out():e.in(t)},in:function(t){var e,i,r,s,o,a,l,u,c,d,h,p,f,m,g,v,y=this.zoom,w=this.params.zoom,b=y.gesture,x=y.image;(b.$slideEl||(b.$slideEl=this.clickedSlide?n(this.clickedSlide):this.slides.eq(this.activeIndex),b.$imageEl=b.$slideEl.find("img, svg, canvas"),b.$imageWrapEl=b.$imageEl.parent("."+w.containerClass)),b.$imageEl&&0!==b.$imageEl.length)&&(b.$slideEl.addClass(""+w.zoomedSlideClass),void 0===x.touchesStart.x&&t?(e="touchend"===t.type?t.changedTouches[0].pageX:t.pageX,i="touchend"===t.type?t.changedTouches[0].pageY:t.pageY):(e=x.touchesStart.x,i=x.touchesStart.y),y.scale=b.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,y.currentScale=b.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,t?(g=b.$slideEl[0].offsetWidth,v=b.$slideEl[0].offsetHeight,r=b.$slideEl.offset().left+g/2-e,s=b.$slideEl.offset().top+v/2-i,l=b.$imageEl[0].offsetWidth,u=b.$imageEl[0].offsetHeight,c=l*y.scale,d=u*y.scale,f=-(h=Math.min(g/2-c/2,0)),m=-(p=Math.min(v/2-d/2,0)),(o=r*y.scale)<h&&(o=h),o>f&&(o=f),(a=s*y.scale)<p&&(a=p),a>m&&(a=m)):(o=0,a=0),b.$imageWrapEl.transition(300).transform("translate3d("+o+"px, "+a+"px,0)"),b.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+y.scale+")"))},out:function(){var t=this.zoom,e=this.params.zoom,i=t.gesture;i.$slideEl||(i.$slideEl=this.clickedSlide?n(this.clickedSlide):this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent("."+e.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+e.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var t=this,e=t.zoom;if(!e.enabled){e.enabled=!0;var i=!("touchstart"!==t.touchEvents.start||!c.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1};c.gestures?(t.$wrapperEl.on("gesturestart",".swiper-slide",e.onGestureStart,i),t.$wrapperEl.on("gesturechange",".swiper-slide",e.onGestureChange,i),t.$wrapperEl.on("gestureend",".swiper-slide",e.onGestureEnd,i)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.on(t.touchEvents.start,".swiper-slide",e.onGestureStart,i),t.$wrapperEl.on(t.touchEvents.move,".swiper-slide",e.onGestureChange,i),t.$wrapperEl.on(t.touchEvents.end,".swiper-slide",e.onGestureEnd,i)),t.$wrapperEl.on(t.touchEvents.move,"."+t.params.zoom.containerClass,e.onTouchMove)}},disable:function(){var t=this,e=t.zoom;if(e.enabled){t.zoom.enabled=!1;var i=!("touchstart"!==t.touchEvents.start||!c.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1};c.gestures?(t.$wrapperEl.off("gesturestart",".swiper-slide",e.onGestureStart,i),t.$wrapperEl.off("gesturechange",".swiper-slide",e.onGestureChange,i),t.$wrapperEl.off("gestureend",".swiper-slide",e.onGestureEnd,i)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.off(t.touchEvents.start,".swiper-slide",e.onGestureStart,i),t.$wrapperEl.off(t.touchEvents.move,".swiper-slide",e.onGestureChange,i),t.$wrapperEl.off(t.touchEvents.end,".swiper-slide",e.onGestureEnd,i)),t.$wrapperEl.off(t.touchEvents.move,"."+t.params.zoom.containerClass,e.onTouchMove)}}},Q={loadInSlide:function(t,e){void 0===e&&(e=!0);var i=this,r=i.params.lazy;if(void 0!==t&&0!==i.slides.length){var s=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children("."+i.params.slideClass+'[data-swiper-slide-index="'+t+'"]'):i.slides.eq(t),o=s.find("."+r.elementClass+":not(."+r.loadedClass+"):not(."+r.loadingClass+")");!s.hasClass(r.elementClass)||s.hasClass(r.loadedClass)||s.hasClass(r.loadingClass)||(o=o.add(s[0])),0!==o.length&&o.each(function(t,o){var a=n(o);a.addClass(r.loadingClass);var l=a.attr("data-background"),u=a.attr("data-src"),c=a.attr("data-srcset"),d=a.attr("data-sizes");i.loadImage(a[0],u||l,c,d,!1,function(){if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(l?(a.css("background-image",'url("'+l+'")'),a.removeAttr("data-background")):(c&&(a.attr("srcset",c),a.removeAttr("data-srcset")),d&&(a.attr("sizes",d),a.removeAttr("data-sizes")),u&&(a.attr("src",u),a.removeAttr("data-src"))),a.addClass(r.loadedClass).removeClass(r.loadingClass),s.find("."+r.preloaderClass).remove(),i.params.loop&&e){var t=s.attr("data-swiper-slide-index");if(s.hasClass(i.params.slideDuplicateClass)){var n=i.$wrapperEl.children('[data-swiper-slide-index="'+t+'"]:not(.'+i.params.slideDuplicateClass+")");i.lazy.loadInSlide(n.index(),!1)}else{var o=i.$wrapperEl.children("."+i.params.slideDuplicateClass+'[data-swiper-slide-index="'+t+'"]');i.lazy.loadInSlide(o.index(),!1)}}i.emit("lazyImageReady",s[0],a[0])}}),i.emit("lazyImageLoad",s[0],a[0])})}},load:function(){var t=this,e=t.$wrapperEl,i=t.params,r=t.slides,s=t.activeIndex,o=t.virtual&&i.virtual.enabled,a=i.lazy,l=i.slidesPerView;function u(t){if(o){if(e.children("."+i.slideClass+'[data-swiper-slide-index="'+t+'"]').length)return!0}else if(r[t])return!0;return!1}function c(t){return o?n(t).attr("data-swiper-slide-index"):n(t).index()}if("auto"===l&&(l=0),t.lazy.initialImageLoaded||(t.lazy.initialImageLoaded=!0),t.params.watchSlidesVisibility)e.children("."+i.slideVisibleClass).each(function(e,i){var r=o?n(i).attr("data-swiper-slide-index"):n(i).index();t.lazy.loadInSlide(r)});else if(l>1)for(var d=s;d<s+l;d+=1)u(d)&&t.lazy.loadInSlide(d);else t.lazy.loadInSlide(s);if(a.loadPrevNext)if(l>1||a.loadPrevNextAmount&&a.loadPrevNextAmount>1){for(var h=a.loadPrevNextAmount,p=l,f=Math.min(s+p+Math.max(h,p),r.length),m=Math.max(s-Math.max(p,h),0),g=s+l;g<f;g+=1)u(g)&&t.lazy.loadInSlide(g);for(var v=m;v<s;v+=1)u(v)&&t.lazy.loadInSlide(v)}else{var y=e.children("."+i.slideNextClass);y.length>0&&t.lazy.loadInSlide(c(y));var w=e.children("."+i.slidePrevClass);w.length>0&&t.lazy.loadInSlide(c(w))}}},K={LinearSpline:function(t,e){var i,n,r,s,o,a=function(t,e){for(n=-1,i=t.length;i-n>1;)t[r=i+n>>1]<=e?n=r:i=r;return i};return this.x=t,this.y=e,this.lastIndex=t.length-1,this.interpolate=function(t){return t?(o=a(this.x,t),s=o-1,(t-this.x[s])*(this.y[o]-this.y[s])/(this.x[o]-this.x[s])+this.y[s]):0},this},getInterpolateFunction:function(t){this.controller.spline||(this.controller.spline=this.params.loop?new K.LinearSpline(this.slidesGrid,t.slidesGrid):new K.LinearSpline(this.snapGrid,t.snapGrid))},setTranslate:function(t,e){var i,n,r=this,s=r.controller.control;function o(t){var e=t.rtl&&"horizontal"===t.params.direction?-r.translate:r.translate;"slide"===r.params.controller.by&&(r.controller.getInterpolateFunction(t),n=-r.controller.spline.interpolate(-e)),n&&"container"!==r.params.controller.by||(i=(t.maxTranslate()-t.minTranslate())/(r.maxTranslate()-r.minTranslate()),n=(e-r.minTranslate())*i+t.minTranslate()),r.params.controller.inverse&&(n=t.maxTranslate()-n),t.updateProgress(n),t.setTranslate(n,r),t.updateActiveIndex(),t.updateSlidesClasses()}if(Array.isArray(s))for(var a=0;a<s.length;a+=1)s[a]!==e&&s[a]instanceof M&&o(s[a]);else s instanceof M&&e!==s&&o(s)},setTransition:function(t,e){var i,n=this,r=n.controller.control;function s(e){e.setTransition(t,n),0!==t&&(e.transitionStart(),e.$wrapperEl.transitionEnd(function(){r&&(e.params.loop&&"slide"===n.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(r))for(i=0;i<r.length;i+=1)r[i]!==e&&r[i]instanceof M&&s(r[i]);else r instanceof M&&e!==r&&s(r)}},Z={makeElFocusable:function(t){return t.attr("tabIndex","0"),t},addElRole:function(t,e){return t.attr("role",e),t},addElLabel:function(t,e){return t.attr("aria-label",e),t},disableEl:function(t){return t.attr("aria-disabled",!0),t},enableEl:function(t){return t.attr("aria-disabled",!1),t},onEnterKey:function(t){var e=this,i=e.params.a11y;if(13===t.keyCode){var r=n(t.target);e.navigation&&e.navigation.$nextEl&&r.is(e.navigation.$nextEl)&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?e.a11y.notify(i.lastSlideMessage):e.a11y.notify(i.nextSlideMessage)),e.navigation&&e.navigation.$prevEl&&r.is(e.navigation.$prevEl)&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?e.a11y.notify(i.firstSlideMessage):e.a11y.notify(i.prevSlideMessage)),e.pagination&&r.is("."+e.params.pagination.bulletClass)&&r[0].click()}},notify:function(t){var e=this.a11y.liveRegion;0!==e.length&&(e.html(""),e.html(t))},updateNavigation:function(){if(!this.params.loop){var t=this.navigation,e=t.$nextEl,i=t.$prevEl;i&&i.length>0&&(this.isBeginning?this.a11y.disableEl(i):this.a11y.enableEl(i)),e&&e.length>0&&(this.isEnd?this.a11y.disableEl(e):this.a11y.enableEl(e))}},updatePagination:function(){var t=this,e=t.params.a11y;t.pagination&&t.params.pagination.clickable&&t.pagination.bullets&&t.pagination.bullets.length&&t.pagination.bullets.each(function(i,r){var s=n(r);t.a11y.makeElFocusable(s),t.a11y.addElRole(s,"button"),t.a11y.addElLabel(s,e.paginationBulletMessage.replace(/{{index}}/,s.index()+1))})},init:function(){var t=this;t.$el.append(t.a11y.liveRegion);var e,i,n=t.params.a11y;t.navigation&&t.navigation.$nextEl&&(e=t.navigation.$nextEl),t.navigation&&t.navigation.$prevEl&&(i=t.navigation.$prevEl),e&&(t.a11y.makeElFocusable(e),t.a11y.addElRole(e,"button"),t.a11y.addElLabel(e,n.nextSlideMessage),e.on("keydown",t.a11y.onEnterKey)),i&&(t.a11y.makeElFocusable(i),t.a11y.addElRole(i,"button"),t.a11y.addElLabel(i,n.prevSlideMessage),i.on("keydown",t.a11y.onEnterKey)),t.pagination&&t.params.pagination.clickable&&t.pagination.bullets&&t.pagination.bullets.length&&t.pagination.$el.on("keydown","."+t.params.pagination.bulletClass,t.a11y.onEnterKey)},destroy:function(){var t,e,i=this;i.a11y.liveRegion&&i.a11y.liveRegion.length>0&&i.a11y.liveRegion.remove(),i.navigation&&i.navigation.$nextEl&&(t=i.navigation.$nextEl),i.navigation&&i.navigation.$prevEl&&(e=i.navigation.$prevEl),t&&t.off("keydown",i.a11y.onEnterKey),e&&e.off("keydown",i.a11y.onEnterKey),i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.$el.off("keydown","."+i.params.pagination.bulletClass,i.a11y.onEnterKey)}},J={init:function(){if(this.params.history){if(!e.history||!e.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var t=this.history;t.initialized=!0,t.paths=J.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||e.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||e.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=J.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var t=e.location.pathname.slice(1).split("/").filter(function(t){return""!==t}),i=t.length;return{key:t[i-2],value:t[i-1]}},setHistory:function(t,i){if(this.history.initialized&&this.params.history.enabled){var n=this.slides.eq(i),r=J.slugify(n.attr("data-history"));e.location.pathname.includes(t)||(r=t+"/"+r);var s=e.history.state;s&&s.value===r||(this.params.history.replaceState?e.history.replaceState({value:r},null,r):e.history.pushState({value:r},null,r))}},slugify:function(t){return t.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(t,e,i){if(e)for(var n=0,r=this.slides.length;n<r;n+=1){var s=this.slides.eq(n);if(J.slugify(s.attr("data-history"))===e&&!s.hasClass(this.params.slideDuplicateClass)){var o=s.index();this.slideTo(o,t,i)}}else this.slideTo(0,t,i)}},tt={onHashCange:function(){var e=t.location.hash.replace("#","");e!==this.slides.eq(this.activeIndex).attr("data-hash")&&this.slideTo(this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+e+'"]').index())},setHash:function(){if(this.hashNavigation.initialized&&this.params.hashNavigation.enabled)if(this.params.hashNavigation.replaceState&&e.history&&e.history.replaceState)e.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||"");else{var i=this.slides.eq(this.activeIndex),n=i.attr("data-hash")||i.attr("data-history");t.location.hash=n||""}},init:function(){var i=this;if(!(!i.params.hashNavigation.enabled||i.params.history&&i.params.history.enabled)){i.hashNavigation.initialized=!0;var r=t.location.hash.replace("#","");if(r)for(var s=0,o=i.slides.length;s<o;s+=1){var a=i.slides.eq(s);if((a.attr("data-hash")||a.attr("data-history"))===r&&!a.hasClass(i.params.slideDuplicateClass)){var l=a.index();i.slideTo(l,0,i.params.runCallbacksOnInit,!0)}}i.params.hashNavigation.watchState&&n(e).on("hashchange",i.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&n(e).off("hashchange",this.hashNavigation.onHashCange)}},et={run:function(){var t=this,e=t.slides.eq(t.activeIndex),i=t.params.autoplay.delay;e.attr("data-swiper-autoplay")&&(i=e.attr("data-swiper-autoplay")||t.params.autoplay.delay),t.autoplay.timeout=u.nextTick(function(){t.params.autoplay.reverseDirection?t.params.loop?(t.loopFix(),t.slidePrev(t.params.speed,!0,!0),t.emit("autoplay")):t.isBeginning?t.params.autoplay.stopOnLastSlide?t.autoplay.stop():(t.slideTo(t.slides.length-1,t.params.speed,!0,!0),t.emit("autoplay")):(t.slidePrev(t.params.speed,!0,!0),t.emit("autoplay")):t.params.loop?(t.loopFix(),t.slideNext(t.params.speed,!0,!0),t.emit("autoplay")):t.isEnd?t.params.autoplay.stopOnLastSlide?t.autoplay.stop():(t.slideTo(0,t.params.speed,!0,!0),t.emit("autoplay")):(t.slideNext(t.params.speed,!0,!0),t.emit("autoplay"))},i)},start:function(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop:function(){return!!this.autoplay.running&&(void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0))},pause:function(t){var e=this;e.autoplay.running&&(e.autoplay.paused||(e.autoplay.timeout&&clearTimeout(e.autoplay.timeout),e.autoplay.paused=!0,0!==t&&e.params.autoplay.waitForTransition?e.$wrapperEl.transitionEnd(function(){e&&!e.destroyed&&(e.autoplay.paused=!1,e.autoplay.running?e.autoplay.run():e.autoplay.stop())}):(e.autoplay.paused=!1,e.autoplay.run())))}},it={setTranslate:function(){for(var t=this.slides,e=0;e<t.length;e+=1){var i=this.slides.eq(e),n=-i[0].swiperSlideOffset;this.params.virtualTranslate||(n-=this.translate);var r=0;this.isHorizontal()||(r=n,n=0);var s=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:s}).transform("translate3d("+n+"px, "+r+"px, 0px)")}},setTransition:function(t){var e=this,i=e.slides,n=e.$wrapperEl;if(i.transition(t),e.params.virtualTranslate&&0!==t){var r=!1;i.transitionEnd(function(){if(!r&&e&&!e.destroyed){r=!0,e.animating=!1;for(var t=["webkitTransitionEnd","transitionend"],i=0;i<t.length;i+=1)n.trigger(t[i])}})}}},nt={setTranslate:function(){var t,e=this,i=e.$el,r=e.$wrapperEl,s=e.slides,o=e.width,a=e.height,l=e.rtl,u=e.size,c=e.params.cubeEffect,d=e.isHorizontal(),h=e.virtual&&e.params.virtual.enabled,p=0;c.shadow&&(d?(0===(t=r.find(".swiper-cube-shadow")).length&&(t=n('<div class="swiper-cube-shadow"></div>'),r.append(t)),t.css({height:o+"px"})):0===(t=i.find(".swiper-cube-shadow")).length&&(t=n('<div class="swiper-cube-shadow"></div>'),i.append(t)));for(var f=0;f<s.length;f+=1){var m=s.eq(f),g=f;h&&(g=parseInt(m.attr("data-swiper-slide-index"),10));var v=90*g,y=Math.floor(v/360);l&&(v=-v,y=Math.floor(-v/360));var w=Math.max(Math.min(m[0].progress,1),-1),b=0,x=0,_=0;g%4==0?(b=4*-y*u,_=0):(g-1)%4==0?(b=0,_=4*-y*u):(g-2)%4==0?(b=u+4*y*u,_=u):(g-3)%4==0&&(b=-u,_=3*u+4*u*y),l&&(b=-b),d||(x=b,b=0);var E="rotateX("+(d?0:-v)+"deg) rotateY("+(d?v:0)+"deg) translate3d("+b+"px, "+x+"px, "+_+"px)";if(w<=1&&w>-1&&(p=90*g+90*w,l&&(p=90*-g-90*w)),m.transform(E),c.slideShadows){var T=d?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),C=d?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom");0===T.length&&(T=n('<div class="swiper-slide-shadow-'+(d?"left":"top")+'"></div>'),m.append(T)),0===C.length&&(C=n('<div class="swiper-slide-shadow-'+(d?"right":"bottom")+'"></div>'),m.append(C)),T.length&&(T[0].style.opacity=Math.max(-w,0)),C.length&&(C[0].style.opacity=Math.max(w,0))}}if(r.css({"-webkit-transform-origin":"50% 50% -"+u/2+"px","-moz-transform-origin":"50% 50% -"+u/2+"px","-ms-transform-origin":"50% 50% -"+u/2+"px","transform-origin":"50% 50% -"+u/2+"px"}),c.shadow)if(d)t.transform("translate3d(0px, "+(o/2+c.shadowOffset)+"px, "+-o/2+"px) rotateX(90deg) rotateZ(0deg) scale("+c.shadowScale+")");else{var S=Math.abs(p)-90*Math.floor(Math.abs(p)/90),I=1.5-(Math.sin(2*S*Math.PI/360)/2+Math.cos(2*S*Math.PI/360)/2),D=c.shadowScale,A=c.shadowScale/I,L=c.shadowOffset;t.transform("scale3d("+D+", 1, "+A+") translate3d(0px, "+(a/2+L)+"px, "+-a/2/A+"px) rotateX(-90deg)")}var O=k.isSafari||k.isUiWebView?-u/2:0;r.transform("translate3d(0px,0,"+O+"px) rotateX("+(e.isHorizontal()?0:p)+"deg) rotateY("+(e.isHorizontal()?-p:0)+"deg)")},setTransition:function(t){var e=this.$el;this.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),this.params.cubeEffect.shadow&&!this.isHorizontal()&&e.find(".swiper-cube-shadow").transition(t)}},rt={setTranslate:function(){for(var t=this.slides,e=0;e<t.length;e+=1){var i=t.eq(e),r=i[0].progress;this.params.flipEffect.limitRotation&&(r=Math.max(Math.min(i[0].progress,1),-1));var s=-180*r,o=0,a=-i[0].swiperSlideOffset,l=0;if(this.isHorizontal()?this.rtl&&(s=-s):(l=a,a=0,o=-s,s=0),i[0].style.zIndex=-Math.abs(Math.round(r))+t.length,this.params.flipEffect.slideShadows){var u=this.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),c=this.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===u.length&&(u=n('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),i.append(u)),0===c.length&&(c=n('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),i.append(c)),u.length&&(u[0].style.opacity=Math.max(-r,0)),c.length&&(c[0].style.opacity=Math.max(r,0))}i.transform("translate3d("+a+"px, "+l+"px, 0px) rotateX("+o+"deg) rotateY("+s+"deg)")}},setTransition:function(t){var e=this,i=e.slides,n=e.activeIndex,r=e.$wrapperEl;if(i.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),e.params.virtualTranslate&&0!==t){var s=!1;i.eq(n).transitionEnd(function(){if(!s&&e&&!e.destroyed){s=!0,e.animating=!1;for(var t=["webkitTransitionEnd","transitionend"],i=0;i<t.length;i+=1)r.trigger(t[i])}})}}},st={setTranslate:function(){for(var t=this.width,e=this.height,i=this.slides,r=this.$wrapperEl,s=this.slidesSizesGrid,o=this.params.coverflowEffect,a=this.isHorizontal(),l=this.translate,u=a?t/2-l:e/2-l,d=a?o.rotate:-o.rotate,h=o.depth,p=0,f=i.length;p<f;p+=1){var m=i.eq(p),g=s[p],v=(u-m[0].swiperSlideOffset-g/2)/g*o.modifier,y=a?d*v:0,w=a?0:d*v,b=-h*Math.abs(v),x=a?0:o.stretch*v,_=a?o.stretch*v:0;Math.abs(_)<.001&&(_=0),Math.abs(x)<.001&&(x=0),Math.abs(b)<.001&&(b=0),Math.abs(y)<.001&&(y=0),Math.abs(w)<.001&&(w=0);var E="translate3d("+_+"px,"+x+"px,"+b+"px)  rotateX("+w+"deg) rotateY("+y+"deg)";if(m.transform(E),m[0].style.zIndex=1-Math.abs(Math.round(v)),o.slideShadows){var T=a?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),C=a?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom");0===T.length&&(T=n('<div class="swiper-slide-shadow-'+(a?"left":"top")+'"></div>'),m.append(T)),0===C.length&&(C=n('<div class="swiper-slide-shadow-'+(a?"right":"bottom")+'"></div>'),m.append(C)),T.length&&(T[0].style.opacity=v>0?v:0),C.length&&(C[0].style.opacity=-v>0?-v:0)}}(c.pointerEvents||c.prefixedPointerEvents)&&(r[0].style.perspectiveOrigin=u+"px 50%")},setTransition:function(t){this.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t)}},ot=[P,z,N,$,H,W,B,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){u.extend(this,{mousewheel:{enabled:!1,enable:F.enable.bind(this),disable:F.disable.bind(this),handle:F.handle.bind(this),lastScrollTime:u.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){u.extend(this,{navigation:{init:V.init.bind(this),update:V.update.bind(this),destroy:V.destroy.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(t){var e=this.navigation,i=e.$nextEl,r=e.$prevEl;!this.params.navigation.hideOnClick||n(t.target).is(r)||n(t.target).is(i)||(i&&i.toggleClass(this.params.navigation.hiddenClass),r&&r.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){u.extend(this,{pagination:{init:Y.init.bind(this),render:Y.render.bind(this),update:Y.update.bind(this),destroy:Y.destroy.bind(this),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){this.params.loop?this.pagination.update():void 0===this.snapIndex&&this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(t){this.params.pagination.el&&this.params.pagination.hideOnClick&&this.pagination.$el.length>0&&!n(t.target).hasClass(this.params.pagination.bulletClass)&&this.pagination.$el.toggleClass(this.params.pagination.hiddenClass)}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var t=this;u.extend(t,{scrollbar:{init:G.init.bind(t),destroy:G.destroy.bind(t),updateSize:G.updateSize.bind(t),setTranslate:G.setTranslate.bind(t),setTransition:G.setTransition.bind(t),enableDraggable:G.enableDraggable.bind(t),disableDraggable:G.disableDraggable.bind(t),setDragPosition:G.setDragPosition.bind(t),onDragStart:G.onDragStart.bind(t),onDragMove:G.onDragMove.bind(t),onDragEnd:G.onDragEnd.bind(t),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(t){this.scrollbar.setTransition(t)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){u.extend(this,{parallax:{setTransform:U.setTransform.bind(this),setTranslate:U.setTranslate.bind(this),setTransition:U.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0)},init:function(){this.params.parallax&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax&&this.parallax.setTranslate()},setTransition:function(t){this.params.parallax&&this.parallax.setTransition(t)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var t=this,e={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(i){e[i]=X[i].bind(t)}),u.extend(t,{zoom:e})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(t){this.zoom.enabled&&this.zoom.onTouchStart(t)},touchEnd:function(t){this.zoom.enabled&&this.zoom.onTouchEnd(t)},doubleTap:function(t){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(t)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){u.extend(this,{lazy:{initialImageLoaded:!1,load:Q.load.bind(this),loadInSlide:Q.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){this.params.lazy.enabled&&(this.params.lazy.loadOnTransitionStart||!this.params.lazy.loadOnTransitionStart&&!this.lazy.initialImageLoaded)&&this.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){u.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:K.getInterpolateFunction.bind(this),setTranslate:K.setTranslate.bind(this),setTransition:K.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(t,e){this.controller.control&&this.controller.setTranslate(t,e)},setTransition:function(t,e){this.controller.control&&this.controller.setTransition(t,e)}}},{name:"a11y",params:{a11y:{enabled:!1,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;u.extend(t,{a11y:{liveRegion:n('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(Z).forEach(function(e){t.a11y[e]=Z[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){u.extend(this,{history:{init:J.init.bind(this),setHistory:J.setHistory.bind(this),setHistoryPopState:J.setHistoryPopState.bind(this),scrollToSlide:J.scrollToSlide.bind(this),destroy:J.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){u.extend(this,{hashNavigation:{initialized:!1,init:tt.init.bind(this),destroy:tt.destroy.bind(this),setHash:tt.setHash.bind(this),onHashCange:tt.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){u.extend(this,{autoplay:{running:!1,paused:!1,run:et.run.bind(this),start:et.start.bind(this),stop:et.stop.bind(this),pause:et.pause.bind(this)}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(t,e){this.autoplay.running&&(e||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(t):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){u.extend(this,{fadeEffect:{setTranslate:it.setTranslate.bind(this),setTransition:it.setTransition.bind(this)}})},on:{beforeInit:function(){if("fade"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,t),u.extend(this.originalParams,t)}},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(t){"fade"===this.params.effect&&this.fadeEffect.setTransition(t)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){u.extend(this,{cubeEffect:{setTranslate:nt.setTranslate.bind(this),setTransition:nt.setTransition.bind(this)}})},on:{beforeInit:function(){if("cube"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};u.extend(this.params,t),u.extend(this.originalParams,t)}},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(t){"cube"===this.params.effect&&this.cubeEffect.setTransition(t)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){u.extend(this,{flipEffect:{setTranslate:rt.setTranslate.bind(this),setTransition:rt.setTransition.bind(this)}})},on:{beforeInit:function(){if("flip"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,t),u.extend(this.originalParams,t)}},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(t){"flip"===this.params.effect&&this.flipEffect.setTransition(t)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){u.extend(this,{coverflowEffect:{setTranslate:st.setTranslate.bind(this),setTransition:st.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(t){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(t)}}}];return void 0===M.use&&(M.use=M.Class.use,M.installModule=M.Class.installModule),M.use(ot),M}),function(){var t,e,i,n,r,s=function(t,e){return function(){return t.apply(e,arguments)}},o=[].indexOf||function(t){for(var e=0,i=this.length;e<i;e++)if(e in this&&this[e]===t)return e;return-1};e=function(){function t(){}return t.prototype.extend=function(t,e){var i,n;for(i in e)n=e[i],null==t[i]&&(t[i]=n);return t},t.prototype.isMobile=function(t){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t)},t.prototype.createEvent=function(t,e,i,n){var r;return null==e&&(e=!1),null==i&&(i=!1),null==n&&(n=null),null!=document.createEvent?(r=document.createEvent("CustomEvent")).initCustomEvent(t,e,i,n):null!=document.createEventObject?(r=document.createEventObject()).eventType=t:r.eventName=t,r},t.prototype.emitEvent=function(t,e){return null!=t.dispatchEvent?t.dispatchEvent(e):e in(null!=t)?t[e]():"on"+e in(null!=t)?t["on"+e]():void 0},t.prototype.addEvent=function(t,e,i){return null!=t.addEventListener?t.addEventListener(e,i,!1):null!=t.attachEvent?t.attachEvent("on"+e,i):t[e]=i},t.prototype.removeEvent=function(t,e,i){return null!=t.removeEventListener?t.removeEventListener(e,i,!1):null!=t.detachEvent?t.detachEvent("on"+e,i):delete t[e]},t.prototype.innerHeight=function(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight},t}(),i=this.WeakMap||this.MozWeakMap||(i=function(){function t(){this.keys=[],this.values=[]}return t.prototype.get=function(t){var e,i,n,r;for(e=i=0,n=(r=this.keys).length;i<n;e=++i)if(r[e]===t)return this.values[e]},t.prototype.set=function(t,e){var i,n,r,s;for(i=n=0,r=(s=this.keys).length;n<r;i=++n)if(s[i]===t)return void(this.values[i]=e);return this.keys.push(t),this.values.push(e)},t}()),t=this.MutationObserver||this.WebkitMutationObserver||this.MozMutationObserver||(t=function(){function t(){"undefined"!=typeof console&&null!==console&&console.warn("MutationObserver is not supported by your browser."),"undefined"!=typeof console&&null!==console&&console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")}return t.notSupported=!0,t.prototype.observe=function(){},t}()),n=this.getComputedStyle||function(t,e){return this.getPropertyValue=function(e){var i;return"float"===e&&(e="styleFloat"),r.test(e)&&e.replace(r,function(t,e){return e.toUpperCase()}),(null!=(i=t.currentStyle)?i[e]:void 0)||null},this},r=/(\-([a-z]){1})/g,this.WOW=function(){function r(t){null==t&&(t={}),this.scrollCallback=s(this.scrollCallback,this),this.scrollHandler=s(this.scrollHandler,this),this.resetAnimation=s(this.resetAnimation,this),this.start=s(this.start,this),this.scrolled=!0,this.config=this.util().extend(t,this.defaults),this.animationNameCache=new i,this.wowEvent=this.util().createEvent(this.config.boxClass)}return r.prototype.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null},r.prototype.init=function(){var t;return this.element=window.document.documentElement,"interactive"===(t=document.readyState)||"complete"===t?this.start():this.util().addEvent(document,"DOMContentLoaded",this.start),this.finished=[]},r.prototype.start=function(){var e,i,n,r,s;if(this.stopped=!1,this.boxes=function(){var t,i,n,r;for(r=[],t=0,i=(n=this.element.querySelectorAll("."+this.config.boxClass)).length;t<i;t++)e=n[t],r.push(e);return r}.call(this),this.all=function(){var t,i,n,r;for(r=[],t=0,i=(n=this.boxes).length;t<i;t++)e=n[t],r.push(e);return r}.call(this),this.boxes.length)if(this.disabled())this.resetStyle();else for(i=0,n=(r=this.boxes).length;i<n;i++)e=r[i],this.applyStyle(e,!0);if(this.disabled()||(this.util().addEvent(window,"scroll",this.scrollHandler),this.util().addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live)return new t((s=this,function(t){var e,i,n,r,o;for(o=[],e=0,i=t.length;e<i;e++)r=t[e],o.push(function(){var t,e,i,s;for(s=[],t=0,e=(i=r.addedNodes||[]).length;t<e;t++)n=i[t],s.push(this.doSync(n));return s}.call(s));return o})).observe(document.body,{childList:!0,subtree:!0})},r.prototype.stop=function(){if(this.stopped=!0,this.util().removeEvent(window,"scroll",this.scrollHandler),this.util().removeEvent(window,"resize",this.scrollHandler),null!=this.interval)return clearInterval(this.interval)},r.prototype.sync=function(e){if(t.notSupported)return this.doSync(this.element)},r.prototype.doSync=function(t){var e,i,n,r,s;if(null==t&&(t=this.element),1===t.nodeType){for(s=[],i=0,n=(r=(t=t.parentNode||t).querySelectorAll("."+this.config.boxClass)).length;i<n;i++)e=r[i],o.call(this.all,e)<0?(this.boxes.push(e),this.all.push(e),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(e,!0),s.push(this.scrolled=!0)):s.push(void 0);return s}},r.prototype.show=function(t){return this.applyStyle(t),t.className=t.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(t),this.util().emitEvent(t,this.wowEvent),this.util().addEvent(t,"animationend",this.resetAnimation),this.util().addEvent(t,"oanimationend",this.resetAnimation),this.util().addEvent(t,"webkitAnimationEnd",this.resetAnimation),this.util().addEvent(t,"MSAnimationEnd",this.resetAnimation),t},r.prototype.applyStyle=function(t,e){var i,n,r,s;return n=t.getAttribute("data-wow-duration"),i=t.getAttribute("data-wow-delay"),r=t.getAttribute("data-wow-iteration"),this.animate((s=this,function(){return s.customStyle(t,e,n,i,r)}))},r.prototype.animate="requestAnimationFrame"in window?function(t){return window.requestAnimationFrame(t)}:function(t){return t()},r.prototype.resetStyle=function(){var t,e,i,n,r;for(r=[],e=0,i=(n=this.boxes).length;e<i;e++)t=n[e],r.push(t.style.visibility="visible");return r},r.prototype.resetAnimation=function(t){var e;if(t.type.toLowerCase().indexOf("animationend")>=0)return(e=t.target||t.srcElement).className=e.className.replace(this.config.animateClass,"").trim()},r.prototype.customStyle=function(t,e,i,n,r){return e&&this.cacheAnimationName(t),t.style.visibility=e?"hidden":"visible",i&&this.vendorSet(t.style,{animationDuration:i}),n&&this.vendorSet(t.style,{animationDelay:n}),r&&this.vendorSet(t.style,{animationIterationCount:r}),this.vendorSet(t.style,{animationName:e?"none":this.cachedAnimationName(t)}),t},r.prototype.vendors=["moz","webkit"],r.prototype.vendorSet=function(t,e){var i,n,r,s;for(i in n=[],e)r=e[i],t[""+i]=r,n.push(function(){var e,n,o,a;for(a=[],e=0,n=(o=this.vendors).length;e<n;e++)s=o[e],a.push(t[""+s+i.charAt(0).toUpperCase()+i.substr(1)]=r);return a}.call(this));return n},r.prototype.vendorCSS=function(t,e){var i,r,s,o,a,l;for(o=(a=n(t)).getPropertyCSSValue(e),i=0,r=(s=this.vendors).length;i<r;i++)l=s[i],o=o||a.getPropertyCSSValue("-"+l+"-"+e);return o},r.prototype.animationName=function(t){var e;try{e=this.vendorCSS(t,"animation-name").cssText}catch(i){e=n(t).getPropertyValue("animation-name")}return"none"===e?"":e},r.prototype.cacheAnimationName=function(t){return this.animationNameCache.set(t,this.animationName(t))},r.prototype.cachedAnimationName=function(t){return this.animationNameCache.get(t)},r.prototype.scrollHandler=function(){return this.scrolled=!0},r.prototype.scrollCallback=function(){var t;if(this.scrolled&&(this.scrolled=!1,this.boxes=function(){var e,i,n,r;for(r=[],e=0,i=(n=this.boxes).length;e<i;e++)(t=n[e])&&(this.isVisible(t)?this.show(t):r.push(t));return r}.call(this),!this.boxes.length&&!this.config.live))return this.stop()},r.prototype.offsetTop=function(t){for(var e;void 0===t.offsetTop;)t=t.parentNode;for(e=t.offsetTop;t=t.offsetParent;)e+=t.offsetTop;return e},r.prototype.isVisible=function(t){var e,i,n,r,s;return i=t.getAttribute("data-wow-offset")||this.config.offset,r=(s=window.pageYOffset)+Math.min(this.element.clientHeight,this.util().innerHeight())-i,e=(n=this.offsetTop(t))+t.clientHeight,n<=r&&e>=s},r.prototype.util=function(){return null!=this._util?this._util:this._util=new e},r.prototype.disabled=function(){return!this.config.mobile&&this.util().isMobile(navigator.userAgent)},r}()}.call(this),function(t){function e(){}function i(t){if(t){var i="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(e,r){var s,o,a;(a=r).prototype.option||(a.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))}),s=e,o=r,t.fn[s]=function(e){if("string"==typeof e){for(var r=n.call(arguments,1),a=0,l=this.length;l>a;a++){var u=this[a],c=t.data(u,s);if(c)if(t.isFunction(c[e])&&"_"!==e.charAt(0)){var d=c[e].apply(c,r);if(void 0!==d)return d}else i("no such method '"+e+"' for "+s+" instance");else i("cannot call methods on "+s+" prior to initialization; attempted to call '"+e+"'")}return this}return this.each(function(){var i=t.data(this,s);i?(i.option(e),i._init()):(i=new o(this,e),t.data(this,s,i))})}},t.bridget}}var n=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],i):i("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(e){var i=t.event;return i.target=i.target||i.srcElement||e,i}var i=document.documentElement,n=function(){};i.addEventListener?n=function(t,e,i){t.addEventListener(e,i,!1)}:i.attachEvent&&(n=function(t,i,n){t[i+n]=n.handleEvent?function(){var i=e(t);n.handleEvent.call(n,i)}:function(){var i=e(t);n.call(t,i)},t.attachEvent("on"+i,t[i+n])});var r=function(){};i.removeEventListener?r=function(t,e,i){t.removeEventListener(e,i,!1)}:i.detachEvent&&(r=function(t,e,i){t.detachEvent("on"+e,t[e+i]);try{delete t[e+i]}catch(n){t[e+i]=void 0}});var s={bind:n,unbind:r};"function"==typeof define&&define.amd?define("eventie/eventie",s):"object"==typeof exports?module.exports=s:t.eventie=s}(window),function(){"use strict";function t(){}function e(t,e){for(var i=t.length;i--;)if(t[i].listener===e)return i;return-1}function i(t){return function(){return this[t].apply(this,arguments)}}var n=t.prototype,r=this,s=r.EventEmitter;n.getListeners=function(t){var e,i,n=this._getEvents();if(t instanceof RegExp)for(i in e={},n)n.hasOwnProperty(i)&&t.test(i)&&(e[i]=n[i]);else e=n[t]||(n[t]=[]);return e},n.flattenListeners=function(t){var e,i=[];for(e=0;e<t.length;e+=1)i.push(t[e].listener);return i},n.getListenersAsObject=function(t){var e,i=this.getListeners(t);return i instanceof Array&&((e={})[t]=i),e||i},n.addListener=function(t,i){var n,r=this.getListenersAsObject(t),s="object"==typeof i;for(n in r)r.hasOwnProperty(n)&&-1===e(r[n],i)&&r[n].push(s?i:{listener:i,once:!1});return this},n.on=i("addListener"),n.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},n.once=i("addOnceListener"),n.defineEvent=function(t){return this.getListeners(t),this},n.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},n.removeListener=function(t,i){var n,r,s=this.getListenersAsObject(t);for(r in s)s.hasOwnProperty(r)&&(-1!==(n=e(s[r],i))&&s[r].splice(n,1));return this},n.off=i("removeListener"),n.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},n.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},n.manipulateListeners=function(t,e,i){var n,r,s=t?this.removeListener:this.addListener,o=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(n=i.length;n--;)s.call(this,e,i[n]);else for(n in e)e.hasOwnProperty(n)&&(r=e[n])&&("function"==typeof r?s.call(this,n,r):o.call(this,n,r));return this},n.removeEvent=function(t){var e,i=typeof t,n=this._getEvents();if("string"===i)delete n[t];else if(t instanceof RegExp)for(e in n)n.hasOwnProperty(e)&&t.test(e)&&delete n[e];else delete this._events;return this},n.removeAllListeners=i("removeEvent"),n.emitEvent=function(t,e){var i,n,r,s=this.getListenersAsObject(t);for(r in s)if(s.hasOwnProperty(r))for(n=s[r].length;n--;)!0===(i=s[r][n]).once&&this.removeListener(t,i.listener),i.listener.apply(this,e||[])===this._getOnceReturnValue()&&this.removeListener(t,i.listener);return this},n.trigger=i("emitEvent"),n.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},n.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},n._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},n._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=s,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}.call(this),function(t){function e(t){if(t){if("string"==typeof n[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,r=0,s=i.length;s>r;r++)if(e=i[r]+t,"string"==typeof n[e])return e}}var i="Webkit Moz ms Ms O".split(" "),n=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function i(t){var e=parseFloat(t);return-1===t.indexOf("%")&&!isNaN(e)&&e}function n(e){function n(e,i){if(t.getComputedStyle||-1===i.indexOf("%"))return i;var n=e.style,r=n.left,s=e.runtimeStyle,o=s&&s.left;return o&&(s.left=e.currentStyle.left),n.left=i,i=n.pixelLeft,n.left=r,o&&(s.left=o),i}var o,a,l,u=!1;return function(c){if(function(){if(!u){u=!0;var n=t.getComputedStyle;if(h=n?function(t){return n(t,null)}:function(t){return t.currentStyle},o=function(t){var e=h(t);return e||r("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),e},a=e("boxSizing")){var s=document.createElement("div");s.style.width="200px",s.style.padding="1px 2px 3px 4px",s.style.borderStyle="solid",s.style.borderWidth="1px 2px 3px 4px",s.style[a]="border-box";var c=document.body||document.documentElement;c.appendChild(s);var d=o(s);l=200===i(d.width),c.removeChild(s)}}var h}(),"string"==typeof c&&(c=document.querySelector(c)),c&&"object"==typeof c&&c.nodeType){var d=o(c);if("none"===d.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,i=s.length;i>e;e++)t[s[e]]=0;return t}();var h={};h.width=c.offsetWidth,h.height=c.offsetHeight;for(var p=h.isBorderBox=!(!a||!d[a]||"border-box"!==d[a]),f=0,m=s.length;m>f;f++){var g=s[f],v=d[g];v=n(c,v);var y=parseFloat(v);h[g]=isNaN(y)?0:y}var w=h.paddingLeft+h.paddingRight,b=h.paddingTop+h.paddingBottom,x=h.marginLeft+h.marginRight,_=h.marginTop+h.marginBottom,E=h.borderLeftWidth+h.borderRightWidth,T=h.borderTopWidth+h.borderBottomWidth,C=p&&l,S=i(d.width);!1!==S&&(h.width=S+(C?0:w+E));var I=i(d.height);return!1!==I&&(h.height=I+(C?0:b+T)),h.innerWidth=h.width-(w+E),h.innerHeight=h.height-(b+T),h.outerWidth=h.width+x,h.outerHeight=h.height+_,h}}}var r="undefined"==typeof console?function(){}:function(t){console.error(t)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],n):"object"==typeof exports?module.exports=n(require("desandro-get-style-property")):t.getSize=n(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():o.push(t))}function i(t){var i="readystatechange"===t.type&&"complete"!==s.readyState;e.isReady||i||n()}function n(){e.isReady=!0;for(var t=0,i=o.length;i>t;t++){(0,o[t])()}}function r(r){return"complete"===s.readyState?n():(r.bind(s,"DOMContentLoaded",i),r.bind(s,"readystatechange",i),r.bind(t,"load",i)),e}var s=t.document,o=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],r):"object"==typeof exports?module.exports=r(require("eventie")):t.docReady=r(t.eventie)}(window),function(t){"use strict";function e(t,e){return t[r](e)}function i(t){t.parentNode||document.createDocumentFragment().appendChild(t)}var n,r=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0,n=e.length;n>i;i++){var r=e[i]+"MatchesSelector";if(t[r])return r}}();if(r){var s=e(document.createElement("div"),"div");n=s?e:function(t,n){return i(t),e(t,n)}}else n=function(t,e){i(t);for(var n=t.parentNode.querySelectorAll(e),r=0,s=n.length;s>r;r++)if(n[r]===t)return!0;return!1};"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return n}):"object"==typeof exports?module.exports=n:window.matchesSelector=n}(Element.prototype),function(t,e){"use strict";"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(i,n){return e(t,i,n)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,i){var n,r={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},s=Object.prototype.toString;r.isArray=function(t){return"[object Array]"==s.call(t)},r.makeArray=function(t){var e=[];if(r.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var i=0,n=t.length;n>i;i++)e.push(t[i]);else e.push(t);return e},r.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var i=0,n=t.length;n>i;i++)if(t[i]===e)return i;return-1},r.removeFrom=function(t,e){var i=r.indexOf(t,e);-1!=i&&t.splice(i,1)},r.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},r.setText=function(t,e){t[n=n||(void 0!==document.documentElement.textContent?"textContent":"innerText")]=e},r.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,i(t,e))return t},r.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},r.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},r.filterFindElements=function(t,e){for(var n=[],s=0,o=(t=r.makeArray(t)).length;o>s;s++){var a=t[s];if(r.isElement(a))if(e){i(a,e)&&n.push(a);for(var l=a.querySelectorAll(e),u=0,c=l.length;c>u;u++)n.push(l[u])}else n.push(a)}return n},r.debounceMethod=function(t,e,i){var n=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,s=this;this[r]=setTimeout(function(){n.apply(s,e),delete s[r]},i||100)}},r.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()};var o=t.console;return r.htmlInit=function(i,n){e(function(){for(var e=r.toDashed(n),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",l=0,u=s.length;u>l;l++){var c,d=s[l],h=d.getAttribute(a);try{c=h&&JSON.parse(h)}catch(t){o&&o.error("Error parsing "+a+" on "+d.nodeName.toLowerCase()+(d.id?"#"+d.id:"")+": "+t);continue}var p=new i(d,c),f=t.jQuery;f&&f.data(d,n,p)}})},r}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(i,n,r,s){return e(t,i,n,r,s)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Outlayer={},t.Outlayer.Item=e(t,t.EventEmitter,t.getSize,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,i,n,r){"use strict";function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var o=t.getComputedStyle,a=o?function(t){return o(t,null)}:function(t){return t.currentStyle},l=n("transition"),u=n("transform"),c=l&&u,d=!!n("perspective"),h={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[l],p=["transform","transition","transitionDuration","transitionProperty"],f=function(){for(var t={},e=0,i=p.length;i>e;e++){var r=p[e],s=n(r);s&&s!==r&&(t[r]=s)}return t}();r.extend(s.prototype,e.prototype),s.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.getSize=function(){this.size=i(this.element)},s.prototype.css=function(t){var e=this.element.style;for(var i in t){e[f[i]||i]=t[i]}},s.prototype.getPosition=function(){var t=a(this.element),e=this.layout.options,i=e.isOriginLeft,n=e.isOriginTop,r=t[i?"left":"right"],s=t[n?"top":"bottom"],o=this.layout.size,l=-1!=r.indexOf("%")?parseFloat(r)/100*o.width:parseInt(r,10),u=-1!=s.indexOf("%")?parseFloat(s)/100*o.height:parseInt(s,10);l=isNaN(l)?0:l,u=isNaN(u)?0:u,l-=i?o.paddingLeft:o.paddingRight,u-=n?o.paddingTop:o.paddingBottom,this.position.x=l,this.position.y=u},s.prototype.layoutPosition=function(){var t=this.layout.size,e=this.layout.options,i={},n=e.isOriginLeft?"paddingLeft":"paddingRight",r=e.isOriginLeft?"left":"right",s=e.isOriginLeft?"right":"left",o=this.position.x+t[n];i[r]=this.getXValue(o),i[s]="";var a=e.isOriginTop?"paddingTop":"paddingBottom",l=e.isOriginTop?"top":"bottom",u=e.isOriginTop?"bottom":"top",c=this.position.y+t[a];i[l]=this.getYValue(c),i[u]="",this.css(i),this.emitEvent("layout",[this])},s.prototype.getXValue=function(t){var e=this.layout.options;return e.percentPosition&&!e.isHorizontal?t/this.layout.size.width*100+"%":t+"px"},s.prototype.getYValue=function(t){var e=this.layout.options;return e.percentPosition&&e.isHorizontal?t/this.layout.size.height*100+"%":t+"px"},s.prototype._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,r=parseInt(t,10),s=parseInt(e,10),o=r===this.position.x&&s===this.position.y;if(this.setPosition(t,e),!o||this.isTransitioning){var a=t-i,l=e-n,u={};u.transform=this.getTranslate(a,l),this.transition({to:u,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},s.prototype.getTranslate=function(t,e){var i=this.layout.options;return t=i.isOriginLeft?t:-t,e=i.isOriginTop?e:-e,d?"translate3d("+t+"px, "+e+"px, 0)":"translate("+t+"px, "+e+"px)"},s.prototype.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},s.prototype.moveTo=c?s.prototype._transitionTo:s.prototype.goTo,s.prototype.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},s.prototype._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},s.prototype._transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);if(t.from){this.css(t.from);this.element.offsetHeight;null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var m="opacity,"+(f.transform||"transform").replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()});s.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:m,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(h,this,!1))},s.prototype.transition=s.prototype[l?"_transition":"_nonTransition"],s.prototype.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},s.prototype.onotransitionend=function(t){this.ontransitionend(t)};var g={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};s.prototype.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=g[t.propertyName]||t.propertyName;if(delete e.ingProperties[i],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd)e.onEnd[i].call(this),delete e.onEnd[i];this.emitEvent("transitionEnd",[this])}},s.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(h,this,!1),this.isTransitioning=!1},s.prototype._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var v={transitionProperty:"",transitionDuration:""};return s.prototype.removeTransitionStyles=function(){this.css(v)},s.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},s.prototype.remove=function(){if(l&&parseFloat(this.layout.options.transitionDuration)){var t=this;this.once("transitionEnd",function(){t.removeElem()}),this.hide()}else this.removeElem()},s.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},s.prototype.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},s.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},s.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(i,n,r,s,o){return e(t,i,n,r,s,o)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.eventie,t.EventEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,i,n,r,s){"use strict";function o(t,e){var i=r.getQueryElement(t);if(i){this.element=i,l&&(this.$element=l(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var n=++c;this.element.outlayerGUID=n,d[n]=this,this._create(),this.options.isInitLayout&&this.layout()}else a&&a.error("Bad element for "+this.constructor.namespace+": "+(i||t))}var a=t.console,l=t.jQuery,u=function(){},c=0,d={};return o.namespace="outlayer",o.Item=s,o.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},r.extend(o.prototype,i.prototype),o.prototype.option=function(t){r.extend(this.options,t)},o.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},o.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},o.prototype._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],r=0,s=e.length;s>r;r++){var o=new i(e[r],this);n.push(o)}return n},o.prototype._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},o.prototype.getItemElements=function(){for(var t=[],e=0,i=this.items.length;i>e;e++)t.push(this.items[e].element);return t},o.prototype._init=o.prototype.layout=function(){this._resetLayout(),this._manageStamps();var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},o.prototype._resetLayout=function(){this.getSize()},o.prototype.getSize=function(){this.size=n(this.element)},o.prototype._getMeasurement=function(t,e){var i,s=this.options[t];s?("string"==typeof s?i=this.element.querySelector(s):r.isElement(s)&&(i=s),this[t]=i?n(i)[e]:s):this[t]=0},o.prototype.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},o.prototype._getItemsForLayout=function(t){for(var e=[],i=0,n=t.length;n>i;i++){var r=t[i];r.isIgnored||e.push(r)}return e},o.prototype._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){for(var i=[],n=0,r=t.length;r>n;n++){var s=t[n],o=this._getItemLayoutPosition(s);o.item=s,o.isInstant=e||s.isLayoutInstant,i.push(o)}this._processLayoutQueue(i)}},o.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},o.prototype._processLayoutQueue=function(t){for(var e=0,i=t.length;i>e;e++){var n=t[e];this._positionItem(n.item,n.x,n.y,n.isInstant)}},o.prototype._positionItem=function(t,e,i,n){n?t.goTo(e,i):t.moveTo(e,i)},o.prototype._postLayout=function(){this.resizeContainer()},o.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},o.prototype._getContainerSize=u,o.prototype._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},o.prototype._emitCompleteOnItems=function(t,e){function i(){r.dispatchEvent(t+"Complete",null,[e])}function n(){++o===s&&i()}var r=this,s=e.length;if(e&&s)for(var o=0,a=0,l=e.length;l>a;a++){e[a].once(t,n)}else i()},o.prototype.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),l)if(this.$element=this.$element||l(this.element),e){var r=l.Event(e);r.type=t,this.$element.trigger(r,i)}else this.$element.trigger(t,i)},o.prototype.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},o.prototype.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},o.prototype.stamp=function(t){if(t=this._find(t)){this.stamps=this.stamps.concat(t);for(var e=0,i=t.length;i>e;e++){var n=t[e];this.ignore(n)}}},o.prototype.unstamp=function(t){if(t=this._find(t))for(var e=0,i=t.length;i>e;e++){var n=t[e];r.removeFrom(this.stamps,n),this.unignore(n)}},o.prototype._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=r.makeArray(t)):void 0},o.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var t=0,e=this.stamps.length;e>t;t++){var i=this.stamps[t];this._manageStamp(i)}}},o.prototype._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},o.prototype._manageStamp=u,o.prototype._getElementOffset=function(t){var e=t.getBoundingClientRect(),i=this._boundingRect,r=n(t);return{left:e.left-i.left-r.marginLeft,top:e.top-i.top-r.marginTop,right:i.right-e.right-r.marginRight,bottom:i.bottom-e.bottom-r.marginBottom}},o.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},o.prototype.bindResize=function(){this.isResizeBound||(e.bind(t,"resize",this),this.isResizeBound=!0)},o.prototype.unbindResize=function(){this.isResizeBound&&e.unbind(t,"resize",this),this.isResizeBound=!1},o.prototype.onresize=function(){this.resizeTimeout&&clearTimeout(this.resizeTimeout);var t=this;this.resizeTimeout=setTimeout(function(){t.resize(),delete t.resizeTimeout},100)},o.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},o.prototype.needsResizeLayout=function(){var t=n(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},o.prototype.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},o.prototype.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},o.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},o.prototype.reveal=function(t){this._emitCompleteOnItems("reveal",t);for(var e=t&&t.length,i=0;e&&e>i;i++){t[i].reveal()}},o.prototype.hide=function(t){this._emitCompleteOnItems("hide",t);for(var e=t&&t.length,i=0;e&&e>i;i++){t[i].hide()}},o.prototype.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},o.prototype.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},o.prototype.getItem=function(t){for(var e=0,i=this.items.length;i>e;e++){var n=this.items[e];if(n.element===t)return n}},o.prototype.getItems=function(t){for(var e=[],i=0,n=(t=r.makeArray(t)).length;n>i;i++){var s=t[i],o=this.getItem(s);o&&e.push(o)}return e},o.prototype.remove=function(t){var e=this.getItems(t);if(this._emitCompleteOnItems("remove",e),e&&e.length)for(var i=0,n=e.length;n>i;i++){var s=e[i];s.remove(),r.removeFrom(this.items,s)}},o.prototype.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="";for(var e=0,i=this.items.length;i>e;e++){this.items[e].destroy()}this.unbindResize();var n=this.element.outlayerGUID;delete d[n],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},o.data=function(t){var e=(t=r.getQueryElement(t))&&t.outlayerGUID;return e&&d[e]},o.create=function(t,e){function i(){o.apply(this,arguments)}return Object.create?i.prototype=Object.create(o.prototype):r.extend(i.prototype,o.prototype),i.prototype.constructor=i,i.defaults=r.extend({},o.defaults),r.extend(i.defaults,e),i.prototype.settings={},i.namespace=t,i.data=o.data,(i.Item=function(){s.apply(this,arguments)}).prototype=new s,r.htmlInit(i,t),l&&l.bridget&&l.bridget(t,i),i},o.Item=s,o}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/item",["outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}(e.prototype=new t.Item)._create=function(){this.id=this.layout.itemGUID++,t.Item.prototype._create.call(this),this.sortData={}},e.prototype.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var i in t){var n=e[i];this.sortData[i]=n(this.element,this)}}};var i=e.prototype.destroy;return e.prototype.destroy=function(){i.apply(this,arguments),this.css({display:""})},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(t,e){"use strict";function i(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}return function(){function t(t){return function(){return e.prototype[t].apply(this.isotope,arguments)}}for(var n=["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout"],r=0,s=n.length;s>r;r++){var o=n[r];i.prototype[o]=t(o)}}(),i.prototype.needsVerticalResizeLayout=function(){var e=t(this.isotope.element);return this.isotope.size&&e&&e.innerHeight!=this.isotope.size.innerHeight},i.prototype._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},i.prototype.getColumnWidth=function(){this.getSegmentSize("column","Width")},i.prototype.getRowHeight=function(){this.getSegmentSize("row","Height")},i.prototype.getSegmentSize=function(t,e){var i=t+e,n="outer"+e;if(this._getMeasurement(i,n),!this[i]){var r=this.getFirstItemSize();this[i]=r&&r[n]||this.isotope.size["inner"+e]}},i.prototype.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},i.prototype.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},i.prototype.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},i.modes={},i.create=function(t,e){function n(){i.apply(this,arguments)}return n.prototype=new i,e&&(n.options=e),n.prototype.namespace=t,i.modes[t]=n,n},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("masonry/masonry",["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],e):"object"==typeof exports?module.exports=e(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):t.Masonry=e(t.Outlayer,t.getSize,t.fizzyUIUtils)}(window,function(t,e,i){var n=t.create("masonry");return n.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var t=this.cols;for(this.colYs=[];t--;)this.colYs.push(0);this.maxY=0},n.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],i=t&&t.element;this.columnWidth=i&&e(i).outerWidth||this.containerWidth}var n=this.columnWidth+=this.gutter,r=this.containerWidth+this.gutter,s=r/n,o=n-r%n;s=Math[o&&1>o?"round":"floor"](s),this.cols=Math.max(s,1)},n.prototype.getContainerWidth=function(){var t=this.options.isFitWidth?this.element.parentNode:this.element,i=e(t);this.containerWidth=i&&i.innerWidth},n.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,n=Math[e&&1>e?"round":"ceil"](t.size.outerWidth/this.columnWidth);n=Math.min(n,this.cols);for(var r=this._getColGroup(n),s=Math.min.apply(Math,r),o=i.indexOf(r,s),a={x:this.columnWidth*o,y:s},l=s+t.size.outerHeight,u=this.cols+1-r.length,c=0;u>c;c++)this.colYs[o+c]=l;return a},n.prototype._getColGroup=function(t){if(2>t)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;i>n;n++){var r=this.colYs.slice(n,n+t);e[n]=Math.max.apply(Math,r)}return e},n.prototype._manageStamp=function(t){var i=e(t),n=this._getElementOffset(t),r=this.options.isOriginLeft?n.left:n.right,s=r+i.outerWidth,o=Math.floor(r/this.columnWidth);o=Math.max(0,o);var a=Math.floor(s/this.columnWidth);a-=s%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var l=(this.options.isOriginTop?n.top:n.bottom)+i.outerHeight,u=o;a>=u;u++)this.colYs[u]=Math.max(l,this.colYs[u])},n.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this.options.isFitWidth&&(t.width=this._getContainerFitWidth()),t},n.prototype._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},n.prototype.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!==this.containerWidth},n}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/masonry",["../layout-mode","masonry/masonry"],e):"object"==typeof exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";var i=t.create("masonry"),n=i.prototype._getElementOffset,r=i.prototype.layout,s=i.prototype._getMeasurement;(function(t,e){for(var i in e)t[i]=e[i]})(i.prototype,e.prototype),i.prototype._getElementOffset=n,i.prototype.layout=r,i.prototype._getMeasurement=s;var o=i.prototype.measureColumns;i.prototype.measureColumns=function(){this.items=this.isotope.filteredItems,o.call(this)};var a=i.prototype._manageStamp;return i.prototype._manageStamp=function(){this.options.isOriginLeft=this.isotope.options.isOriginLeft,this.options.isOriginTop=this.isotope.options.isOriginTop,a.apply(this,arguments)},i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows");return e.prototype._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,i=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>i&&(this.x=0,this.y=this.maxY);var n={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,n},e.prototype._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("isotope/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0});return e.prototype._resetLayout=function(){this.y=0},e.prototype._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,i=this.y;return this.y+=t.size.outerHeight,{x:e,y:i}},e.prototype._getContainerSize=function(){return{height:this.y}},e}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","matches-selector/matches-selector","fizzy-ui-utils/utils","isotope/js/item","isotope/js/layout-mode","isotope/js/layout-modes/masonry","isotope/js/layout-modes/fit-rows","isotope/js/layout-modes/vertical"],function(i,n,r,s,o,a){return e(t,i,n,r,s,o,a)}):"object"==typeof exports?module.exports=e(t,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("./item"),require("./layout-mode"),require("./layout-modes/masonry"),require("./layout-modes/fit-rows"),require("./layout-modes/vertical")):t.Isotope=e(t,t.Outlayer,t.getSize,t.matchesSelector,t.fizzyUIUtils,t.Isotope.Item,t.Isotope.LayoutMode)}(window,function(t,e,i,n,r,s,o){var a=t.jQuery,l=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},u=document.documentElement.textContent?function(t){return t.textContent}:function(t){return t.innerText},c=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});c.Item=s,c.LayoutMode=o,c.prototype._create=function(){for(var t in this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],o.modes)this._initLayoutMode(t)},c.prototype.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},c.prototype._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),i=0,n=t.length;n>i;i++){t[i].id=this.itemGUID++}return this._updateItemsSortData(t),t},c.prototype._initLayoutMode=function(t){var e=o.modes[t],i=this.options[t]||{};this.options[t]=e.options?r.extend(e.options,i):i,this.modes[t]=new e(this)},c.prototype.layout=function(){return!this._isLayoutInited&&this.options.isInitLayout?void this.arrange():void this._layout()},c.prototype._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},c.prototype.arrange=function(t){function e(){n.reveal(i.needReveal),n.hide(i.needHide)}this.option(t),this._getIsInstant();var i=this._filter(this.items);this.filteredItems=i.matches;var n=this;this._bindArrangeComplete(),this._isInstant?this._noTransition(e):e(),this._sort(),this._layout()},c.prototype._init=c.prototype.arrange,c.prototype._getIsInstant=function(){var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;return this._isInstant=t,t},c.prototype._bindArrangeComplete=function(){function t(){e&&i&&n&&r.dispatchEvent("arrangeComplete",null,[r.filteredItems])}var e,i,n,r=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){i=!0,t()}),this.once("revealComplete",function(){n=!0,t()})},c.prototype._filter=function(t){var e=this.options.filter;e=e||"*";for(var i=[],n=[],r=[],s=this._getFilterTest(e),o=0,a=t.length;a>o;o++){var l=t[o];if(!l.isIgnored){var u=s(l);u&&i.push(l),u&&l.isHidden?n.push(l):u||l.isHidden||r.push(l)}}return{matches:i,needReveal:n,needHide:r}},c.prototype._getFilterTest=function(t){return a&&this.options.isJQueryFiltering?function(e){return a(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return n(e.element,t)}},c.prototype.updateSortData=function(t){var e;t?(t=r.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},c.prototype._getSorters=function(){var t=this.options.getSortData;for(var e in t){var i=t[e];this._sorters[e]=d(i)}},c.prototype._updateItemsSortData=function(t){for(var e=t&&t.length,i=0;e&&e>i;i++){t[i].updateSortData()}};var d=function(t){if("string"!=typeof t)return t;var e,i,n=l(t).split(" "),r=n[0],s=r.match(/^\[(.+)\]$/),o=s&&s[1],a=(i=r,(e=o)?function(t){return t.getAttribute(e)}:function(t){var e=t.querySelector(i);return e&&u(e)}),d=c.sortDataParsers[n[1]];return d?function(t){return t&&d(a(t))}:function(t){return t&&a(t)}};c.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},c.prototype._sort=function(){var t,e,i=this.options.sortBy;if(i){var n=[].concat.apply(i,this.sortHistory),r=(t=n,e=this.options.sortAscending,function(i,n){for(var r=0,s=t.length;s>r;r++){var o=t[r],a=i.sortData[o],l=n.sortData[o];if(a>l||l>a)return(a>l?1:-1)*((void 0!==e[o]?e[o]:e)?1:-1)}return 0});this.filteredItems.sort(r),i!=this.sortHistory[0]&&this.sortHistory.unshift(i)}},c.prototype._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},c.prototype._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},c.prototype._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},c.prototype._manageStamp=function(t){this._mode()._manageStamp(t)},c.prototype._getContainerSize=function(){return this._mode()._getContainerSize()},c.prototype.needsResizeLayout=function(){return this._mode().needsResizeLayout()},c.prototype.appended=function(t){var e=this.addItems(t);if(e.length){var i=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(i)}},c.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var i=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=i.concat(this.filteredItems),this.items=e.concat(this.items)}},c.prototype._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},c.prototype.insert=function(t){var e=this.addItems(t);if(e.length){var i,n,r=e.length;for(i=0;r>i;i++)n=e[i],this.element.appendChild(n.element);var s=this._filter(e).matches;for(i=0;r>i;i++)e[i].isLayoutInstant=!0;for(this.arrange(),i=0;r>i;i++)delete e[i].isLayoutInstant;this.reveal(s)}};var h=c.prototype.remove;return c.prototype.remove=function(t){t=r.makeArray(t);var e=this.getItems(t);h.call(this,t);var i=e&&e.length;if(i)for(var n=0;i>n;n++){var s=e[n];r.removeFrom(this.filteredItems,s)}},c.prototype.shuffle=function(){for(var t=0,e=this.items.length;e>t;t++){this.items[t].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},c.prototype._noTransition=function(t){var e=this.options.transitionDuration;this.options.transitionDuration=0;var i=t.call(this);return this.options.transitionDuration=e,i},c.prototype.getFilteredItemElements=function(){for(var t=[],e=0,i=this.filteredItems.length;i>e;e++)t.push(this.filteredItems[e].element);return t},c}),$(function(){var t;t=function(t){t.extend(t.fn,{validate:function(e){if(this.length){var i=t.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new t.validator(e,this[0]),t.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(e){i.settings.submitHandler&&(i.submitButton=e.target),t(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==t(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(e){function n(){var n,r;return!i.settings.submitHandler||(i.submitButton&&(n=t("<input type='hidden'/>").attr("name",i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)),r=i.settings.submitHandler.call(i,i.currentForm,e),i.submitButton&&n.remove(),void 0!==r&&r)}return i.settings.debug&&e.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,n()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):n():(i.focusInvalid(),!1)})),i)}e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var e,i,n;return t(this[0]).is("form")?e=this.validate().form():(n=[],e=!0,i=t(this[0].form).validate(),this.each(function(){e=i.element(this)&&e,n=n.concat(i.errorList)}),i.errorList=n),e},rules:function(e,i){var n,r,s,o,a,l,u=this[0];if(e)switch(r=(n=t.data(u.form,"validator").settings).rules,s=t.validator.staticRules(u),e){case"add":t.extend(s,t.validator.normalizeRule(i)),delete s.messages,r[u.name]=s,i.messages&&(n.messages[u.name]=t.extend(n.messages[u.name],i.messages));break;case"remove":return i?(l={},t.each(i.split(/\s/),function(e,i){l[i]=s[i],delete s[i],"required"===i&&t(u).removeAttr("aria-required")}),l):(delete r[u.name],s)}return(o=t.validator.normalizeRules(t.extend({},t.validator.classRules(u),t.validator.attributeRules(u),t.validator.dataRules(u),t.validator.staticRules(u)),u)).required&&(a=o.required,delete o.required,o=t.extend({required:a},o),t(u).attr("aria-required","true")),o.remote&&(a=o.remote,delete o.remote,o=t.extend(o,{remote:a})),o}}),t.extend(t.expr[":"],{blank:function(e){return!t.trim(""+t(e).val())},filled:function(e){return!!t.trim(""+t(e).val())},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,i){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=i,this.init()},t.validator.format=function(e,i){return 1===arguments.length?function(){var i=t.makeArray(arguments);return i.unshift(e),t.validator.format.apply(this,i)}:(arguments.length>2&&i.constructor!==Array&&(i=t.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),t.each(i,function(t,i){e=e.replace(new RegExp("\\{"+t+"\\}","g"),function(){return i})}),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(t)))},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(e,i){9===i.which&&""===this.elementValue(e)||-1!==t.inArray(i.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(e.name in this.submitted||e===this.lastElement)&&this.element(e)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).addClass(i).removeClass(n):t(e).addClass(i).removeClass(n)},unhighlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).removeClass(i).addClass(n):t(e).removeClass(i).addClass(n)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date ( ISO ).",number:"Please enter a valid number.",digits:"Please enter only digits.",creditcard:"Please enter a valid credit card number.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}.")},autoCreateRanges:!1,prototype:{init:function(){this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var e,i=this.groups={};function n(e){var i=t.data(this.form,"validator"),n="on"+e.type.replace(/^validate/,""),r=i.settings;r[n]&&!t(this).is(r.ignore)&&r[n].call(i,this,e)}t.each(this.settings.groups,function(e,n){"string"==typeof n&&(n=n.split(/\s/)),t.each(n,function(t,n){i[n]=e})}),e=this.settings.rules,t.each(e,function(i,n){e[i]=t.validator.normalizeRule(n)}),t(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox']",n).on("click.validate","select, option, [type='radio'], [type='checkbox']",n),this.settings.invalidHandler&&t(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),t(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){var i=this.clean(e),n=this.validationTargetFor(i),r=!0;return this.lastElement=n,void 0===n?delete this.invalid[i.name]:(this.prepareElement(n),this.currentElements=t(n),(r=!1!==this.check(n))?delete this.invalid[n.name]:this.invalid[n.name]=!0),t(e).attr("aria-invalid",!r),this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),r},showErrors:function(e){if(e){for(var i in t.extend(this.errorMap,e),this.errorList=[],e)this.errorList.push({message:e[i],element:this.findByName(i)[0]});this.successList=t.grep(this.successList,function(t){return!(t.name in e)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors();var e,i=this.elements().removeData("previousValue").removeAttr("aria-invalid");if(this.settings.unhighlight)for(e=0;i[e];e++)this.settings.unhighlight.call(this,i[e],this.settings.errorClass,"");else i.removeClass(this.settings.errorClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e,i=0;for(e in t)i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(t){t.not(this.containers).text(""),this.addWrapper(t).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(t){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,function(t){return t.element.name===e.name}).length&&e},elements:function(){var e=this,i={};return t(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){return!this.name&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),!(this.name in i||!e.objectLength(t(this).rules()))&&(i[this.name]=!0,!0)})},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return t(this.settings.errorElement+"."+e,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([]),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var i,n=t(e),r=e.type;return"radio"===r||"checkbox"===r?this.findByName(e.name).filter(":checked").val():"number"===r&&void 0!==e.validity?!e.validity.badInput&&n.val():"string"==typeof(i=n.val())?i.replace(/\r/g,""):i},check:function(e){e=this.validationTargetFor(this.clean(e));var i,n,r,s=t(e).rules(),o=t.map(s,function(t,e){return e}).length,a=!1,l=this.elementValue(e);for(n in s){r={method:n,parameters:s[n]};try{if("dependency-mismatch"===(i=t.validator.methods[n].call(this,l,e,r.parameters))&&1===o){a=!0;continue}if(a=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(e)));if(!i)return this.formatAndAdd(e,r),!1}catch(t){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+r.method+"' method.",t),t instanceof TypeError&&(t.message+=".  Exception occurred when checking element "+e.id+", check the '"+r.method+"' method."),t}}if(!a)return this.objectLength(s)&&this.successList.push(e),!0},customDataMessage:function(e,i){return t(e).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||t(e).data("msg")},customMessage:function(t,e){var i=this.settings.messages[t];return i&&(i.constructor===String?i:i[e])},findDefined:function(){for(var t=0;t<arguments.length;t++)if(void 0!==arguments[t])return arguments[t]},defaultMessage:function(e,i){return this.findDefined(this.customMessage(e.name,i),this.customDataMessage(e,i),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[i],"<strong>Warning: No message defined for "+e.name+"</strong>")},formatAndAdd:function(e,i){var n=this.defaultMessage(e,i.method),r=/\$?\{(\d+)\}/g;"function"==typeof n?n=n.call(this,i.parameters,e):r.test(n)&&(n=t.validator.format(n.replace(r,"{$1}"),i.parameters)),this.errorList.push({message:n,element:e,method:i.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e,i;for(t=0;this.errorList[t];t++)i=this.errorList[t],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map(function(){return this.element})},showLabel:function(e,i){var n,r,s,o=this.errorsFor(e),a=this.idOrName(e),l=t(e).attr("aria-describedby");o.length?(o.removeClass(this.settings.validClass).addClass(this.settings.errorClass),o.html(i)):(n=o=t("<"+this.settings.errorElement+">").attr("id",a+"-error").addClass(this.settings.errorClass).html(i||""),this.settings.wrapper&&(n=o.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement(n,t(e)):n.insertAfter(e),o.is("label")?o.attr("for",a):0===o.parents("label[for='"+a+"']").length&&(s=o.attr("id").replace(/(:|\.|\[|\]|\$)/g,"\\$1"),l?l.match(new RegExp("\\b"+s+"\\b"))||(l+=" "+s):l=s,t(e).attr("aria-describedby",l),(r=this.groups[e.name])&&t.each(this.groups,function(e,i){i===r&&t("[name='"+e+"']",this.currentForm).attr("aria-describedby",o.attr("id"))}))),!i&&this.settings.success&&(o.text(""),"string"==typeof this.settings.success?o.addClass(this.settings.success):this.settings.success(o,e)),this.toShow=this.toShow.add(o)},errorsFor:function(e){var i=this.idOrName(e),n=t(e).attr("aria-describedby"),r="label[for='"+i+"'], label[for='"+i+"'] *";return n&&(r=r+", #"+n.replace(/\s+/g,", #")),this.errors().filter(r)},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),t(e).not(this.settings.ignore)[0]},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+e+"']")},getLength:function(e,i){switch(i.nodeName.toLowerCase()){case"select":return t("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return e.length},depend:function(t,e){return!this.dependTypes[typeof t]||this.dependTypes[typeof t](t,e)},dependTypes:{boolean:function(t){return t},string:function(e,i){return!!t(e,i.form).length},function:function(t,e){return t(e)}},optional:function(e){var i=this.elementValue(e);return!t.validator.methods.required.call(this,i,e)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,this.pending[t.name]=!0)},stopRequest:function(e,i){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(t(this.currentForm).submit(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e){return t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,"remote")})},destroy:function(){this.resetForm(),t(this.currentForm).off(".validate").removeData("validator")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,i){e.constructor===String?this.classRuleSettings[e]=i:t.extend(this.classRuleSettings,e)},classRules:function(e){var i={},n=t(e).attr("class");return n&&t.each(n.split(" "),function(){this in t.validator.classRuleSettings&&t.extend(i,t.validator.classRuleSettings[this])}),i},normalizeAttributeRule:function(t,e,i,n){/min|max/.test(i)&&(null===e||/number|range|text/.test(e))&&(n=Number(n),isNaN(n)&&(n=void 0)),n||0===n?t[i]=n:e===i&&"range"!==e&&(t[i]=!0)},attributeRules:function(e){var i,n,r={},s=t(e),o=e.getAttribute("type");for(i in t.validator.methods)"required"===i?(""===(n=e.getAttribute(i))&&(n=!0),n=!!n):n=s.attr(i),this.normalizeAttributeRule(r,o,i,n);return r.maxlength&&/-1|2147483647|524288/.test(r.maxlength)&&delete r.maxlength,r},dataRules:function(e){var i,n,r={},s=t(e),o=e.getAttribute("type");for(i in t.validator.methods)n=s.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),this.normalizeAttributeRule(r,o,i,n);return r},staticRules:function(e){var i={},n=t.data(e.form,"validator");return n.settings.rules&&(i=t.validator.normalizeRule(n.settings.rules[e.name])||{}),i},normalizeRules:function(e,i){return t.each(e,function(n,r){if(!1!==r){if(r.param||r.depends){var s=!0;switch(typeof r.depends){case"string":s=!!t(r.depends,i.form).length;break;case"function":s=r.depends.call(i,i)}s?e[n]=void 0===r.param||r.param:delete e[n]}}else delete e[n]}),t.each(e,function(n,r){e[n]=t.isFunction(r)?r(i):r}),t.each(["minlength","maxlength"],function(){e[this]&&(e[this]=Number(e[this]))}),t.each(["rangelength","range"],function(){var i;e[this]&&(t.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(i=e[this].replace(/[\[\]]/g,"").split(/[\s,]+/),e[this]=[Number(i[0]),Number(i[1])]))}),t.validator.autoCreateRanges&&(null!=e.min&&null!=e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),null!=e.minlength&&null!=e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var i={};t.each(e.split(/\s/),function(){i[this]=!0}),e=i}return e},addMethod:function(e,i,n){t.validator.methods[e]=i,t.validator.messages[e]=void 0!==n?n:t.validator.messages[e],i.length<3&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,i,n){if(!this.depend(n,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var r=t(i).val();return r&&r.length>0}return this.checkable(i)?this.getLength(e,i)>0:e.length>0},email:function(t,e){return this.optional(e)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(t)},url:function(t,e){return this.optional(e)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(t)},date:function(t,e){return this.optional(e)||!/Invalid|NaN/.test(new Date(t).toString())},dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(t)},number:function(t,e){return this.optional(e)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},creditcard:function(t,e){if(this.optional(e))return"dependency-mismatch";if(/[^0-9 \-]+/.test(t))return!1;var i,n,r=0,s=0,o=!1;if((t=t.replace(/\D/g,"")).length<13||t.length>19)return!1;for(i=t.length-1;i>=0;i--)n=t.charAt(i),s=parseInt(n,10),o&&(s*=2)>9&&(s-=9),r+=s,o=!o;return r%10==0},minlength:function(e,i,n){var r=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||r>=n},maxlength:function(e,i,n){var r=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||r<=n},rangelength:function(e,i,n){var r=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||r>=n[0]&&r<=n[1]},min:function(t,e,i){return this.optional(e)||t>=i},max:function(t,e,i){return this.optional(e)||t<=i},range:function(t,e,i){return this.optional(e)||t>=i[0]&&t<=i[1]},equalTo:function(e,i,n){var r=t(n);return this.settings.onfocusout&&r.off(".validate-equalTo").on("blur.validate-equalTo",function(){t(i).valid()}),e===r.val()},remote:function(e,i,n){if(this.optional(i))return"dependency-mismatch";var r,s,o=this.previousValue(i);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),o.originalMessage=this.settings.messages[i.name].remote,this.settings.messages[i.name].remote=o.message,n="string"==typeof n&&{url:n}||n,o.old===e?o.valid:(o.old=e,r=this,this.startRequest(i),(s={})[i.name]=e,t.ajax(t.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:s,context:r.currentForm,success:function(n){var s,a,l,u=!0===n||"true"===n;r.settings.messages[i.name].remote=o.originalMessage,u?(l=r.formSubmitted,r.prepareElement(i),r.formSubmitted=l,r.successList.push(i),delete r.invalid[i.name],r.showErrors()):(s={},a=n||r.defaultMessage(i,"remote"),s[i.name]=o.message=t.isFunction(a)?a(e):a,r.invalid[i.name]=!0,r.showErrors(s)),o.valid=u,r.stopRequest(i,u)}},n)),"pending")}}});var e,i={};t.ajaxPrefilter?t.ajaxPrefilter(function(t,e,n){var r=t.port;"abort"===t.mode&&(i[r]&&i[r].abort(),i[r]=n)}):(e=t.ajax,t.ajax=function(n){var r=("mode"in n?n:t.ajaxSettings).mode,s=("port"in n?n:t.ajaxSettings).port;return"abort"===r?(i[s]&&i[s].abort(),i[s]=e.apply(this,arguments),i[s]):e.apply(this,arguments)})},"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)}),$(function(){$(window).on("load",function(){$(".preloader").delay(1e3).fadeOut("slow")}),$(window).scroll(function(){$(this).scrollTop()>$(this).height()?$(".top").addClass("active"):$(".top").removeClass("active")}),$(".top").click(function(){$("html, body").stop().animate({scrollTop:0},"slow","swing")}),(new WOW).init(),$(".started").click(function(){var t=$(this).attr("href");return 0!=$(t).length&&$("html, body").animate({scrollTop:$(t).offset().top},1e3),!1}),$(".header-slide").owlCarousel({loop:!0,nav:!0,items:1,animateOut:"fadeOut",autoplay:!0,autoplayTimeout:3e3,autoplayHoverPause:!0,navText:[" "," "],mouseDrag:!1}),$(".header-slide").swipe({swipe:function(t,e,i,n,r,s){"left"==e&&$(this).owlCarousel("next"),"right"==e&&$(this).owlCarousel("prev")},allowPageScroll:"vertical"}),$(".owl-posts").owlCarousel({loop:!0,margin:30,autoplay:!0,autoplayTimeout:2500,autoplayHoverPause:!0,responsive:{0:{items:1},768:{items:2},992:{items:3}}}),$(".posts__nav_prev").click(function(){$(".owl-posts").owlCarousel("prev")}),$(".posts__nav_next").click(function(){$(".owl-posts").owlCarousel("next")}),$(".counter").counterUp({delay:10,time:1e3});new Swiper(".swiper-container",{effect:"coverflow",grabCursor:!0,slidesPerView:"auto",loop:!0,loopAdditionalSlides:5,loopedSlides:1,coverflowEffect:{rotate:0,stretch:500,depth:700,modifier:1,slideShadows:!1},autoplay:{delay:3e3,disableOnInteraction:!1},breakpoints:{992:{coverflowEffect:{stretch:250,depth:300}}}});$(".btn-modal1").click(function(t){$("#exampleModal1").arcticmodal()}),$(".btn-modal2").click(function(t){$("#exampleModal2").arcticmodal()}),$(".btn-modal3").click(function(t){$("#exampleModal3").arcticmodal()}),$(".btn-buy").click(function(t){$("#exampleModal4").arcticmodal()}),$(".btn-post").click(function(t){$("#exampleModal5").arcticmodal()}),$(".acord__btn").click(function(){$(this).hasClass("fa-angle-down")?$(this).closest("h4").next(".acord__sub").slideDown("slow"):$(this).closest("h4").next(".acord__sub").slideUp("slow"),$(this).toggleClass("fa-angle-down").toggleClass("fa-angle-up")});var t={video:$("#myvideo"),playpause:$("#playpause")},e=t.video[0];t.playpause.click(function(){e.paused?(e.play(),$(this).addClass("fa-pause-circle"),$(this).removeClass("fa-play-circle"),$(".poster").addClass("poster-n"),$(".presentation__title").addClass("d-none")):(e.pause(),$(this).addClass("fa-play-circle"),$(this).removeClass("fa-pause-circle"),$(".poster").removeClass("poster-n"),$(".presentation__title").removeClass("d-none"))}),e.addEventListener("ended",function(){e.pause(),t.playpause.addClass("fa-play-circle"),t.playpause.removeClass("fa-pause-circle"),$(".poster").removeClass("poster-n"),$(".presentation__title").removeClass("d-none"),$("#myvideo").click(function(){t.playpause.addClass("fa-play-circle"),t.playpause.removeClass("fa-pause-circle"),$(".poster").removeClass("poster-n"),$(".presentation__title").removeClass("d-none")})});var i=$(".projects-container").isotope({itemSelector:".projects-item",layoutMode:"fitRows"});$("#projects-flters li").on("click",function(){$("#projects-flters li").removeClass("filter-active"),$(this).addClass("filter-active"),i.isotope({filter:$(this).data("filter")})}),$("[data-submit]").on("click",function(t){t.preventDefault(),$(this).parent("form").submit()}),$.validator.addMethod("regex",function(t,e,i){var n=new RegExp(i);return this.optional(e)||n.test(t)},"Please check your input."),$(".js-form").each(function(){$(this).validate({rules:{tel:{required:!0,regex:"^([+]+)*[0-9 ()-]{5,20}$"},name:{required:!0},email:{required:!0,email:!0}},messages:{tel:{required:"ÐÐ¾Ð»Ðµ Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð´Ð»Ñ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ",regex:"Ð¢ÐµÐ»ÐµÑÐ¾Ð½ Ð¼Ð¾Ð¶ÐµÑ ÑÐ¾Ð´ÐµÑÐ¶Ð°ÑÑ ÑÐ¸Ð¼Ð²Ð¾Ð»Ñ + - ()"},name:{required:"ÐÐ¾Ð»Ðµ Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð´Ð»Ñ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ"},email:{required:"ÐÐ¾Ð»Ðµ Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð´Ð»Ñ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ",email:"ÐÐµÐ²ÐµÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ E-mail"}},submitHandler:function(t){$("#loader").fadeIn();var e=$(t);switch($(t).attr("id")){case"goToNewPage":$.ajax({type:"POST",url:e.attr("action"),data:e.serialize()}).always(function(t){location.href="after.html",ga("send","event","masterklass7","register"),yaCounter27714603.reachGoal("lm17lead")});break;case"popupResult":$.ajax({type:"POST",url:e.attr("action"),data:e.serialize()}).always(function(t){setTimeout(function(){$.arcticmodal("close"),$("#loader").fadeOut()},800),setTimeout(function(){$("#overlay").fadeIn(),e.trigger("reset")},1100),$("#overlay").on("click",function(t){$("#overlay").fadeOut()})})}return!1}})}),$("[data-scroll]").on("click",function(){$("html, body").animate({scrollTop:$($.attr(this,"data-scroll")).offset().top},2e3),event.preventDefault()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
